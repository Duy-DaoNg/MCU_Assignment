
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004738  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004844  08004844  00014844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080048b8  080048b8  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b8  080048b8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080048c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000a0  08004960  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004960  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164c0  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ced  00000000  00000000  00036589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00039278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00039fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019be9  00000000  00000000  0003abb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113d5  00000000  00000000  000547a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b292  00000000  00000000  00065b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0e08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  000f0e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800482c 	.word	0x0800482c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	0800482c 	.word	0x0800482c

0800014c <button_reading>:
static GPIO_PinState Reg1[NO_OF_BUTTONS];
static GPIO_PinState Reg2[NO_OF_BUTTONS];
/* Set time out */
int TimerForKeyPress = 300;
/* Read input then set button flag */
void button_reading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0a6      	b.n	80002a6 <button_reading+0x15a>
		Reg2[i] = Reg1[i];
 8000158:	4a57      	ldr	r2, [pc, #348]	; (80002b8 <button_reading+0x16c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a56      	ldr	r2, [pc, #344]	; (80002bc <button_reading+0x170>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		Reg1[i] = Reg0[i];
 800016a:	4a55      	ldr	r2, [pc, #340]	; (80002c0 <button_reading+0x174>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a51      	ldr	r2, [pc, #324]	; (80002b8 <button_reading+0x16c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 800017c:	4a51      	ldr	r2, [pc, #324]	; (80002c4 <button_reading+0x178>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000184:	4619      	mov	r1, r3
 8000186:	4850      	ldr	r0, [pc, #320]	; (80002c8 <button_reading+0x17c>)
 8000188:	f001 fe64 	bl	8001e54 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	4619      	mov	r1, r3
 8000190:	4a4b      	ldr	r2, [pc, #300]	; (80002c0 <button_reading+0x174>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	460a      	mov	r2, r1
 8000198:	701a      	strb	r2, [r3, #0]
		if(i <= 1){
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	dc0f      	bgt.n	80001c0 <button_reading+0x74>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001a0:	4a48      	ldr	r2, [pc, #288]	; (80002c4 <button_reading+0x178>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001a8:	4619      	mov	r1, r3
 80001aa:	4847      	ldr	r0, [pc, #284]	; (80002c8 <button_reading+0x17c>)
 80001ac:	f001 fe52 	bl	8001e54 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a42      	ldr	r2, [pc, #264]	; (80002c0 <button_reading+0x174>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4413      	add	r3, r2
 80001ba:	460a      	mov	r2, r1
 80001bc:	701a      	strb	r2, [r3, #0]
 80001be:	e021      	b.n	8000204 <button_reading+0xb8>
		}
		else if(i == 2){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d10f      	bne.n	80001e6 <button_reading+0x9a>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOB, INPUT_BUTTON[i]);
 80001c6:	4a3f      	ldr	r2, [pc, #252]	; (80002c4 <button_reading+0x178>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ce:	4619      	mov	r1, r3
 80001d0:	483e      	ldr	r0, [pc, #248]	; (80002cc <button_reading+0x180>)
 80001d2:	f001 fe3f 	bl	8001e54 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a39      	ldr	r2, [pc, #228]	; (80002c0 <button_reading+0x174>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	460a      	mov	r2, r1
 80001e2:	701a      	strb	r2, [r3, #0]
 80001e4:	e00e      	b.n	8000204 <button_reading+0xb8>
		}
		else{
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001e6:	4a37      	ldr	r2, [pc, #220]	; (80002c4 <button_reading+0x178>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ee:	4619      	mov	r1, r3
 80001f0:	4835      	ldr	r0, [pc, #212]	; (80002c8 <button_reading+0x17c>)
 80001f2:	f001 fe2f 	bl	8001e54 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a31      	ldr	r2, [pc, #196]	; (80002c0 <button_reading+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	460a      	mov	r2, r1
 8000202:	701a      	strb	r2, [r3, #0]
		}
		/* Check stable state */
		if((Reg0[i] == Reg1[i]) && (Reg1[i] == Reg2[i])){
 8000204:	4a2e      	ldr	r2, [pc, #184]	; (80002c0 <button_reading+0x174>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	781a      	ldrb	r2, [r3, #0]
 800020c:	492a      	ldr	r1, [pc, #168]	; (80002b8 <button_reading+0x16c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	440b      	add	r3, r1
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d143      	bne.n	80002a0 <button_reading+0x154>
 8000218:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <button_reading+0x16c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	781a      	ldrb	r2, [r3, #0]
 8000220:	4926      	ldr	r1, [pc, #152]	; (80002bc <button_reading+0x170>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	440b      	add	r3, r1
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	429a      	cmp	r2, r3
 800022a:	d139      	bne.n	80002a0 <button_reading+0x154>
			if(Reg3[i] != Reg2[i]){
 800022c:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <button_reading+0x184>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4413      	add	r3, r2
 8000232:	781a      	ldrb	r2, [r3, #0]
 8000234:	4921      	ldr	r1, [pc, #132]	; (80002bc <button_reading+0x170>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	440b      	add	r3, r1
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d018      	beq.n	8000272 <button_reading+0x126>
				Reg3[i] = Reg2[i];
 8000240:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <button_reading+0x170>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4413      	add	r3, r2
 8000246:	7819      	ldrb	r1, [r3, #0]
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <button_reading+0x184>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4413      	add	r3, r2
 800024e:	460a      	mov	r2, r1
 8000250:	701a      	strb	r2, [r3, #0]
				if(Reg2[i] == PRESSED){
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <button_reading+0x170>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d120      	bne.n	80002a0 <button_reading+0x154>
					/* Button is pressed set flag */
					buttonPressed_flag[i] = 1;
 800025e:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <button_reading+0x188>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
					TimerForKeyPress = 300;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <button_reading+0x18c>)
 800026a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	e016      	b.n	80002a0 <button_reading+0x154>
				}
			}
			else{
				/* Long-press handle*/
				if(Reg2[i] == PRESSED){
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <button_reading+0x170>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d110      	bne.n	80002a0 <button_reading+0x154>
					TimerForKeyPress--;
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <button_reading+0x18c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3b01      	subs	r3, #1
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <button_reading+0x18c>)
 8000286:	6013      	str	r3, [r2, #0]
					if(TimerForKeyPress == 0){
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <button_reading+0x18c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d107      	bne.n	80002a0 <button_reading+0x154>
						buttonPressed_flag[i] = 1;
 8000290:	4a10      	ldr	r2, [pc, #64]	; (80002d4 <button_reading+0x188>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4413      	add	r3, r2
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
						TimerForKeyPress = 100;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <button_reading+0x18c>)
 800029c:	2264      	movs	r2, #100	; 0x64
 800029e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	f77f af55 	ble.w	8000158 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200000c4 	.word	0x200000c4
 80002bc:	200000c8 	.word	0x200000c8
 80002c0:	200000c0 	.word	0x200000c0
 80002c4:	20000004 	.word	0x20000004
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	200000bc 	.word	0x200000bc
 80002d4:	200000d0 	.word	0x200000d0
 80002d8:	20000000 	.word	0x20000000

080002dc <FSM_Buzzer>:
 *      Author: Minh Duc Quach
 */

#include "buzzer.h"

void FSM_Buzzer(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	/* If Pedestrian button is pressed and the pedestrian is allowed to cross the road */
	if(FSM_Pedestrian_State == WORK && FSM_Traffic_Light_State_Row == AUTO_RED){
 80002e0:	4b3f      	ldr	r3, [pc, #252]	; (80003e0 <FSM_Buzzer+0x104>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d158      	bne.n	800039a <FSM_Buzzer+0xbe>
 80002e8:	4b3e      	ldr	r3, [pc, #248]	; (80003e4 <FSM_Buzzer+0x108>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d154      	bne.n	800039a <FSM_Buzzer+0xbe>
		switch (FSM_Buzzer_State){
 80002f0:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <FSM_Buzzer+0x10c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d020      	beq.n	800033a <FSM_Buzzer+0x5e>
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d148      	bne.n	800038e <FSM_Buzzer+0xb2>
		case ON:
			/* Turn on Buzzer */
			if(timer4Flag == 1){
 80002fc:	4b3b      	ldr	r3, [pc, #236]	; (80003ec <FSM_Buzzer+0x110>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d146      	bne.n	8000392 <FSM_Buzzer+0xb6>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Increase_Duty_Cycle);		// set buzzer volume
 8000304:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <FSM_Buzzer+0x114>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b3a      	ldr	r3, [pc, #232]	; (80003f4 <FSM_Buzzer+0x118>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	635a      	str	r2, [r3, #52]	; 0x34
				Increase_Duty_Cycle += 50;
 800030e:	4b38      	ldr	r3, [pc, #224]	; (80003f0 <FSM_Buzzer+0x114>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3332      	adds	r3, #50	; 0x32
 8000314:	4a36      	ldr	r2, [pc, #216]	; (80003f0 <FSM_Buzzer+0x114>)
 8000316:	6013      	str	r3, [r2, #0]
				if(Increase_Duty_Cycle >= 999){											// 999 is the maximum period
 8000318:	4b35      	ldr	r3, [pc, #212]	; (80003f0 <FSM_Buzzer+0x114>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000320:	4293      	cmp	r3, r2
 8000322:	dd03      	ble.n	800032c <FSM_Buzzer+0x50>
					Increase_Duty_Cycle = 989;
 8000324:	4b32      	ldr	r3, [pc, #200]	; (80003f0 <FSM_Buzzer+0x114>)
 8000326:	f240 32dd 	movw	r2, #989	; 0x3dd
 800032a:	601a      	str	r2, [r3, #0]
				}
				FSM_Buzzer_State = OFF;
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <FSM_Buzzer+0x10c>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
				/* The buzzer is ON for DURATION_ON_TIME * TICK ms */
				setTimer4(DURATION_ON_TIME * TICK);
 8000332:	200a      	movs	r0, #10
 8000334:	f001 f8f4 	bl	8001520 <setTimer4>
			}
			break;
 8000338:	e02b      	b.n	8000392 <FSM_Buzzer+0xb6>
		case OFF:
			if(timer4Flag == 1){
 800033a:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <FSM_Buzzer+0x110>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d129      	bne.n	8000396 <FSM_Buzzer+0xba>
				FSM_Buzzer_State = ON;
 8000342:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <FSM_Buzzer+0x10c>)
 8000344:	2201      	movs	r2, #1
 8000346:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);						// turn off buzzer
 8000348:	4b2a      	ldr	r3, [pc, #168]	; (80003f4 <FSM_Buzzer+0x118>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
				/* If the OFF duration is small enough, stop decreasing OFF duration and keep it at TICK ms */
				if(red_time*TICK*100 <= Increase_Speed){
 8000350:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <FSM_Buzzer+0x11c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2264      	movs	r2, #100	; 0x64
 8000356:	fb02 f203 	mul.w	r2, r2, r3
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <FSM_Buzzer+0x120>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	dc03      	bgt.n	800036a <FSM_Buzzer+0x8e>
					setTimer4(1*TICK);
 8000362:	2001      	movs	r0, #1
 8000364:	f001 f8dc 	bl	8001520 <setTimer4>
					break;
 8000368:	e016      	b.n	8000398 <FSM_Buzzer+0xbc>
				}
				Increase_Speed += 4;
 800036a:	4b24      	ldr	r3, [pc, #144]	; (80003fc <FSM_Buzzer+0x120>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3304      	adds	r3, #4
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <FSM_Buzzer+0x120>)
 8000372:	6013      	str	r3, [r2, #0]
				/* Increase the beeping frequency by decreasing buzzer's OFF duration */
				setTimer4(red_time*TICK*100/Increase_Speed);
 8000374:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <FSM_Buzzer+0x11c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2264      	movs	r2, #100	; 0x64
 800037a:	fb02 f203 	mul.w	r2, r2, r3
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <FSM_Buzzer+0x120>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	fb92 f3f3 	sdiv	r3, r2, r3
 8000386:	4618      	mov	r0, r3
 8000388:	f001 f8ca 	bl	8001520 <setTimer4>
			}
			break;
 800038c:	e003      	b.n	8000396 <FSM_Buzzer+0xba>
		default:
			break;
 800038e:	bf00      	nop
 8000390:	e023      	b.n	80003da <FSM_Buzzer+0xfe>
			break;
 8000392:	bf00      	nop
 8000394:	e021      	b.n	80003da <FSM_Buzzer+0xfe>
			break;
 8000396:	bf00      	nop
		switch (FSM_Buzzer_State){
 8000398:	e01f      	b.n	80003da <FSM_Buzzer+0xfe>
		}
	}
	/* If Pedestrian button is pressed and the pedestrian is not allowed to cross the road */
	else if(FSM_Pedestrian_State == WORK && FSM_Traffic_Light_State_Row != AUTO_RED){
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <FSM_Buzzer+0x104>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d10f      	bne.n	80003c2 <FSM_Buzzer+0xe6>
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <FSM_Buzzer+0x108>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d00b      	beq.n	80003c2 <FSM_Buzzer+0xe6>
		/* Reset all */
		Increase_Duty_Cycle = 99;		// initial volume
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <FSM_Buzzer+0x114>)
 80003ac:	2263      	movs	r2, #99	; 0x63
 80003ae:	601a      	str	r2, [r3, #0]
		Increase_Speed = red_time;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <FSM_Buzzer+0x11c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <FSM_Buzzer+0x120>)
 80003b6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <FSM_Buzzer+0x118>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2200      	movs	r2, #0
 80003be:	635a      	str	r2, [r3, #52]	; 0x34
 80003c0:	e00b      	b.n	80003da <FSM_Buzzer+0xfe>
	}
	/* Other cases */
	else{
		Increase_Duty_Cycle = 99;		// initial volume
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <FSM_Buzzer+0x114>)
 80003c4:	2263      	movs	r2, #99	; 0x63
 80003c6:	601a      	str	r2, [r3, #0]
		Increase_Speed = red_time;
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <FSM_Buzzer+0x11c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <FSM_Buzzer+0x120>)
 80003ce:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <FSM_Buzzer+0x118>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2200      	movs	r2, #0
 80003d6:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200000d8 	.word	0x200000d8
 80003e4:	200000d4 	.word	0x200000d4
 80003e8:	200000dc 	.word	0x200000dc
 80003ec:	200000fc 	.word	0x200000fc
 80003f0:	20000010 	.word	0x20000010
 80003f4:	20000114 	.word	0x20000114
 80003f8:	20000018 	.word	0x20000018
 80003fc:	20000014 	.word	0x20000014

08000400 <display_traffic_light>:
 *      Author: LENOVO
 */

#include "display_traffic_light.h"

void display_traffic_light(){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row){
 8000404:	4b84      	ldr	r3, [pc, #528]	; (8000618 <display_traffic_light+0x218>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b09      	cmp	r3, #9
 800040a:	f200 80a1 	bhi.w	8000550 <display_traffic_light+0x150>
 800040e:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <display_traffic_light+0x14>)
 8000410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000414:	0800043d 	.word	0x0800043d
 8000418:	08000499 	.word	0x08000499
 800041c:	080004f5 	.word	0x080004f5
 8000420:	08000455 	.word	0x08000455
 8000424:	080004b1 	.word	0x080004b1
 8000428:	0800050d 	.word	0x0800050d
 800042c:	08000551 	.word	0x08000551
 8000430:	0800046d 	.word	0x0800046d
 8000434:	080004c9 	.word	0x080004c9
 8000438:	08000525 	.word	0x08000525
	case AUTO_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000442:	4876      	ldr	r0, [pc, #472]	; (800061c <display_traffic_light+0x21c>)
 8000444:	f001 fd1d 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2108      	movs	r1, #8
 800044c:	4874      	ldr	r0, [pc, #464]	; (8000620 <display_traffic_light+0x220>)
 800044e:	f001 fd18 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 8000452:	e088      	b.n	8000566 <display_traffic_light+0x166>
	case MANUAL_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045a:	4870      	ldr	r0, [pc, #448]	; (800061c <display_traffic_light+0x21c>)
 800045c:	f001 fd11 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2108      	movs	r1, #8
 8000464:	486e      	ldr	r0, [pc, #440]	; (8000620 <display_traffic_light+0x220>)
 8000466:	f001 fd0c 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 800046a:	e07c      	b.n	8000566 <display_traffic_light+0x166>
	case SET_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000472:	486a      	ldr	r0, [pc, #424]	; (800061c <display_traffic_light+0x21c>)
 8000474:	f001 fd05 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2108      	movs	r1, #8
 800047c:	4868      	ldr	r0, [pc, #416]	; (8000620 <display_traffic_light+0x220>)
 800047e:	f001 fd00 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	2120      	movs	r1, #32
 8000486:	4866      	ldr	r0, [pc, #408]	; (8000620 <display_traffic_light+0x220>)
 8000488:	f001 fcfb 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	4863      	ldr	r0, [pc, #396]	; (8000620 <display_traffic_light+0x220>)
 8000492:	f001 fcf6 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 8000496:	e066      	b.n	8000566 <display_traffic_light+0x166>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049e:	485f      	ldr	r0, [pc, #380]	; (800061c <display_traffic_light+0x21c>)
 80004a0:	f001 fcef 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2108      	movs	r1, #8
 80004a8:	485d      	ldr	r0, [pc, #372]	; (8000620 <display_traffic_light+0x220>)
 80004aa:	f001 fcea 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 80004ae:	e05a      	b.n	8000566 <display_traffic_light+0x166>
	case MANUAL_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b6:	4859      	ldr	r0, [pc, #356]	; (800061c <display_traffic_light+0x21c>)
 80004b8:	f001 fce3 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4857      	ldr	r0, [pc, #348]	; (8000620 <display_traffic_light+0x220>)
 80004c2:	f001 fcde 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 80004c6:	e04e      	b.n	8000566 <display_traffic_light+0x166>
	case SET_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ce:	4853      	ldr	r0, [pc, #332]	; (800061c <display_traffic_light+0x21c>)
 80004d0:	f001 fcd7 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4851      	ldr	r0, [pc, #324]	; (8000620 <display_traffic_light+0x220>)
 80004da:	f001 fcd2 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	484f      	ldr	r0, [pc, #316]	; (8000620 <display_traffic_light+0x220>)
 80004e4:	f001 fccd 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2110      	movs	r1, #16
 80004ec:	484c      	ldr	r0, [pc, #304]	; (8000620 <display_traffic_light+0x220>)
 80004ee:	f001 fcc8 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 80004f2:	e038      	b.n	8000566 <display_traffic_light+0x166>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	4848      	ldr	r0, [pc, #288]	; (800061c <display_traffic_light+0x21c>)
 80004fc:	f001 fcc1 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2108      	movs	r1, #8
 8000504:	4846      	ldr	r0, [pc, #280]	; (8000620 <display_traffic_light+0x220>)
 8000506:	f001 fcbc 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 800050a:	e02c      	b.n	8000566 <display_traffic_light+0x166>
	case MANUAL_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000512:	4842      	ldr	r0, [pc, #264]	; (800061c <display_traffic_light+0x21c>)
 8000514:	f001 fcb5 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2108      	movs	r1, #8
 800051c:	4840      	ldr	r0, [pc, #256]	; (8000620 <display_traffic_light+0x220>)
 800051e:	f001 fcb0 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 8000522:	e020      	b.n	8000566 <display_traffic_light+0x166>
	case SET_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052a:	483c      	ldr	r0, [pc, #240]	; (800061c <display_traffic_light+0x21c>)
 800052c:	f001 fca9 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2108      	movs	r1, #8
 8000534:	483a      	ldr	r0, [pc, #232]	; (8000620 <display_traffic_light+0x220>)
 8000536:	f001 fca4 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2120      	movs	r1, #32
 800053e:	4838      	ldr	r0, [pc, #224]	; (8000620 <display_traffic_light+0x220>)
 8000540:	f001 fc9f 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4835      	ldr	r0, [pc, #212]	; (8000620 <display_traffic_light+0x220>)
 800054a:	f001 fc9a 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 800054e:	e00a      	b.n	8000566 <display_traffic_light+0x166>
	default:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000556:	4831      	ldr	r0, [pc, #196]	; (800061c <display_traffic_light+0x21c>)
 8000558:	f001 fc93 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	482f      	ldr	r0, [pc, #188]	; (8000620 <display_traffic_light+0x220>)
 8000562:	f001 fc8e 	bl	8001e82 <HAL_GPIO_WritePin>
	}
	switch (FSM_Traffic_Light_State_Col){
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <display_traffic_light+0x224>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b05      	cmp	r3, #5
 800056c:	d850      	bhi.n	8000610 <display_traffic_light+0x210>
 800056e:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <display_traffic_light+0x174>)
 8000570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000574:	0800058d 	.word	0x0800058d
 8000578:	080005b9 	.word	0x080005b9
 800057c:	080005e5 	.word	0x080005e5
 8000580:	080005a3 	.word	0x080005a3
 8000584:	080005cf 	.word	0x080005cf
 8000588:	080005fb 	.word	0x080005fb
	case AUTO_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2120      	movs	r1, #32
 8000590:	4823      	ldr	r0, [pc, #140]	; (8000620 <display_traffic_light+0x220>)
 8000592:	f001 fc76 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4821      	ldr	r0, [pc, #132]	; (8000620 <display_traffic_light+0x220>)
 800059c:	f001 fc71 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 80005a0:	e037      	b.n	8000612 <display_traffic_light+0x212>
	case MANUAL_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <display_traffic_light+0x220>)
 80005a8:	f001 fc6b 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2110      	movs	r1, #16
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <display_traffic_light+0x220>)
 80005b2:	f001 fc66 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 80005b6:	e02c      	b.n	8000612 <display_traffic_light+0x212>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2120      	movs	r1, #32
 80005bc:	4818      	ldr	r0, [pc, #96]	; (8000620 <display_traffic_light+0x220>)
 80005be:	f001 fc60 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2110      	movs	r1, #16
 80005c6:	4816      	ldr	r0, [pc, #88]	; (8000620 <display_traffic_light+0x220>)
 80005c8:	f001 fc5b 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 80005cc:	e021      	b.n	8000612 <display_traffic_light+0x212>
	case MANUAL_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	4813      	ldr	r0, [pc, #76]	; (8000620 <display_traffic_light+0x220>)
 80005d4:	f001 fc55 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2110      	movs	r1, #16
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <display_traffic_light+0x220>)
 80005de:	f001 fc50 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 80005e2:	e016      	b.n	8000612 <display_traffic_light+0x212>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <display_traffic_light+0x220>)
 80005ea:	f001 fc4a 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <display_traffic_light+0x220>)
 80005f4:	f001 fc45 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 80005f8:	e00b      	b.n	8000612 <display_traffic_light+0x212>
	case MANUAL_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2120      	movs	r1, #32
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <display_traffic_light+0x220>)
 8000600:	f001 fc3f 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <display_traffic_light+0x220>)
 800060a:	f001 fc3a 	bl	8001e82 <HAL_GPIO_WritePin>
		break;
 800060e:	e000      	b.n	8000612 <display_traffic_light+0x212>
	default:
		break;
 8000610:	bf00      	nop
	}
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000d4 	.word	0x200000d4
 800061c:	40010800 	.word	0x40010800
 8000620:	40010c00 	.word	0x40010c00
 8000624:	2000000c 	.word	0x2000000c

08000628 <FSM_Pedestrian>:
 *      Author: duchu
 */

#include "fsm_pedestrian.h"

void FSM_Pedestrian(){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    switch(FSM_Pedestrian_State){
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <FSM_Pedestrian+0xf4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <FSM_Pedestrian+0x12>
 8000634:	2b01      	cmp	r3, #1
 8000636:	d023      	beq.n	8000680 <FSM_Pedestrian+0x58>
        default:
            break;
        }
        break;
    default:
        break;
 8000638:	e06d      	b.n	8000716 <FSM_Pedestrian+0xee>
        HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000640:	4837      	ldr	r0, [pc, #220]	; (8000720 <FSM_Pedestrian+0xf8>)
 8000642:	f001 fc1e 	bl	8001e82 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	4835      	ldr	r0, [pc, #212]	; (8000724 <FSM_Pedestrian+0xfc>)
 800064e:	f001 fc18 	bl	8001e82 <HAL_GPIO_WritePin>
        if(buttonPressed_flag[3]){
 8000652:	4b35      	ldr	r3, [pc, #212]	; (8000728 <FSM_Pedestrian+0x100>)
 8000654:	78db      	ldrb	r3, [r3, #3]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d05c      	beq.n	8000714 <FSM_Pedestrian+0xec>
            buttonPressed_flag[3] = 0;
 800065a:	4b33      	ldr	r3, [pc, #204]	; (8000728 <FSM_Pedestrian+0x100>)
 800065c:	2200      	movs	r2, #0
 800065e:	70da      	strb	r2, [r3, #3]
            FSM_Pedestrian_State = WORK;
 8000660:	4b2e      	ldr	r3, [pc, #184]	; (800071c <FSM_Pedestrian+0xf4>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
            FSM_Buzzer_State = ON;
 8000666:	4b31      	ldr	r3, [pc, #196]	; (800072c <FSM_Pedestrian+0x104>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
            setTimer4(1*TICK);														// buzzer timer
 800066c:	2001      	movs	r0, #1
 800066e:	f000 ff57 	bl	8001520 <setTimer4>
            setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);							// pedestrian mode timer, set to 2 cycles of RED + YELLOW + GREEN
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <FSM_Pedestrian+0x108>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f000 ff3d 	bl	80014f8 <setTimer3>
        break;
 800067e:	e049      	b.n	8000714 <FSM_Pedestrian+0xec>
        if(timer3Flag == 1 || FSM_Traffic_Light_State_Row == (SET_GREEN
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <FSM_Pedestrian+0x10c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d003      	beq.n	8000690 <FSM_Pedestrian+0x68>
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <FSM_Pedestrian+0x110>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d103      	bne.n	8000698 <FSM_Pedestrian+0x70>
            FSM_Pedestrian_State = IDLE;
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <FSM_Pedestrian+0xf4>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
            break;
 8000696:	e03e      	b.n	8000716 <FSM_Pedestrian+0xee>
        if(buttonPressed_flag[3]){	// the button is pressed before timeout
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <FSM_Pedestrian+0x100>)
 800069a:	78db      	ldrb	r3, [r3, #3]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d005      	beq.n	80006ac <FSM_Pedestrian+0x84>
            setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <FSM_Pedestrian+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 ff26 	bl	80014f8 <setTimer3>
        switch (FSM_Traffic_Light_State_Col){
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <FSM_Pedestrian+0x114>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d020      	beq.n	80006f6 <FSM_Pedestrian+0xce>
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	dc2b      	bgt.n	8000710 <FSM_Pedestrian+0xe8>
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <FSM_Pedestrian+0x9a>
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d00d      	beq.n	80006dc <FSM_Pedestrian+0xb4>
            break;
 80006c0:	e026      	b.n	8000710 <FSM_Pedestrian+0xe8>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c8:	4815      	ldr	r0, [pc, #84]	; (8000720 <FSM_Pedestrian+0xf8>)
 80006ca:	f001 fbda 	bl	8001e82 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <FSM_Pedestrian+0xfc>)
 80006d6:	f001 fbd4 	bl	8001e82 <HAL_GPIO_WritePin>
            break;
 80006da:	e01a      	b.n	8000712 <FSM_Pedestrian+0xea>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <FSM_Pedestrian+0xf8>)
 80006e4:	f001 fbcd 	bl	8001e82 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <FSM_Pedestrian+0xfc>)
 80006f0:	f001 fbc7 	bl	8001e82 <HAL_GPIO_WritePin>
            break;
 80006f4:	e00d      	b.n	8000712 <FSM_Pedestrian+0xea>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <FSM_Pedestrian+0xf8>)
 80006fe:	f001 fbc0 	bl	8001e82 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	4806      	ldr	r0, [pc, #24]	; (8000724 <FSM_Pedestrian+0xfc>)
 800070a:	f001 fbba 	bl	8001e82 <HAL_GPIO_WritePin>
            break;
 800070e:	e000      	b.n	8000712 <FSM_Pedestrian+0xea>
            break;
 8000710:	bf00      	nop
        break;
 8000712:	e000      	b.n	8000716 <FSM_Pedestrian+0xee>
        break;
 8000714:	bf00      	nop
    }
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000d8 	.word	0x200000d8
 8000720:	40010c00 	.word	0x40010c00
 8000724:	40010800 	.word	0x40010800
 8000728:	200000d0 	.word	0x200000d0
 800072c:	200000dc 	.word	0x200000dc
 8000730:	2000002c 	.word	0x2000002c
 8000734:	200000f4 	.word	0x200000f4
 8000738:	200000d4 	.word	0x200000d4
 800073c:	2000000c 	.word	0x2000000c

08000740 <resetAllButtonState>:

#include "fsm_traffic_light.h"

int To_Default_State = 0;		// used to set COL traffic state

void resetAllButtonState(){		// reset buttons
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	e007      	b.n	800075c <resetAllButtonState+0x1c>
		buttonPressed_flag[i] = 0;
 800074c:	4a08      	ldr	r2, [pc, #32]	; (8000770 <resetAllButtonState+0x30>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b03      	cmp	r3, #3
 8000760:	ddf4      	ble.n	800074c <resetAllButtonState+0xc>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	200000d0 	.word	0x200000d0

08000774 <changeTime>:

void changeTime(){				// change traffic time
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	Set_TL_Time++;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <changeTime+0x24>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <changeTime+0x24>)
 8000780:	6013      	str	r3, [r2, #0]
	if(Set_TL_Time >= 100){		// 1 <= time <= 99
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <changeTime+0x24>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b63      	cmp	r3, #99	; 0x63
 8000788:	dd02      	ble.n	8000790 <changeTime+0x1c>
		Set_TL_Time = 1;
 800078a:	4b03      	ldr	r3, [pc, #12]	; (8000798 <changeTime+0x24>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	}
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000100 	.word	0x20000100

0800079c <FSM_Traffic_Light_Row>:

void FSM_Traffic_Light_Row(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row) {
 80007a0:	4ba6      	ldr	r3, [pc, #664]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b09      	cmp	r3, #9
 80007a6:	f200 8289 	bhi.w	8000cbc <FSM_Traffic_Light_Row+0x520>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <FSM_Traffic_Light_Row+0x14>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	080007d9 	.word	0x080007d9
 80007b4:	0800085f 	.word	0x0800085f
 80007b8:	080008e5 	.word	0x080008e5
 80007bc:	08000ba1 	.word	0x08000ba1
 80007c0:	08000c01 	.word	0x08000c01
 80007c4:	08000c5f 	.word	0x08000c5f
 80007c8:	08000cbd 	.word	0x08000cbd
 80007cc:	0800096b 	.word	0x0800096b
 80007d0:	08000a15 	.word	0x08000a15
 80007d4:	08000aeb 	.word	0x08000aeb
	/* AUTO MODE */
	case AUTO_RED:
		if(timer1Flag == 1){
 80007d8:	4b99      	ldr	r3, [pc, #612]	; (8000a40 <FSM_Traffic_Light_Row+0x2a4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d114      	bne.n	800080a <FSM_Traffic_Light_Row+0x6e>
			/* Count down time */
			traffic_light_remain_time_row--;
 80007e0:	4b98      	ldr	r3, [pc, #608]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	4a97      	ldr	r2, [pc, #604]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 80007e8:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 80007ea:	4b96      	ldr	r3, [pc, #600]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d106      	bne.n	8000800 <FSM_Traffic_Light_Row+0x64>
				/* Move to next state */
				FSM_Traffic_Light_State_Row = AUTO_GREEN;
 80007f2:	4b92      	ldr	r3, [pc, #584]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = green_time;
 80007f8:	4b93      	ldr	r3, [pc, #588]	; (8000a48 <FSM_Traffic_Light_Row+0x2ac>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a91      	ldr	r2, [pc, #580]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 80007fe:	6013      	str	r3, [r2, #0]
			}

			uart_transmit();
 8000800:	f000 fef8 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000804:	2064      	movs	r0, #100	; 0x64
 8000806:	f000 fe4f 	bl	80014a8 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 800080a:	4b90      	ldr	r3, [pc, #576]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d014      	beq.n	800083c <FSM_Traffic_Light_Row+0xa0>
			buttonPressed_flag[0] = 0;
 8000812:	4b8e      	ldr	r3, [pc, #568]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000818:	4b8d      	ldr	r3, [pc, #564]	; (8000a50 <FSM_Traffic_Light_Row+0x2b4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a8d      	ldr	r2, [pc, #564]	; (8000a54 <FSM_Traffic_Light_Row+0x2b8>)
 800081e:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 8000820:	4b86      	ldr	r3, [pc, #536]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 8000822:	2207      	movs	r2, #7
 8000824:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000826:	4b8c      	ldr	r3, [pc, #560]	; (8000a58 <FSM_Traffic_Light_Row+0x2bc>)
 8000828:	2206      	movs	r2, #6
 800082a:	601a      	str	r2, [r3, #0]
			uart_transmit();
 800082c:	f000 fee2 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000834:	f000 fe38 	bl	80014a8 <setTimer1>
			resetAllButtonState();
 8000838:	f7ff ff82 	bl	8000740 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 800083c:	4b83      	ldr	r3, [pc, #524]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 800083e:	785b      	ldrb	r3, [r3, #1]
 8000840:	2b00      	cmp	r3, #0
 8000842:	f000 823d 	beq.w	8000cc0 <FSM_Traffic_Light_Row+0x524>
			buttonPressed_flag[1] = 0;
 8000846:	4b81      	ldr	r3, [pc, #516]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 8000848:	2200      	movs	r2, #0
 800084a:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 800084c:	4b7b      	ldr	r3, [pc, #492]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 800084e:	2203      	movs	r2, #3
 8000850:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000852:	4b81      	ldr	r3, [pc, #516]	; (8000a58 <FSM_Traffic_Light_Row+0x2bc>)
 8000854:	2204      	movs	r2, #4
 8000856:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000858:	f7ff ff72 	bl	8000740 <resetAllButtonState>
		}
		break;
 800085c:	e230      	b.n	8000cc0 <FSM_Traffic_Light_Row+0x524>
	case AUTO_GREEN:
		if(timer1Flag == 1){
 800085e:	4b78      	ldr	r3, [pc, #480]	; (8000a40 <FSM_Traffic_Light_Row+0x2a4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d114      	bne.n	8000890 <FSM_Traffic_Light_Row+0xf4>
			/* Count down time */
			traffic_light_remain_time_row--;
 8000866:	4b77      	ldr	r3, [pc, #476]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3b01      	subs	r3, #1
 800086c:	4a75      	ldr	r2, [pc, #468]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 800086e:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 8000870:	4b74      	ldr	r3, [pc, #464]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d106      	bne.n	8000886 <FSM_Traffic_Light_Row+0xea>
				/* Move to next state */
				FSM_Traffic_Light_State_Row = AUTO_YEL;
 8000878:	4b70      	ldr	r3, [pc, #448]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 800087a:	2202      	movs	r2, #2
 800087c:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = yellow_time;
 800087e:	4b77      	ldr	r3, [pc, #476]	; (8000a5c <FSM_Traffic_Light_Row+0x2c0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a70      	ldr	r2, [pc, #448]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 8000884:	6013      	str	r3, [r2, #0]
			}
			uart_transmit();
 8000886:	f000 feb5 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 800088a:	2064      	movs	r0, #100	; 0x64
 800088c:	f000 fe0c 	bl	80014a8 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 8000890:	4b6e      	ldr	r3, [pc, #440]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d014      	beq.n	80008c2 <FSM_Traffic_Light_Row+0x126>
			buttonPressed_flag[0] = 0;
 8000898:	4b6c      	ldr	r3, [pc, #432]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 800089e:	4b6c      	ldr	r3, [pc, #432]	; (8000a50 <FSM_Traffic_Light_Row+0x2b4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a6c      	ldr	r2, [pc, #432]	; (8000a54 <FSM_Traffic_Light_Row+0x2b8>)
 80008a4:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 80008a6:	4b65      	ldr	r3, [pc, #404]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 80008a8:	2207      	movs	r2, #7
 80008aa:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 80008ac:	4b6a      	ldr	r3, [pc, #424]	; (8000a58 <FSM_Traffic_Light_Row+0x2bc>)
 80008ae:	2206      	movs	r2, #6
 80008b0:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80008b2:	f000 fe9f 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80008b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ba:	f000 fdf5 	bl	80014a8 <setTimer1>
			resetAllButtonState();
 80008be:	f7ff ff3f 	bl	8000740 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 80008c2:	4b62      	ldr	r3, [pc, #392]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f000 81fc 	beq.w	8000cc4 <FSM_Traffic_Light_Row+0x528>
			buttonPressed_flag[1] = 0;
 80008cc:	4b5f      	ldr	r3, [pc, #380]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 80008d2:	4b5a      	ldr	r3, [pc, #360]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 80008d4:	2203      	movs	r2, #3
 80008d6:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 80008d8:	4b5f      	ldr	r3, [pc, #380]	; (8000a58 <FSM_Traffic_Light_Row+0x2bc>)
 80008da:	2204      	movs	r2, #4
 80008dc:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 80008de:	f7ff ff2f 	bl	8000740 <resetAllButtonState>
		}
		break;
 80008e2:	e1ef      	b.n	8000cc4 <FSM_Traffic_Light_Row+0x528>
	case AUTO_YEL:
		if(timer1Flag == 1){
 80008e4:	4b56      	ldr	r3, [pc, #344]	; (8000a40 <FSM_Traffic_Light_Row+0x2a4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d114      	bne.n	8000916 <FSM_Traffic_Light_Row+0x17a>
			/* Count down time */
			traffic_light_remain_time_row--;
 80008ec:	4b55      	ldr	r3, [pc, #340]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a54      	ldr	r2, [pc, #336]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 80008f4:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 80008f6:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d106      	bne.n	800090c <FSM_Traffic_Light_Row+0x170>
				/* Move to next state*/
				FSM_Traffic_Light_State_Row = AUTO_RED;
 80008fe:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = red_time;
 8000904:	4b52      	ldr	r3, [pc, #328]	; (8000a50 <FSM_Traffic_Light_Row+0x2b4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a4e      	ldr	r2, [pc, #312]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 800090a:	6013      	str	r3, [r2, #0]
			}
			uart_transmit();
 800090c:	f000 fe72 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000910:	2064      	movs	r0, #100	; 0x64
 8000912:	f000 fdc9 	bl	80014a8 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 8000916:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d014      	beq.n	8000948 <FSM_Traffic_Light_Row+0x1ac>
			buttonPressed_flag[0] = 0;
 800091e:	4b4b      	ldr	r3, [pc, #300]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000924:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <FSM_Traffic_Light_Row+0x2b4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <FSM_Traffic_Light_Row+0x2b8>)
 800092a:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 800092c:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 800092e:	2207      	movs	r2, #7
 8000930:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000932:	4b49      	ldr	r3, [pc, #292]	; (8000a58 <FSM_Traffic_Light_Row+0x2bc>)
 8000934:	2206      	movs	r2, #6
 8000936:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000938:	f000 fe5c 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 800093c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000940:	f000 fdb2 	bl	80014a8 <setTimer1>
			resetAllButtonState();
 8000944:	f7ff fefc 	bl	8000740 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 800094a:	785b      	ldrb	r3, [r3, #1]
 800094c:	2b00      	cmp	r3, #0
 800094e:	f000 81bb 	beq.w	8000cc8 <FSM_Traffic_Light_Row+0x52c>
			buttonPressed_flag[1] = 0;
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 8000954:	2200      	movs	r2, #0
 8000956:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 8000958:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 800095a:	2203      	movs	r2, #3
 800095c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 800095e:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <FSM_Traffic_Light_Row+0x2bc>)
 8000960:	2204      	movs	r2, #4
 8000962:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000964:	f7ff feec 	bl	8000740 <resetAllButtonState>
		}
		break;
 8000968:	e1ae      	b.n	8000cc8 <FSM_Traffic_Light_Row+0x52c>

	/* SET MODE */
	case SET_RED:
		if(timer1Flag == 1){
 800096a:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <FSM_Traffic_Light_Row+0x2a4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d10f      	bne.n	8000992 <FSM_Traffic_Light_Row+0x1f6>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000978:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <FSM_Traffic_Light_Row+0x2b4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a31      	ldr	r2, [pc, #196]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 800097e:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000980:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <FSM_Traffic_Light_Row+0x2c4>)
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000986:	f000 fe35 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f000 fd8c 	bl	80014a8 <setTimer1>
			break;
 8000990:	e1a7      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		}
		if(buttonPressed_flag[0]){
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00f      	beq.n	80009ba <FSM_Traffic_Light_Row+0x21e>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = green_time;
 80009a0:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <FSM_Traffic_Light_Row+0x2ac>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a2b      	ldr	r2, [pc, #172]	; (8000a54 <FSM_Traffic_Light_Row+0x2b8>)
 80009a6:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_GREEN;
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80009ae:	f000 fe21 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80009b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b6:	f000 fd77 	bl	80014a8 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 80009bc:	785b      	ldrb	r3, [r3, #1]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00a      	beq.n	80009d8 <FSM_Traffic_Light_Row+0x23c>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	705a      	strb	r2, [r3, #1]
			changeTime();
 80009c8:	f7ff fed4 	bl	8000774 <changeTime>
			uart_transmit();
 80009cc:	f000 fe12 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80009d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d4:	f000 fd68 	bl	80014a8 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 80009da:	789b      	ldrb	r3, [r3, #2]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 8175 	beq.w	8000ccc <FSM_Traffic_Light_Row+0x530>
			/* Save value */
			buttonPressed_flag[2] = 0;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <FSM_Traffic_Light_Row+0x2b0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	709a      	strb	r2, [r3, #2]
			red_time = Set_TL_Time;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <FSM_Traffic_Light_Row+0x2b8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <FSM_Traffic_Light_Row+0x2b4>)
 80009ee:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <FSM_Traffic_Light_Row+0x2b4>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <FSM_Traffic_Light_Row+0x2c0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	441a      	add	r2, r3
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <FSM_Traffic_Light_Row+0x2ac>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	2264      	movs	r2, #100	; 0x64
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <FSM_Traffic_Light_Row+0x2c8>)
 8000a08:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0e:	f000 fd4b 	bl	80014a8 <setTimer1>
		}
		break;
 8000a12:	e15b      	b.n	8000ccc <FSM_Traffic_Light_Row+0x530>
	case SET_GREEN:
		if(timer1Flag == 1){
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <FSM_Traffic_Light_Row+0x2a4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d125      	bne.n	8000a68 <FSM_Traffic_Light_Row+0x2cc>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <FSM_Traffic_Light_Row+0x2a0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <FSM_Traffic_Light_Row+0x2c4>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <FSM_Traffic_Light_Row+0x2b4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <FSM_Traffic_Light_Row+0x2a8>)
 8000a2e:	6013      	str	r3, [r2, #0]
			uart_transmit();
 8000a30:	f000 fde0 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f000 fd37 	bl	80014a8 <setTimer1>
			break;
 8000a3a:	e152      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
 8000a3c:	200000d4 	.word	0x200000d4
 8000a40:	200000e4 	.word	0x200000e4
 8000a44:	20000024 	.word	0x20000024
 8000a48:	2000001c 	.word	0x2000001c
 8000a4c:	200000d0 	.word	0x200000d0
 8000a50:	20000018 	.word	0x20000018
 8000a54:	20000100 	.word	0x20000100
 8000a58:	2000000c 	.word	0x2000000c
 8000a5c:	20000020 	.word	0x20000020
 8000a60:	200000cc 	.word	0x200000cc
 8000a64:	2000002c 	.word	0x2000002c
		}
		if(buttonPressed_flag[0]){
 8000a68:	4b9f      	ldr	r3, [pc, #636]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00f      	beq.n	8000a90 <FSM_Traffic_Light_Row+0x2f4>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 8000a70:	4b9d      	ldr	r3, [pc, #628]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = yellow_time;
 8000a76:	4b9d      	ldr	r3, [pc, #628]	; (8000cec <FSM_Traffic_Light_Row+0x550>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a9d      	ldr	r2, [pc, #628]	; (8000cf0 <FSM_Traffic_Light_Row+0x554>)
 8000a7c:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_YEL;
 8000a7e:	4b9d      	ldr	r3, [pc, #628]	; (8000cf4 <FSM_Traffic_Light_Row+0x558>)
 8000a80:	2209      	movs	r2, #9
 8000a82:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000a84:	f000 fdb6 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8c:	f000 fd0c 	bl	80014a8 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 8000a90:	4b95      	ldr	r3, [pc, #596]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00a      	beq.n	8000aae <FSM_Traffic_Light_Row+0x312>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 8000a98:	4b93      	ldr	r3, [pc, #588]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	705a      	strb	r2, [r3, #1]
			changeTime();
 8000a9e:	f7ff fe69 	bl	8000774 <changeTime>
			uart_transmit();
 8000aa2:	f000 fda7 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aaa:	f000 fcfd 	bl	80014a8 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000aae:	4b8e      	ldr	r3, [pc, #568]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000ab0:	789b      	ldrb	r3, [r3, #2]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 810c 	beq.w	8000cd0 <FSM_Traffic_Light_Row+0x534>
			/* Save value if button 2 is pressed*/
			buttonPressed_flag[2] = 0;
 8000ab8:	4b8b      	ldr	r3, [pc, #556]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	709a      	strb	r2, [r3, #2]
			green_time = Set_TL_Time;
 8000abe:	4b8c      	ldr	r3, [pc, #560]	; (8000cf0 <FSM_Traffic_Light_Row+0x554>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a8d      	ldr	r2, [pc, #564]	; (8000cf8 <FSM_Traffic_Light_Row+0x55c>)
 8000ac4:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000ac6:	4b8d      	ldr	r3, [pc, #564]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4b88      	ldr	r3, [pc, #544]	; (8000cec <FSM_Traffic_Light_Row+0x550>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	441a      	add	r2, r3
 8000ad0:	4b89      	ldr	r3, [pc, #548]	; (8000cf8 <FSM_Traffic_Light_Row+0x55c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	2264      	movs	r2, #100	; 0x64
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	4a88      	ldr	r2, [pc, #544]	; (8000d00 <FSM_Traffic_Light_Row+0x564>)
 8000ade:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae4:	f000 fce0 	bl	80014a8 <setTimer1>
		}
		break;
 8000ae8:	e0f2      	b.n	8000cd0 <FSM_Traffic_Light_Row+0x534>
	case SET_YEL:
		if(timer1Flag == 1){
 8000aea:	4b86      	ldr	r3, [pc, #536]	; (8000d04 <FSM_Traffic_Light_Row+0x568>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10f      	bne.n	8000b12 <FSM_Traffic_Light_Row+0x376>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000af2:	4b80      	ldr	r3, [pc, #512]	; (8000cf4 <FSM_Traffic_Light_Row+0x558>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 8000af8:	4b83      	ldr	r3, [pc, #524]	; (8000d08 <FSM_Traffic_Light_Row+0x56c>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000afe:	4b7f      	ldr	r3, [pc, #508]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a82      	ldr	r2, [pc, #520]	; (8000d0c <FSM_Traffic_Light_Row+0x570>)
 8000b04:	6013      	str	r3, [r2, #0]
			uart_transmit();
 8000b06:	f000 fd75 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000b0a:	2064      	movs	r0, #100	; 0x64
 8000b0c:	f000 fccc 	bl	80014a8 <setTimer1>
			break;
 8000b10:	e0e7      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		}
		if(buttonPressed_flag[0]){
 8000b12:	4b75      	ldr	r3, [pc, #468]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d015      	beq.n	8000b46 <FSM_Traffic_Light_Row+0x3aa>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 8000b1a:	4b73      	ldr	r3, [pc, #460]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000b20:	4b76      	ldr	r3, [pc, #472]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a72      	ldr	r2, [pc, #456]	; (8000cf0 <FSM_Traffic_Light_Row+0x554>)
 8000b26:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000b28:	4b74      	ldr	r3, [pc, #464]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a77      	ldr	r2, [pc, #476]	; (8000d0c <FSM_Traffic_Light_Row+0x570>)
 8000b2e:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000b30:	4b75      	ldr	r3, [pc, #468]	; (8000d08 <FSM_Traffic_Light_Row+0x56c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000b36:	4b6f      	ldr	r3, [pc, #444]	; (8000cf4 <FSM_Traffic_Light_Row+0x558>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000b3c:	f000 fd5a 	bl	80015f4 <uart_transmit>

			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000b40:	2064      	movs	r0, #100	; 0x64
 8000b42:	f000 fcb1 	bl	80014a8 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 8000b46:	4b68      	ldr	r3, [pc, #416]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000b48:	785b      	ldrb	r3, [r3, #1]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00a      	beq.n	8000b64 <FSM_Traffic_Light_Row+0x3c8>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 8000b4e:	4b66      	ldr	r3, [pc, #408]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	705a      	strb	r2, [r3, #1]
			changeTime();
 8000b54:	f7ff fe0e 	bl	8000774 <changeTime>
			uart_transmit();
 8000b58:	f000 fd4c 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b60:	f000 fca2 	bl	80014a8 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000b64:	4b60      	ldr	r3, [pc, #384]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000b66:	789b      	ldrb	r3, [r3, #2]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 80b3 	beq.w	8000cd4 <FSM_Traffic_Light_Row+0x538>
			/* Save value if button 2 is pressed */
			buttonPressed_flag[2] = 0;
 8000b6e:	4b5e      	ldr	r3, [pc, #376]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	709a      	strb	r2, [r3, #2]
			yellow_time = Set_TL_Time;
 8000b74:	4b5e      	ldr	r3, [pc, #376]	; (8000cf0 <FSM_Traffic_Light_Row+0x554>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a5c      	ldr	r2, [pc, #368]	; (8000cec <FSM_Traffic_Light_Row+0x550>)
 8000b7a:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000b7c:	4b5f      	ldr	r3, [pc, #380]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <FSM_Traffic_Light_Row+0x550>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	441a      	add	r2, r3
 8000b86:	4b5c      	ldr	r3, [pc, #368]	; (8000cf8 <FSM_Traffic_Light_Row+0x55c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	2264      	movs	r2, #100	; 0x64
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	4a5b      	ldr	r2, [pc, #364]	; (8000d00 <FSM_Traffic_Light_Row+0x564>)
 8000b94:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9a:	f000 fc85 	bl	80014a8 <setTimer1>
		}
		break;
 8000b9e:	e099      	b.n	8000cd4 <FSM_Traffic_Light_Row+0x538>

	/* MANUAL MODE */
	case MANUAL_RED:
		if(buttonPressed_flag[1]){
 8000ba0:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00c      	beq.n	8000bc2 <FSM_Traffic_Light_Row+0x426>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000ba8:	f000 fd24 	bl	80015f4 <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000bac:	4b4e      	ldr	r3, [pc, #312]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_GREEN;
 8000bb2:	4b50      	ldr	r3, [pc, #320]	; (8000cf4 <FSM_Traffic_Light_Row+0x558>)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_RED;
 8000bb8:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <FSM_Traffic_Light_Row+0x574>)
 8000bba:	2203      	movs	r2, #3
 8000bbc:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000bbe:	f7ff fdbf 	bl	8000740 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000bc2:	4b49      	ldr	r3, [pc, #292]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8086 	beq.w	8000cd8 <FSM_Traffic_Light_Row+0x53c>
			/* Back to AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000bcc:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000bd2:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a46      	ldr	r2, [pc, #280]	; (8000cf0 <FSM_Traffic_Light_Row+0x554>)
 8000bd8:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000bda:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a4b      	ldr	r2, [pc, #300]	; (8000d0c <FSM_Traffic_Light_Row+0x570>)
 8000be0:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000be2:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <FSM_Traffic_Light_Row+0x56c>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000be8:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <FSM_Traffic_Light_Row+0x558>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000bee:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <FSM_Traffic_Light_Row+0x574>)
 8000bf0:	2206      	movs	r2, #6
 8000bf2:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000bf4:	f000 fcfe 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f000 fc55 	bl	80014a8 <setTimer1>
		}
		break;
 8000bfe:	e06b      	b.n	8000cd8 <FSM_Traffic_Light_Row+0x53c>
	case MANUAL_GREEN:
		if(buttonPressed_flag[1]){
 8000c00:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00c      	beq.n	8000c22 <FSM_Traffic_Light_Row+0x486>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000c08:	f000 fcf4 	bl	80015f4 <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_YEL;
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <FSM_Traffic_Light_Row+0x558>)
 8000c14:	2205      	movs	r2, #5
 8000c16:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_YEL;
 8000c18:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <FSM_Traffic_Light_Row+0x574>)
 8000c1a:	2205      	movs	r2, #5
 8000c1c:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000c1e:	f7ff fd8f 	bl	8000740 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d058      	beq.n	8000cdc <FSM_Traffic_Light_Row+0x540>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000c30:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a2e      	ldr	r2, [pc, #184]	; (8000cf0 <FSM_Traffic_Light_Row+0x554>)
 8000c36:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a33      	ldr	r2, [pc, #204]	; (8000d0c <FSM_Traffic_Light_Row+0x570>)
 8000c3e:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000c40:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <FSM_Traffic_Light_Row+0x56c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <FSM_Traffic_Light_Row+0x558>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <FSM_Traffic_Light_Row+0x574>)
 8000c4e:	2206      	movs	r2, #6
 8000c50:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000c52:	f000 fccf 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000c56:	2064      	movs	r0, #100	; 0x64
 8000c58:	f000 fc26 	bl	80014a8 <setTimer1>
		}
		break;
 8000c5c:	e03e      	b.n	8000cdc <FSM_Traffic_Light_Row+0x540>
	case MANUAL_YEL:
		if(buttonPressed_flag[1]){
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00c      	beq.n	8000c80 <FSM_Traffic_Light_Row+0x4e4>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000c66:	f000 fcc5 	bl	80015f4 <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <FSM_Traffic_Light_Row+0x558>)
 8000c72:	2203      	movs	r2, #3
 8000c74:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <FSM_Traffic_Light_Row+0x574>)
 8000c78:	2204      	movs	r2, #4
 8000c7a:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000c7c:	f7ff fd60 	bl	8000740 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d02b      	beq.n	8000ce0 <FSM_Traffic_Light_Row+0x544>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <FSM_Traffic_Light_Row+0x54c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <FSM_Traffic_Light_Row+0x554>)
 8000c94:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <FSM_Traffic_Light_Row+0x560>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <FSM_Traffic_Light_Row+0x570>)
 8000c9c:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <FSM_Traffic_Light_Row+0x56c>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <FSM_Traffic_Light_Row+0x558>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <FSM_Traffic_Light_Row+0x574>)
 8000cac:	2206      	movs	r2, #6
 8000cae:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000cb0:	f000 fca0 	bl	80015f4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f000 fbf7 	bl	80014a8 <setTimer1>
		}
		break;
 8000cba:	e011      	b.n	8000ce0 <FSM_Traffic_Light_Row+0x544>
	default:
		break;
 8000cbc:	bf00      	nop
 8000cbe:	e010      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		break;
 8000cc0:	bf00      	nop
 8000cc2:	e00e      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		break;
 8000cc4:	bf00      	nop
 8000cc6:	e00c      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		break;
 8000cc8:	bf00      	nop
 8000cca:	e00a      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		break;
 8000ccc:	bf00      	nop
 8000cce:	e008      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		break;
 8000cd0:	bf00      	nop
 8000cd2:	e006      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		break;
 8000cd4:	bf00      	nop
 8000cd6:	e004      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		break;
 8000cd8:	bf00      	nop
 8000cda:	e002      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		break;
 8000cdc:	bf00      	nop
 8000cde:	e000      	b.n	8000ce2 <FSM_Traffic_Light_Row+0x546>
		break;
 8000ce0:	bf00      	nop
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000d0 	.word	0x200000d0
 8000cec:	20000020 	.word	0x20000020
 8000cf0:	20000100 	.word	0x20000100
 8000cf4:	200000d4 	.word	0x200000d4
 8000cf8:	2000001c 	.word	0x2000001c
 8000cfc:	20000018 	.word	0x20000018
 8000d00:	2000002c 	.word	0x2000002c
 8000d04:	200000e4 	.word	0x200000e4
 8000d08:	200000cc 	.word	0x200000cc
 8000d0c:	20000024 	.word	0x20000024
 8000d10:	2000000c 	.word	0x2000000c

08000d14 <FSM_Traffic_Light_Col>:

void FSM_Traffic_Light_Col(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Col) {
 8000d18:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <FSM_Traffic_Light_Col+0xfc>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b06      	cmp	r3, #6
 8000d1e:	d86b      	bhi.n	8000df8 <FSM_Traffic_Light_Col+0xe4>
 8000d20:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <FSM_Traffic_Light_Col+0x14>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d45 	.word	0x08000d45
 8000d2c:	08000d75 	.word	0x08000d75
 8000d30:	08000da5 	.word	0x08000da5
 8000d34:	08000df9 	.word	0x08000df9
 8000d38:	08000df9 	.word	0x08000df9
 8000d3c:	08000df9 	.word	0x08000df9
 8000d40:	08000dd5 	.word	0x08000dd5
	/* The first three states are similar to ROW */
	case AUTO_RED:
		if(timer2Flag == 1){
 8000d44:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <FSM_Traffic_Light_Col+0x100>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d157      	bne.n	8000dfc <FSM_Traffic_Light_Col+0xe8>
			traffic_light_remain_time_col--;
 8000d4c:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	4a31      	ldr	r2, [pc, #196]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000d54:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000d56:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d106      	bne.n	8000d6c <FSM_Traffic_Light_Col+0x58>
				FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <FSM_Traffic_Light_Col+0xfc>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = green_time;
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <FSM_Traffic_Light_Col+0x108>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a2b      	ldr	r2, [pc, #172]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000d6a:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000d6c:	2064      	movs	r0, #100	; 0x64
 8000d6e:	f000 fbaf 	bl	80014d0 <setTimer2>
		}
		break;
 8000d72:	e043      	b.n	8000dfc <FSM_Traffic_Light_Col+0xe8>
	case AUTO_GREEN:
		if(timer2Flag == 1){
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <FSM_Traffic_Light_Col+0x100>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d141      	bne.n	8000e00 <FSM_Traffic_Light_Col+0xec>
			traffic_light_remain_time_col--;
 8000d7c:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	4a25      	ldr	r2, [pc, #148]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000d84:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d106      	bne.n	8000d9c <FSM_Traffic_Light_Col+0x88>
				FSM_Traffic_Light_State_Col = AUTO_YEL;
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <FSM_Traffic_Light_Col+0xfc>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = yellow_time;
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <FSM_Traffic_Light_Col+0x10c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000d9a:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f000 fb97 	bl	80014d0 <setTimer2>
		}
		break;
 8000da2:	e02d      	b.n	8000e00 <FSM_Traffic_Light_Col+0xec>
	case AUTO_YEL:
		if(timer2Flag == 1){
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <FSM_Traffic_Light_Col+0x100>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d12b      	bne.n	8000e04 <FSM_Traffic_Light_Col+0xf0>
			traffic_light_remain_time_col--;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000db4:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d106      	bne.n	8000dcc <FSM_Traffic_Light_Col+0xb8>
				FSM_Traffic_Light_State_Col = AUTO_RED;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <FSM_Traffic_Light_Col+0xfc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = red_time;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <FSM_Traffic_Light_Col+0x110>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000dca:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000dcc:	2064      	movs	r0, #100	; 0x64
 8000dce:	f000 fb7f 	bl	80014d0 <setTimer2>
		}
		break;
 8000dd2:	e017      	b.n	8000e04 <FSM_Traffic_Light_Col+0xf0>
	case BLACK_HOLE:
		/* This is trap state to force Col stop */
		if(To_Default_State == 1){
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <FSM_Traffic_Light_Col+0x114>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d115      	bne.n	8000e08 <FSM_Traffic_Light_Col+0xf4>
			To_Default_State = 0;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <FSM_Traffic_Light_Col+0x114>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <FSM_Traffic_Light_Col+0xfc>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_col = green_time;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <FSM_Traffic_Light_Col+0x108>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <FSM_Traffic_Light_Col+0x104>)
 8000dee:	6013      	str	r3, [r2, #0]
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000df0:	2064      	movs	r0, #100	; 0x64
 8000df2:	f000 fb6d 	bl	80014d0 <setTimer2>
		}
		break;
 8000df6:	e007      	b.n	8000e08 <FSM_Traffic_Light_Col+0xf4>
	default:
		break;
 8000df8:	bf00      	nop
 8000dfa:	e006      	b.n	8000e0a <FSM_Traffic_Light_Col+0xf6>
		break;
 8000dfc:	bf00      	nop
 8000dfe:	e004      	b.n	8000e0a <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e00:	bf00      	nop
 8000e02:	e002      	b.n	8000e0a <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e04:	bf00      	nop
 8000e06:	e000      	b.n	8000e0a <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e08:	bf00      	nop
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	200000ec 	.word	0x200000ec
 8000e18:	20000028 	.word	0x20000028
 8000e1c:	2000001c 	.word	0x2000001c
 8000e20:	20000020 	.word	0x20000020
 8000e24:	20000018 	.word	0x20000018
 8000e28:	200000cc 	.word	0x200000cc

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f000 fc6c 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 f824 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e38:	f000 f950 	bl	80010dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e3c:	f000 f862 	bl	8000f04 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e40:	f000 f922 	bl	8001088 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e44:	f000 f8aa 	bl	8000f9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <main+0x4c>)
 8000e4a:	f001 fc9d 	bl	8002788 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	480a      	ldr	r0, [pc, #40]	; (8000e7c <main+0x50>)
 8000e52:	f001 fd43 	bl	80028dc <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8000e56:	2064      	movs	r0, #100	; 0x64
 8000e58:	f000 fb26 	bl	80014a8 <setTimer1>
  setTimer2(100);
 8000e5c:	2064      	movs	r0, #100	; 0x64
 8000e5e:	f000 fb37 	bl	80014d0 <setTimer2>
  while (1)
  {
	  FSM_Traffic_Light_Row();
 8000e62:	f7ff fc9b 	bl	800079c <FSM_Traffic_Light_Row>
	  FSM_Traffic_Light_Col();
 8000e66:	f7ff ff55 	bl	8000d14 <FSM_Traffic_Light_Col>
	  FSM_Pedestrian();
 8000e6a:	f7ff fbdd 	bl	8000628 <FSM_Pedestrian>
	  display_traffic_light();
 8000e6e:	f7ff fac7 	bl	8000400 <display_traffic_light>
	  FSM_Buzzer();
 8000e72:	f7ff fa33 	bl	80002dc <FSM_Buzzer>
	  FSM_Traffic_Light_Row();
 8000e76:	e7f4      	b.n	8000e62 <main+0x36>
 8000e78:	2000015c 	.word	0x2000015c
 8000e7c:	20000114 	.word	0x20000114

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b090      	sub	sp, #64	; 0x40
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	2228      	movs	r2, #40	; 0x28
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 f88a 	bl	8003fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eb6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fff7 	bl	8001eb4 <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ecc:	f000 f980 	bl	80011d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fa62 	bl	80023b4 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ef6:	f000 f96b 	bl	80011d0 <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3740      	adds	r7, #64	; 0x40
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f38:	223f      	movs	r2, #63	; 0x3f
 8000f3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f4a:	f001 fbcd 	bl	80026e8 <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f54:	f000 f93c 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f66:	f001 ff21 	bl	8002dac <HAL_TIM_ConfigClockSource>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f70:	f000 f92e 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM2_Init+0x94>)
 8000f82:	f002 fa9f 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f000 f920 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000015c 	.word	0x2000015c

08000f9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <MX_TIM3_Init+0xe4>)
 8000fce:	4a2d      	ldr	r2, [pc, #180]	; (8001084 <MX_TIM3_Init+0xe8>)
 8000fd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <MX_TIM3_Init+0xe4>)
 8000fd4:	223f      	movs	r2, #63	; 0x3f
 8000fd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <MX_TIM3_Init+0xe4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <MX_TIM3_Init+0xe4>)
 8000fe0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <MX_TIM3_Init+0xe4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <MX_TIM3_Init+0xe4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ff2:	4823      	ldr	r0, [pc, #140]	; (8001080 <MX_TIM3_Init+0xe4>)
 8000ff4:	f001 fb78 	bl	80026e8 <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ffe:	f000 f8e7 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100c:	4619      	mov	r1, r3
 800100e:	481c      	ldr	r0, [pc, #112]	; (8001080 <MX_TIM3_Init+0xe4>)
 8001010:	f001 fecc 	bl	8002dac <HAL_TIM_ConfigClockSource>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800101a:	f000 f8d9 	bl	80011d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800101e:	4818      	ldr	r0, [pc, #96]	; (8001080 <MX_TIM3_Init+0xe4>)
 8001020:	f001 fc04 	bl	800282c <HAL_TIM_PWM_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800102a:	f000 f8d1 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	4619      	mov	r1, r3
 800103c:	4810      	ldr	r0, [pc, #64]	; (8001080 <MX_TIM3_Init+0xe4>)
 800103e:	f002 fa41 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001048:	f000 f8c2 	bl	80011d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104c:	2360      	movs	r3, #96	; 0x60
 800104e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 199;
 8001050:	23c7      	movs	r3, #199	; 0xc7
 8001052:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	4807      	ldr	r0, [pc, #28]	; (8001080 <MX_TIM3_Init+0xe4>)
 8001064:	f001 fde4 	bl	8002c30 <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800106e:	f000 f8af 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <MX_TIM3_Init+0xe4>)
 8001074:	f000 f91c 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8001078:	bf00      	nop
 800107a:	3738      	adds	r7, #56	; 0x38
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000114 	.word	0x20000114
 8001084:	40000400 	.word	0x40000400

08001088 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_USART2_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 8001094:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f002 fa70 	bl	80035a4 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ca:	f000 f881 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200001a4 	.word	0x200001a4
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <MX_GPIO_Init+0xd0>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a2d      	ldr	r2, [pc, #180]	; (80011ac <MX_GPIO_Init+0xd0>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <MX_GPIO_Init+0xd0>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <MX_GPIO_Init+0xd0>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <MX_GPIO_Init+0xd0>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <MX_GPIO_Init+0xd0>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <MX_GPIO_Init+0xd4>)
 8001128:	f000 feab 	bl	8001e82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001132:	4820      	ldr	r0, [pc, #128]	; (80011b4 <MX_GPIO_Init+0xd8>)
 8001134:	f000 fea5 	bl	8001e82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDE_Pin BUTTON_MOD_Pin BUTTON_IC_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDE_Pin|BUTTON_MOD_Pin|BUTTON_IC_Pin;
 8001138:	2313      	movs	r3, #19
 800113a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001140:	2301      	movs	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	4619      	mov	r1, r3
 800114a:	481a      	ldr	r0, [pc, #104]	; (80011b4 <MX_GPIO_Init+0xd8>)
 800114c:	f000 fcfe 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_SET_Pin;
 8001150:	2301      	movs	r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	2301      	movs	r3, #1
 800115a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_SET_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4619      	mov	r1, r3
 8001162:	4813      	ldr	r0, [pc, #76]	; (80011b0 <MX_GPIO_Init+0xd4>)
 8001164:	f000 fcf2 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL1_Pin TL1_SIGNAL2_Pin TL2_SIGNAL2_Pin TL2_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin;
 8001168:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800116c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2302      	movs	r3, #2
 8001178:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_GPIO_Init+0xd4>)
 8001182:	f000 fce3 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL2_Pin TL1_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin;
 8001186:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800118a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_GPIO_Init+0xd8>)
 80011a0:	f000 fcd4 	bl	8001b4c <HAL_GPIO_Init>

}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40010800 	.word	0x40010800

080011b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	timerRun();
 80011c0:	f000 f9c2 	bl	8001548 <timerRun>
	button_reading();
 80011c4:	f7fe ffc2 	bl	800014c <button_reading>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_MspInit+0x5c>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_MspInit+0x5c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_MspInit+0x5c>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_MspInit+0x5c>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_MspInit+0x5c>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_MspInit+0x5c>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_MspInit+0x60>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_MspInit+0x60>)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000

08001240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001250:	d114      	bne.n	800127c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	201c      	movs	r0, #28
 8001270:	f000 fb85 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001274:	201c      	movs	r0, #28
 8001276:	f000 fb9e 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800127a:	e010      	b.n	800129e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_TIM_Base_MspInit+0x6c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10b      	bne.n	800129e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40000400 	.word	0x40000400

080012b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_TIM_MspPostInit+0x58>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d117      	bne.n	8001300 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_TIM_MspPostInit+0x5c>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_TIM_MspPostInit+0x5c>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_TIM_MspPostInit+0x5c>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <HAL_TIM_MspPostInit+0x60>)
 80012fc:	f000 fc26 	bl	8001b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40000400 	.word	0x40000400
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_UART_MspInit+0x98>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d137      	bne.n	80013a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133e:	61d3      	str	r3, [r2, #28]
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001364:	2304      	movs	r3, #4
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	480f      	ldr	r0, [pc, #60]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001378:	f000 fbe8 	bl	8001b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800137c:	2308      	movs	r3, #8
 800137e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4619      	mov	r1, r3
 800138e:	4809      	ldr	r0, [pc, #36]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001390:	f000 fbdc 	bl	8001b4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2026      	movs	r0, #38	; 0x26
 800139a:	f000 faf0 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800139e:	2026      	movs	r0, #38	; 0x26
 80013a0:	f000 fb09 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010800 	.word	0x40010800

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fe:	f000 f9cb 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM2_IRQHandler+0x10>)
 800140e:	f001 fb07 	bl	8002a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000015c 	.word	0x2000015c

0800141c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <USART2_IRQHandler+0x10>)
 8001422:	f002 f99f 	bl	8003764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001a4 	.word	0x200001a4

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f002 fd78 	bl	8003f54 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20005000 	.word	0x20005000
 8001490:	00000400 	.word	0x00000400
 8001494:	20000104 	.word	0x20000104
 8001498:	20000220 	.word	0x20000220

0800149c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <setTimer1>:
 */


#include "timer.h"

void setTimer1(int duration){             // first trafic light
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	timer1Counter = duration/TICK;
 80014b0:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <setTimer1+0x20>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
	timer1Flag = 0;
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <setTimer1+0x24>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200000e0 	.word	0x200000e0
 80014cc:	200000e4 	.word	0x200000e4

080014d0 <setTimer2>:
void setTimer2(int duration){            // second traffc light
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	timer2Counter = duration/TICK;
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <setTimer2+0x20>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
	timer2Flag = 0;
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <setTimer2+0x24>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200000e8 	.word	0x200000e8
 80014f4:	200000ec 	.word	0x200000ec

080014f8 <setTimer3>:
void setTimer3(int duration){            // timer for pedestrian light
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	timer3Counter = duration/TICK;
 8001500:	4a05      	ldr	r2, [pc, #20]	; (8001518 <setTimer3+0x20>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
	timer3Flag = 0;
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <setTimer3+0x24>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200000f0 	.word	0x200000f0
 800151c:	200000f4 	.word	0x200000f4

08001520 <setTimer4>:
void setTimer4(int duration){            // buzzer timer
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	timer4Counter = duration/TICK;
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <setTimer4+0x20>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
	timer4Flag = 0;
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <setTimer4+0x24>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200000f8 	.word	0x200000f8
 8001544:	200000fc 	.word	0x200000fc

08001548 <timerRun>:
void setTimer5(int duration){            // extra timer
    timer5Counter = duration/TICK;
    timer5Flag = 0;
}
// Run all timer
void timerRun(){
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
	if(timer1Counter > 0){
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <timerRun+0x8c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	dd0b      	ble.n	800156c <timerRun+0x24>
		timer1Counter--;
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <timerRun+0x8c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <timerRun+0x8c>)
 800155c:	6013      	str	r3, [r2, #0]
		if(timer1Counter <= 0){
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <timerRun+0x8c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	dc02      	bgt.n	800156c <timerRun+0x24>
			timer1Flag = 1;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <timerRun+0x90>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2Counter > 0){
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <timerRun+0x94>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dd0b      	ble.n	800158c <timerRun+0x44>
		timer2Counter--;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <timerRun+0x94>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <timerRun+0x94>)
 800157c:	6013      	str	r3, [r2, #0]
		if(timer2Counter <= 0){
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <timerRun+0x94>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	dc02      	bgt.n	800158c <timerRun+0x44>
			timer2Flag = 1;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <timerRun+0x98>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3Counter > 0){
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <timerRun+0x9c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	dd0b      	ble.n	80015ac <timerRun+0x64>
		timer3Counter--;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <timerRun+0x9c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3b01      	subs	r3, #1
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <timerRun+0x9c>)
 800159c:	6013      	str	r3, [r2, #0]
		if(timer3Counter <= 0){
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <timerRun+0x9c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	dc02      	bgt.n	80015ac <timerRun+0x64>
			timer3Flag = 1;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <timerRun+0xa0>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4Counter > 0){
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <timerRun+0xa4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	dd0b      	ble.n	80015cc <timerRun+0x84>
		timer4Counter--;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <timerRun+0xa4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <timerRun+0xa4>)
 80015bc:	6013      	str	r3, [r2, #0]
		if(timer4Counter <= 0){
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <timerRun+0xa4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dc02      	bgt.n	80015cc <timerRun+0x84>
			timer4Flag = 1;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <timerRun+0xa8>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
		}
	}
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	200000e0 	.word	0x200000e0
 80015d8:	200000e4 	.word	0x200000e4
 80015dc:	200000e8 	.word	0x200000e8
 80015e0:	200000ec 	.word	0x200000ec
 80015e4:	200000f0 	.word	0x200000f0
 80015e8:	200000f4 	.word	0x200000f4
 80015ec:	200000f8 	.word	0x200000f8
 80015f0:	200000fc 	.word	0x200000fc

080015f4 <uart_transmit>:
 *      Author: Minh Duc Quach
 */

#include "uart.h"

void uart_transmit(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	switch(FSM_Traffic_Light_State_Row){
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <uart_transmit+0xb0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	dc02      	bgt.n	8001606 <uart_transmit+0x12>
 8001600:	2b00      	cmp	r3, #0
 8001602:	da04      	bge.n	800160e <uart_transmit+0x1a>
		case SET_YEL:
			if (Set_TL_Time < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", Set_TL_Time), 1000);
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", Set_TL_Time), 1000);
			break;
		default:
			break;
 8001604:	e04b      	b.n	800169e <uart_transmit+0xaa>
 8001606:	3b07      	subs	r3, #7
	switch(FSM_Traffic_Light_State_Row){
 8001608:	2b02      	cmp	r3, #2
 800160a:	d848      	bhi.n	800169e <uart_transmit+0xaa>
 800160c:	e023      	b.n	8001656 <uart_transmit+0x62>
			if (traffic_light_remain_time_row < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", traffic_light_remain_time_row), 1000);
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <uart_transmit+0xb4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b09      	cmp	r3, #9
 8001614:	dc0f      	bgt.n	8001636 <uart_transmit+0x42>
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <uart_transmit+0xb4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4923      	ldr	r1, [pc, #140]	; (80016ac <uart_transmit+0xb8>)
 800161e:	4824      	ldr	r0, [pc, #144]	; (80016b0 <uart_transmit+0xbc>)
 8001620:	f002 fcca 	bl	8003fb8 <siprintf>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162c:	4920      	ldr	r1, [pc, #128]	; (80016b0 <uart_transmit+0xbc>)
 800162e:	4821      	ldr	r0, [pc, #132]	; (80016b4 <uart_transmit+0xc0>)
 8001630:	f002 f805 	bl	800363e <HAL_UART_Transmit>
			break;
 8001634:	e034      	b.n	80016a0 <uart_transmit+0xac>
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", traffic_light_remain_time_row), 1000);
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <uart_transmit+0xb4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	491e      	ldr	r1, [pc, #120]	; (80016b8 <uart_transmit+0xc4>)
 800163e:	481c      	ldr	r0, [pc, #112]	; (80016b0 <uart_transmit+0xbc>)
 8001640:	f002 fcba 	bl	8003fb8 <siprintf>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164c:	4918      	ldr	r1, [pc, #96]	; (80016b0 <uart_transmit+0xbc>)
 800164e:	4819      	ldr	r0, [pc, #100]	; (80016b4 <uart_transmit+0xc0>)
 8001650:	f001 fff5 	bl	800363e <HAL_UART_Transmit>
			break;
 8001654:	e024      	b.n	80016a0 <uart_transmit+0xac>
			if (Set_TL_Time < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", Set_TL_Time), 1000);
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <uart_transmit+0xc8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b09      	cmp	r3, #9
 800165c:	dc0f      	bgt.n	800167e <uart_transmit+0x8a>
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <uart_transmit+0xc8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4911      	ldr	r1, [pc, #68]	; (80016ac <uart_transmit+0xb8>)
 8001666:	4812      	ldr	r0, [pc, #72]	; (80016b0 <uart_transmit+0xbc>)
 8001668:	f002 fca6 	bl	8003fb8 <siprintf>
 800166c:	4603      	mov	r3, r0
 800166e:	b29a      	uxth	r2, r3
 8001670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001674:	490e      	ldr	r1, [pc, #56]	; (80016b0 <uart_transmit+0xbc>)
 8001676:	480f      	ldr	r0, [pc, #60]	; (80016b4 <uart_transmit+0xc0>)
 8001678:	f001 ffe1 	bl	800363e <HAL_UART_Transmit>
			break;
 800167c:	e010      	b.n	80016a0 <uart_transmit+0xac>
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", Set_TL_Time), 1000);
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <uart_transmit+0xc8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <uart_transmit+0xc4>)
 8001686:	480a      	ldr	r0, [pc, #40]	; (80016b0 <uart_transmit+0xbc>)
 8001688:	f002 fc96 	bl	8003fb8 <siprintf>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001694:	4906      	ldr	r1, [pc, #24]	; (80016b0 <uart_transmit+0xbc>)
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <uart_transmit+0xc0>)
 8001698:	f001 ffd1 	bl	800363e <HAL_UART_Transmit>
			break;
 800169c:	e000      	b.n	80016a0 <uart_transmit+0xac>
			break;
 800169e:	bf00      	nop
	}
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200000d4 	.word	0x200000d4
 80016a8:	20000024 	.word	0x20000024
 80016ac:	08004844 	.word	0x08004844
 80016b0:	200001ec 	.word	0x200001ec
 80016b4:	200001a4 	.word	0x200001a4
 80016b8:	08004850 	.word	0x08004850
 80016bc:	20000100 	.word	0x20000100

080016c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016c2:	490d      	ldr	r1, [pc, #52]	; (80016f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d8:	4c0a      	ldr	r4, [pc, #40]	; (8001704 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016e6:	f7ff fed9 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f002 fc39 	bl	8003f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ee:	f7ff fb9d 	bl	8000e2c <main>
  bx lr
 80016f2:	4770      	bx	lr
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80016fc:	080048c0 	.word	0x080048c0
  ldr r2, =_sbss
 8001700:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001704:	20000220 	.word	0x20000220

08001708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC1_2_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_Init+0x28>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_Init+0x28>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171c:	2003      	movs	r0, #3
 800171e:	f000 f923 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001722:	200f      	movs	r0, #15
 8001724:	f000 f808 	bl	8001738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001728:	f7ff fd58 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40022000 	.word	0x40022000

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x54>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x58>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f93b 	bl	80019d2 <HAL_SYSTICK_Config>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e00e      	b.n	8001784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d80a      	bhi.n	8001782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f000 f903 	bl	800197e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001778:	4a06      	ldr	r2, [pc, #24]	; (8001794 <HAL_InitTick+0x5c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000030 	.word	0x20000030
 8001790:	20000038 	.word	0x20000038
 8001794:	20000034 	.word	0x20000034

08001798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_IncTick+0x1c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_IncTick+0x20>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a03      	ldr	r2, [pc, #12]	; (80017b8 <HAL_IncTick+0x20>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20000038 	.word	0x20000038
 80017b8:	2000020c 	.word	0x2000020c

080017bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b02      	ldr	r3, [pc, #8]	; (80017cc <HAL_GetTick+0x10>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	2000020c 	.word	0x2000020c

080017d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db0b      	blt.n	800185e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	4906      	ldr	r1, [pc, #24]	; (8001868 <__NVIC_EnableIRQ+0x34>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f7ff ff90 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff2d 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff42 	bl	8001818 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff90 	bl	80018c0 <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5f 	bl	800186c <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff35 	bl	8001834 <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffa2 	bl	8001924 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d008      	beq.n	8001a12 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2204      	movs	r2, #4
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e020      	b.n	8001a54 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 020e 	bic.w	r2, r2, #14
 8001a20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0201 	bic.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d005      	beq.n	8001a82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2204      	movs	r2, #4
 8001a7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e051      	b.n	8001b26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 020e 	bic.w	r2, r2, #14
 8001a90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a22      	ldr	r2, [pc, #136]	; (8001b30 <HAL_DMA_Abort_IT+0xd0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d029      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xa0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <HAL_DMA_Abort_IT+0xd4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d022      	beq.n	8001afc <HAL_DMA_Abort_IT+0x9c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <HAL_DMA_Abort_IT+0xd8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d01a      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x96>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_DMA_Abort_IT+0xdc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d012      	beq.n	8001af0 <HAL_DMA_Abort_IT+0x90>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <HAL_DMA_Abort_IT+0xe0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00a      	beq.n	8001aea <HAL_DMA_Abort_IT+0x8a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1a      	ldr	r2, [pc, #104]	; (8001b44 <HAL_DMA_Abort_IT+0xe4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d102      	bne.n	8001ae4 <HAL_DMA_Abort_IT+0x84>
 8001ade:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ae2:	e00e      	b.n	8001b02 <HAL_DMA_Abort_IT+0xa2>
 8001ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ae8:	e00b      	b.n	8001b02 <HAL_DMA_Abort_IT+0xa2>
 8001aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aee:	e008      	b.n	8001b02 <HAL_DMA_Abort_IT+0xa2>
 8001af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af4:	e005      	b.n	8001b02 <HAL_DMA_Abort_IT+0xa2>
 8001af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afa:	e002      	b.n	8001b02 <HAL_DMA_Abort_IT+0xa2>
 8001afc:	2310      	movs	r3, #16
 8001afe:	e000      	b.n	8001b02 <HAL_DMA_Abort_IT+0xa2>
 8001b00:	2301      	movs	r3, #1
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_DMA_Abort_IT+0xe8>)
 8001b04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4798      	blx	r3
    } 
  }
  return status;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40020008 	.word	0x40020008
 8001b34:	4002001c 	.word	0x4002001c
 8001b38:	40020030 	.word	0x40020030
 8001b3c:	40020044 	.word	0x40020044
 8001b40:	40020058 	.word	0x40020058
 8001b44:	4002006c 	.word	0x4002006c
 8001b48:	40020000 	.word	0x40020000

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b08b      	sub	sp, #44	; 0x2c
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	e169      	b.n	8001e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b60:	2201      	movs	r2, #1
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8158 	bne.w	8001e2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a9a      	ldr	r2, [pc, #616]	; (8001dec <HAL_GPIO_Init+0x2a0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d05e      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001b88:	4a98      	ldr	r2, [pc, #608]	; (8001dec <HAL_GPIO_Init+0x2a0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d875      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001b8e:	4a98      	ldr	r2, [pc, #608]	; (8001df0 <HAL_GPIO_Init+0x2a4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d058      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001b94:	4a96      	ldr	r2, [pc, #600]	; (8001df0 <HAL_GPIO_Init+0x2a4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d86f      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001b9a:	4a96      	ldr	r2, [pc, #600]	; (8001df4 <HAL_GPIO_Init+0x2a8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d052      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001ba0:	4a94      	ldr	r2, [pc, #592]	; (8001df4 <HAL_GPIO_Init+0x2a8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d869      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001ba6:	4a94      	ldr	r2, [pc, #592]	; (8001df8 <HAL_GPIO_Init+0x2ac>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04c      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001bac:	4a92      	ldr	r2, [pc, #584]	; (8001df8 <HAL_GPIO_Init+0x2ac>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d863      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bb2:	4a92      	ldr	r2, [pc, #584]	; (8001dfc <HAL_GPIO_Init+0x2b0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d046      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001bb8:	4a90      	ldr	r2, [pc, #576]	; (8001dfc <HAL_GPIO_Init+0x2b0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d85d      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bbe:	2b12      	cmp	r3, #18
 8001bc0:	d82a      	bhi.n	8001c18 <HAL_GPIO_Init+0xcc>
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d859      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <HAL_GPIO_Init+0x80>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001c47 	.word	0x08001c47
 8001bd0:	08001c21 	.word	0x08001c21
 8001bd4:	08001c33 	.word	0x08001c33
 8001bd8:	08001c75 	.word	0x08001c75
 8001bdc:	08001c7b 	.word	0x08001c7b
 8001be0:	08001c7b 	.word	0x08001c7b
 8001be4:	08001c7b 	.word	0x08001c7b
 8001be8:	08001c7b 	.word	0x08001c7b
 8001bec:	08001c7b 	.word	0x08001c7b
 8001bf0:	08001c7b 	.word	0x08001c7b
 8001bf4:	08001c7b 	.word	0x08001c7b
 8001bf8:	08001c7b 	.word	0x08001c7b
 8001bfc:	08001c7b 	.word	0x08001c7b
 8001c00:	08001c7b 	.word	0x08001c7b
 8001c04:	08001c7b 	.word	0x08001c7b
 8001c08:	08001c7b 	.word	0x08001c7b
 8001c0c:	08001c7b 	.word	0x08001c7b
 8001c10:	08001c29 	.word	0x08001c29
 8001c14:	08001c3d 	.word	0x08001c3d
 8001c18:	4a79      	ldr	r2, [pc, #484]	; (8001e00 <HAL_GPIO_Init+0x2b4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c1e:	e02c      	b.n	8001c7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e029      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e024      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	3308      	adds	r3, #8
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e01f      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	330c      	adds	r3, #12
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	e01a      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e013      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	611a      	str	r2, [r3, #16]
          break;
 8001c66:	e009      	b.n	8001c7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	615a      	str	r2, [r3, #20]
          break;
 8001c72:	e003      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          break;
 8001c7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2bff      	cmp	r3, #255	; 0xff
 8001c80:	d801      	bhi.n	8001c86 <HAL_GPIO_Init+0x13a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_Init+0x13e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d802      	bhi.n	8001c98 <HAL_GPIO_Init+0x14c>
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_GPIO_Init+0x152>
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	3b08      	subs	r3, #8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	210f      	movs	r1, #15
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80b1 	beq.w	8001e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <HAL_GPIO_Init+0x2b8>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_GPIO_Init+0x2b8>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <HAL_GPIO_Init+0x2b8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ce4:	4a48      	ldr	r2, [pc, #288]	; (8001e08 <HAL_GPIO_Init+0x2bc>)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a40      	ldr	r2, [pc, #256]	; (8001e0c <HAL_GPIO_Init+0x2c0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <HAL_GPIO_Init+0x1ec>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3f      	ldr	r2, [pc, #252]	; (8001e10 <HAL_GPIO_Init+0x2c4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00d      	beq.n	8001d34 <HAL_GPIO_Init+0x1e8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3e      	ldr	r2, [pc, #248]	; (8001e14 <HAL_GPIO_Init+0x2c8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d007      	beq.n	8001d30 <HAL_GPIO_Init+0x1e4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3d      	ldr	r2, [pc, #244]	; (8001e18 <HAL_GPIO_Init+0x2cc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_GPIO_Init+0x1e0>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	e004      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3c:	f002 0203 	and.w	r2, r2, #3
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4093      	lsls	r3, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d4a:	492f      	ldr	r1, [pc, #188]	; (8001e08 <HAL_GPIO_Init+0x2bc>)
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	492c      	ldr	r1, [pc, #176]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	4928      	ldr	r1, [pc, #160]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d8c:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4922      	ldr	r1, [pc, #136]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	491e      	ldr	r1, [pc, #120]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4918      	ldr	r1, [pc, #96]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4914      	ldr	r1, [pc, #80]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d021      	beq.n	8001e20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
 8001de8:	e021      	b.n	8001e2e <HAL_GPIO_Init+0x2e2>
 8001dea:	bf00      	nop
 8001dec:	10320000 	.word	0x10320000
 8001df0:	10310000 	.word	0x10310000
 8001df4:	10220000 	.word	0x10220000
 8001df8:	10210000 	.word	0x10210000
 8001dfc:	10120000 	.word	0x10120000
 8001e00:	10110000 	.word	0x10110000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40011400 	.word	0x40011400
 8001e1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_GPIO_Init+0x304>)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	4909      	ldr	r1, [pc, #36]	; (8001e50 <HAL_GPIO_Init+0x304>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	3301      	adds	r3, #1
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f47f ae8e 	bne.w	8001b60 <HAL_GPIO_Init+0x14>
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	372c      	adds	r7, #44	; 0x2c
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e001      	b.n	8001e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	807b      	strh	r3, [r7, #2]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e92:	787b      	ldrb	r3, [r7, #1]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e98:	887a      	ldrh	r2, [r7, #2]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e9e:	e003      	b.n	8001ea8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	041a      	lsls	r2, r3, #16
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	611a      	str	r2, [r3, #16]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e26c      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8087 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed4:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d00c      	beq.n	8001efa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee0:	4b8f      	ldr	r3, [pc, #572]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d112      	bne.n	8001f12 <HAL_RCC_OscConfig+0x5e>
 8001eec:	4b8c      	ldr	r3, [pc, #560]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d10b      	bne.n	8001f12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efa:	4b89      	ldr	r3, [pc, #548]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d06c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x12c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d168      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e246      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x76>
 8001f1c:	4b80      	ldr	r3, [pc, #512]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a7f      	ldr	r2, [pc, #508]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e02e      	b.n	8001f88 <HAL_RCC_OscConfig+0xd4>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x98>
 8001f32:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7a      	ldr	r2, [pc, #488]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b78      	ldr	r3, [pc, #480]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a77      	ldr	r2, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e01d      	b.n	8001f88 <HAL_RCC_OscConfig+0xd4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0xbc>
 8001f56:	4b72      	ldr	r3, [pc, #456]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a71      	ldr	r2, [pc, #452]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6e      	ldr	r2, [pc, #440]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0xd4>
 8001f70:	4b6b      	ldr	r3, [pc, #428]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a6a      	ldr	r2, [pc, #424]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a67      	ldr	r2, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d013      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fc14 	bl	80017bc <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff fc10 	bl	80017bc <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1fa      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0xe4>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fc00 	bl	80017bc <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fbfc 	bl	80017bc <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1e6      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x10c>
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d063      	beq.n	80020b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fee:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ffa:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b08      	cmp	r3, #8
 8002004:	d11c      	bne.n	8002040 <HAL_RCC_OscConfig+0x18c>
 8002006:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d116      	bne.n	8002040 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_RCC_OscConfig+0x176>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e1ba      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4939      	ldr	r1, [pc, #228]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	e03a      	b.n	80020b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_RCC_OscConfig+0x270>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fbb5 	bl	80017bc <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002056:	f7ff fbb1 	bl	80017bc <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e19b      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4927      	ldr	r1, [pc, #156]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_RCC_OscConfig+0x270>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff fb94 	bl	80017bc <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff fb90 	bl	80017bc <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e17a      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03a      	beq.n	8002138 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d019      	beq.n	80020fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_RCC_OscConfig+0x274>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff fb74 	bl	80017bc <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff fb70 	bl	80017bc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e15a      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f000 fad8 	bl	80026ac <RCC_Delay>
 80020fc:	e01c      	b.n	8002138 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_OscConfig+0x274>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7ff fb5a 	bl	80017bc <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210a:	e00f      	b.n	800212c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210c:	f7ff fb56 	bl	80017bc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d908      	bls.n	800212c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e140      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	42420000 	.word	0x42420000
 8002128:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	4b9e      	ldr	r3, [pc, #632]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e9      	bne.n	800210c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80a6 	beq.w	8002292 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214a:	4b97      	ldr	r3, [pc, #604]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10d      	bne.n	8002172 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	4b94      	ldr	r3, [pc, #592]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a93      	ldr	r2, [pc, #588]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002160:	61d3      	str	r3, [r2, #28]
 8002162:	4b91      	ldr	r3, [pc, #580]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b8e      	ldr	r3, [pc, #568]	; (80023ac <HAL_RCC_OscConfig+0x4f8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d118      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x4f8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a8a      	ldr	r2, [pc, #552]	; (80023ac <HAL_RCC_OscConfig+0x4f8>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218a:	f7ff fb17 	bl	80017bc <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7ff fb13 	bl	80017bc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	; 0x64
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0fd      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b81      	ldr	r3, [pc, #516]	; (80023ac <HAL_RCC_OscConfig+0x4f8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x312>
 80021b8:	4b7b      	ldr	r3, [pc, #492]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a7a      	ldr	r2, [pc, #488]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	e02d      	b.n	8002222 <HAL_RCC_OscConfig+0x36e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x334>
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a75      	ldr	r2, [pc, #468]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	4b73      	ldr	r3, [pc, #460]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a72      	ldr	r2, [pc, #456]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6213      	str	r3, [r2, #32]
 80021e6:	e01c      	b.n	8002222 <HAL_RCC_OscConfig+0x36e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d10c      	bne.n	800220a <HAL_RCC_OscConfig+0x356>
 80021f0:	4b6d      	ldr	r3, [pc, #436]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a6c      	ldr	r2, [pc, #432]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a69      	ldr	r2, [pc, #420]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	e00b      	b.n	8002222 <HAL_RCC_OscConfig+0x36e>
 800220a:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4a66      	ldr	r2, [pc, #408]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6213      	str	r3, [r2, #32]
 8002216:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a63      	ldr	r2, [pc, #396]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	f023 0304 	bic.w	r3, r3, #4
 8002220:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d015      	beq.n	8002256 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222a:	f7ff fac7 	bl	80017bc <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7ff fac3 	bl	80017bc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0ab      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ee      	beq.n	8002232 <HAL_RCC_OscConfig+0x37e>
 8002254:	e014      	b.n	8002280 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7ff fab1 	bl	80017bc <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7ff faad 	bl	80017bc <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e095      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ee      	bne.n	800225e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d105      	bne.n	8002292 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002286:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a47      	ldr	r2, [pc, #284]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002290:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8081 	beq.w	800239e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229c:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d061      	beq.n	800236c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d146      	bne.n	800233e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_OscConfig+0x4fc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff fa81 	bl	80017bc <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff fa7d 	bl	80017bc <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e067      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d108      	bne.n	80022f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	492d      	ldr	r1, [pc, #180]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a19      	ldr	r1, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	430b      	orrs	r3, r1
 800230a:	4927      	ldr	r1, [pc, #156]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x4fc>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7ff fa51 	bl	80017bc <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7ff fa4d 	bl	80017bc <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e037      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x46a>
 800233c:	e02f      	b.n	800239e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_RCC_OscConfig+0x4fc>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7ff fa3a 	bl	80017bc <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7ff fa36 	bl	80017bc <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e020      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x498>
 800236a:	e018      	b.n	800239e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e013      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	429a      	cmp	r2, r3
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	42420060 	.word	0x42420060

080023b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d0      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4965      	ldr	r1, [pc, #404]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b8      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a58      	ldr	r2, [pc, #352]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800241a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002428:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	494d      	ldr	r1, [pc, #308]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d040      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d115      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07f      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e073      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e06b      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4936      	ldr	r1, [pc, #216]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7ff f98a 	bl	80017bc <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7ff f986 	bl	80017bc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e053      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d210      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 0207 	bic.w	r2, r3, #7
 80024ea:	4922      	ldr	r1, [pc, #136]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e032      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4916      	ldr	r1, [pc, #88]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490e      	ldr	r1, [pc, #56]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002542:	f000 f821 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002546:	4602      	mov	r2, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	490a      	ldr	r1, [pc, #40]	; (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	5ccb      	ldrb	r3, [r1, r3]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x1cc>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1d0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f8e8 	bl	8001738 <HAL_InitTick>

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40022000 	.word	0x40022000
 8002578:	40021000 	.word	0x40021000
 800257c:	0800486c 	.word	0x0800486c
 8002580:	20000030 	.word	0x20000030
 8002584:	20000034 	.word	0x20000034

08002588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	b490      	push	{r4, r7}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800258e:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002590:	1d3c      	adds	r4, r7, #4
 8002592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002598:	f240 2301 	movw	r3, #513	; 0x201
 800259c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x40>
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x46>
 80025c6:	e02d      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ca:	623b      	str	r3, [r7, #32]
      break;
 80025cc:	e02d      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025da:	4413      	add	r3, r2
 80025dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	0c5b      	lsrs	r3, r3, #17
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025fa:	4413      	add	r3, r2
 80025fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002600:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002606:	fb02 f203 	mul.w	r2, r2, r3
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
 8002612:	e004      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	623b      	str	r3, [r7, #32]
      break;
 8002622:	e002      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002626:	623b      	str	r3, [r7, #32]
      break;
 8002628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262a:	6a3b      	ldr	r3, [r7, #32]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bc90      	pop	{r4, r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	0800485c 	.word	0x0800485c
 800263c:	40021000 	.word	0x40021000
 8002640:	007a1200 	.word	0x007a1200
 8002644:	003d0900 	.word	0x003d0900

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b02      	ldr	r3, [pc, #8]	; (8002658 <HAL_RCC_GetHCLKFreq+0x10>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000030 	.word	0x20000030

0800265c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002660:	f7ff fff2 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	4903      	ldr	r1, [pc, #12]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	0800487c 	.word	0x0800487c

08002684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002688:	f7ff ffde 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0adb      	lsrs	r3, r3, #11
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4903      	ldr	r1, [pc, #12]	; (80026a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	0800487c 	.word	0x0800487c

080026ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <RCC_Delay+0x34>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <RCC_Delay+0x38>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a5b      	lsrs	r3, r3, #9
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c8:	bf00      	nop
  }
  while (Delay --);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	60fa      	str	r2, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f9      	bne.n	80026c8 <RCC_Delay+0x1c>
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000030 	.word	0x20000030
 80026e4:	10624dd3 	.word	0x10624dd3

080026e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e041      	b.n	800277e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe fd96 	bl	8001240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f000 fc28 	bl	8002f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d001      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e03a      	b.n	8002816 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <HAL_TIM_Base_Start_IT+0x98>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00e      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x58>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d009      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x58>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <HAL_TIM_Base_Start_IT+0x9c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x58>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a13      	ldr	r2, [pc, #76]	; (8002828 <HAL_TIM_Base_Start_IT+0xa0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d111      	bne.n	8002804 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d010      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002802:	e007      	b.n	8002814 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40000400 	.word	0x40000400
 8002828:	40000800 	.word	0x40000800

0800282c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e041      	b.n	80028c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f839 	bl	80028ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 fb86 	bl	8002f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_TIM_PWM_Start+0x24>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e022      	b.n	8002946 <HAL_TIM_PWM_Start+0x6a>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d109      	bne.n	800291a <HAL_TIM_PWM_Start+0x3e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	bf14      	ite	ne
 8002912:	2301      	movne	r3, #1
 8002914:	2300      	moveq	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	e015      	b.n	8002946 <HAL_TIM_PWM_Start+0x6a>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d109      	bne.n	8002934 <HAL_TIM_PWM_Start+0x58>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e008      	b.n	8002946 <HAL_TIM_PWM_Start+0x6a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e05e      	b.n	8002a0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d104      	bne.n	800295e <HAL_TIM_PWM_Start+0x82>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800295c:	e013      	b.n	8002986 <HAL_TIM_PWM_Start+0xaa>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b04      	cmp	r3, #4
 8002962:	d104      	bne.n	800296e <HAL_TIM_PWM_Start+0x92>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800296c:	e00b      	b.n	8002986 <HAL_TIM_PWM_Start+0xaa>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d104      	bne.n	800297e <HAL_TIM_PWM_Start+0xa2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	e003      	b.n	8002986 <HAL_TIM_PWM_Start+0xaa>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fd74 	bl	800347c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <HAL_TIM_PWM_Start+0x138>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d107      	bne.n	80029ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <HAL_TIM_PWM_Start+0x138>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_TIM_PWM_Start+0xfa>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d009      	beq.n	80029d6 <HAL_TIM_PWM_Start+0xfa>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <HAL_TIM_PWM_Start+0x13c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIM_PWM_Start+0xfa>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <HAL_TIM_PWM_Start+0x140>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d111      	bne.n	80029fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b06      	cmp	r3, #6
 80029e6:	d010      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	e007      	b.n	8002a0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800

08002a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d122      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d11b      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0202 	mvn.w	r2, #2
 8002a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa6f 	bl	8002f46 <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa62 	bl	8002f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fa71 	bl	8002f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d122      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d11b      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0204 	mvn.w	r2, #4
 8002aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa45 	bl	8002f46 <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa38 	bl	8002f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fa47 	bl	8002f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d122      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d11b      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0208 	mvn.w	r2, #8
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2204      	movs	r2, #4
 8002afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa1b 	bl	8002f46 <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fa0e 	bl	8002f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fa1d 	bl	8002f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d122      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d11b      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0210 	mvn.w	r2, #16
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f9f1 	bl	8002f46 <HAL_TIM_IC_CaptureCallback>
 8002b64:	e005      	b.n	8002b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f9e4 	bl	8002f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f9f3 	bl	8002f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10e      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0201 	mvn.w	r2, #1
 8002b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe fb0a 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b80      	cmp	r3, #128	; 0x80
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d107      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fce1 	bl	8003592 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d10e      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d107      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9b7 	bl	8002f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0220 	mvn.w	r2, #32
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fcac 	bl	8003580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e0ac      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	f200 809f 	bhi.w	8002d98 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c95 	.word	0x08002c95
 8002c64:	08002d99 	.word	0x08002d99
 8002c68:	08002d99 	.word	0x08002d99
 8002c6c:	08002d99 	.word	0x08002d99
 8002c70:	08002cd5 	.word	0x08002cd5
 8002c74:	08002d99 	.word	0x08002d99
 8002c78:	08002d99 	.word	0x08002d99
 8002c7c:	08002d99 	.word	0x08002d99
 8002c80:	08002d17 	.word	0x08002d17
 8002c84:	08002d99 	.word	0x08002d99
 8002c88:	08002d99 	.word	0x08002d99
 8002c8c:	08002d99 	.word	0x08002d99
 8002c90:	08002d57 	.word	0x08002d57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f9d0 	bl	8003040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0208 	orr.w	r2, r2, #8
 8002cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0204 	bic.w	r2, r2, #4
 8002cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6999      	ldr	r1, [r3, #24]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	619a      	str	r2, [r3, #24]
      break;
 8002cd2:	e062      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fa16 	bl	800310c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6999      	ldr	r1, [r3, #24]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	021a      	lsls	r2, r3, #8
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	619a      	str	r2, [r3, #24]
      break;
 8002d14:	e041      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fa5f 	bl	80031e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0208 	orr.w	r2, r2, #8
 8002d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0204 	bic.w	r2, r2, #4
 8002d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69d9      	ldr	r1, [r3, #28]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	61da      	str	r2, [r3, #28]
      break;
 8002d54:	e021      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 faa9 	bl	80032b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69d9      	ldr	r1, [r3, #28]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	021a      	lsls	r2, r3, #8
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	61da      	str	r2, [r3, #28]
      break;
 8002d96:	e000      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_ConfigClockSource+0x18>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0b3      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x180>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfc:	d03e      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0xd0>
 8002dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e02:	f200 8087 	bhi.w	8002f14 <HAL_TIM_ConfigClockSource+0x168>
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0a:	f000 8085 	beq.w	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d87f      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x168>
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d01a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0xa2>
 8002e18:	2b70      	cmp	r3, #112	; 0x70
 8002e1a:	d87b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x168>
 8002e1c:	2b60      	cmp	r3, #96	; 0x60
 8002e1e:	d050      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x116>
 8002e20:	2b60      	cmp	r3, #96	; 0x60
 8002e22:	d877      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x168>
 8002e24:	2b50      	cmp	r3, #80	; 0x50
 8002e26:	d03c      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0xf6>
 8002e28:	2b50      	cmp	r3, #80	; 0x50
 8002e2a:	d873      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x168>
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d058      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x136>
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d86f      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x168>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d064      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x156>
 8002e38:	2b30      	cmp	r3, #48	; 0x30
 8002e3a:	d86b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x168>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d060      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x156>
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d867      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x168>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d05c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x156>
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d05a      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e4c:	e062      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f000 faee 	bl	800343e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	609a      	str	r2, [r3, #8]
      break;
 8002e7a:	e04e      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6899      	ldr	r1, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f000 fad7 	bl	800343e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9e:	609a      	str	r2, [r3, #8]
      break;
 8002ea0:	e03b      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 fa4e 	bl	8003350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2150      	movs	r1, #80	; 0x50
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 faa5 	bl	800340a <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e02b      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 fa6c 	bl	80033ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2160      	movs	r1, #96	; 0x60
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fa95 	bl	800340a <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e01b      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f000 fa2e 	bl	8003350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fa85 	bl	800340a <TIM_ITRx_SetConfig>
      break;
 8002f00:	e00b      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f000 fa7c 	bl	800340a <TIM_ITRx_SetConfig>
        break;
 8002f12:	e002      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f14:	bf00      	nop
 8002f16:	e000      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a29      	ldr	r2, [pc, #164]	; (8003034 <TIM_Base_SetConfig+0xb8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00b      	beq.n	8002fac <TIM_Base_SetConfig+0x30>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9a:	d007      	beq.n	8002fac <TIM_Base_SetConfig+0x30>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a26      	ldr	r2, [pc, #152]	; (8003038 <TIM_Base_SetConfig+0xbc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <TIM_Base_SetConfig+0x30>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a25      	ldr	r2, [pc, #148]	; (800303c <TIM_Base_SetConfig+0xc0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d108      	bne.n	8002fbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <TIM_Base_SetConfig+0xb8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <TIM_Base_SetConfig+0x62>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d007      	beq.n	8002fde <TIM_Base_SetConfig+0x62>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <TIM_Base_SetConfig+0xbc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_Base_SetConfig+0x62>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a18      	ldr	r2, [pc, #96]	; (800303c <TIM_Base_SetConfig+0xc0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d108      	bne.n	8002ff0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a07      	ldr	r2, [pc, #28]	; (8003034 <TIM_Base_SetConfig+0xb8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d103      	bne.n	8003024 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	615a      	str	r2, [r3, #20]
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800

08003040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f023 0201 	bic.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 0302 	bic.w	r3, r3, #2
 8003088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <TIM_OC1_SetConfig+0xc8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d10c      	bne.n	80030b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0308 	bic.w	r3, r3, #8
 80030a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f023 0304 	bic.w	r3, r3, #4
 80030b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <TIM_OC1_SetConfig+0xc8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d111      	bne.n	80030e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40012c00 	.word	0x40012c00

0800310c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0210 	bic.w	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f023 0320 	bic.w	r3, r3, #32
 8003156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <TIM_OC2_SetConfig+0xd0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d10d      	bne.n	8003188 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003186:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a14      	ldr	r2, [pc, #80]	; (80031dc <TIM_OC2_SetConfig+0xd0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d113      	bne.n	80031b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800319e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	40012c00 	.word	0x40012c00

080031e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <TIM_OC3_SetConfig+0xd0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10d      	bne.n	800325a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <TIM_OC3_SetConfig+0xd0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d113      	bne.n	800328a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	621a      	str	r2, [r3, #32]
}
 80032a4:	bf00      	nop
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40012c00 	.word	0x40012c00

080032b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	031b      	lsls	r3, r3, #12
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0f      	ldr	r2, [pc, #60]	; (800334c <TIM_OC4_SetConfig+0x98>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d109      	bne.n	8003328 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	40012c00 	.word	0x40012c00

08003350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800337a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 030a 	bic.w	r3, r3, #10
 800338c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f023 0210 	bic.w	r2, r3, #16
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	031b      	lsls	r3, r3, #12
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	621a      	str	r2, [r3, #32]
}
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	f043 0307 	orr.w	r3, r3, #7
 800342c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800343e:	b480      	push	{r7}
 8003440:	b087      	sub	sp, #28
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003458:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	021a      	lsls	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	431a      	orrs	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4313      	orrs	r3, r2
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	609a      	str	r2, [r3, #8]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	2201      	movs	r2, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	43db      	mvns	r3, r3
 800349e:	401a      	ands	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1a      	ldr	r2, [r3, #32]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d8:	2302      	movs	r3, #2
 80034da:	e046      	b.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d009      	beq.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a10      	ldr	r2, [pc, #64]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d10c      	bne.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	4313      	orrs	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800

08003580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e03f      	b.n	8003636 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fea2 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2224      	movs	r2, #36	; 0x24
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fc25 	bl	8003e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800360c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800361c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b08a      	sub	sp, #40	; 0x28
 8003642:	af02      	add	r7, sp, #8
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b20      	cmp	r3, #32
 800365c:	d17c      	bne.n	8003758 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_UART_Transmit+0x2c>
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e075      	b.n	800375a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_UART_Transmit+0x3e>
 8003678:	2302      	movs	r3, #2
 800367a:	e06e      	b.n	800375a <HAL_UART_Transmit+0x11c>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2221      	movs	r2, #33	; 0x21
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003692:	f7fe f893 	bl	80017bc <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	88fa      	ldrh	r2, [r7, #6]
 800369c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ac:	d108      	bne.n	80036c0 <HAL_UART_Transmit+0x82>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	e003      	b.n	80036c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036d0:	e02a      	b.n	8003728 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fa11 	bl	8003b04 <UART_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e036      	b.n	800375a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10b      	bne.n	800370a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003700:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	3302      	adds	r3, #2
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e007      	b.n	800371a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	3301      	adds	r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1cf      	bne.n	80036d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	2140      	movs	r1, #64	; 0x40
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f9e1 	bl	8003b04 <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e006      	b.n	800375a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003784:	2300      	movs	r3, #0
 8003786:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_UART_IRQHandler+0x52>
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fa99 	bl	8003ce6 <UART_Receive_IT>
      return;
 80037b4:	e17b      	b.n	8003aae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80b1 	beq.w	8003920 <HAL_UART_IRQHandler+0x1bc>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <HAL_UART_IRQHandler+0x70>
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80a6 	beq.w	8003920 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_UART_IRQHandler+0x90>
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f043 0201 	orr.w	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_UART_IRQHandler+0xb0>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f043 0202 	orr.w	r2, r3, #2
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_UART_IRQHandler+0xd0>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	f043 0204 	orr.w	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00f      	beq.n	800385e <HAL_UART_IRQHandler+0xfa>
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <HAL_UART_IRQHandler+0xee>
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f043 0208 	orr.w	r2, r3, #8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 811e 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <HAL_UART_IRQHandler+0x11e>
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fa32 	bl	8003ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <HAL_UART_IRQHandler+0x146>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d031      	beq.n	800390e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f974 	bl	8003b98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d023      	beq.n	8003906 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d013      	beq.n	80038fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	4a76      	ldr	r2, [pc, #472]	; (8003ab4 <HAL_UART_IRQHandler+0x350>)
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe f8bc 	bl	8001a60 <HAL_DMA_Abort_IT>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038f8:	4610      	mov	r0, r2
 80038fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	e00e      	b.n	800391c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f8ec 	bl	8003adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	e00a      	b.n	800391c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f8e8 	bl	8003adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	e006      	b.n	800391c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f8e4 	bl	8003adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800391a:	e0c3      	b.n	8003aa4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	bf00      	nop
    return;
 800391e:	e0c1      	b.n	8003aa4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	2b01      	cmp	r3, #1
 8003926:	f040 80a1 	bne.w	8003a6c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 809b 	beq.w	8003a6c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8095 	beq.w	8003a6c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d04e      	beq.n	8003a04 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003970:	8a3b      	ldrh	r3, [r7, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 8098 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800397c:	8a3a      	ldrh	r2, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	f080 8092 	bcs.w	8003aa8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8a3a      	ldrh	r2, [r7, #16]
 8003988:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b20      	cmp	r3, #32
 8003992:	d02b      	beq.n	80039ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0210 	bic.w	r2, r2, #16
 80039e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd ffff 	bl	80019ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f876 	bl	8003aee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a02:	e051      	b.n	8003aa8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d047      	beq.n	8003aac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a1c:	8a7b      	ldrh	r3, [r7, #18]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d044      	beq.n	8003aac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a30:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0210 	bic.w	r2, r2, #16
 8003a5e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a60:	8a7b      	ldrh	r3, [r7, #18]
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f842 	bl	8003aee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a6a:	e01f      	b.n	8003aac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_UART_IRQHandler+0x324>
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f8c9 	bl	8003c18 <UART_Transmit_IT>
    return;
 8003a86:	e012      	b.n	8003aae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <HAL_UART_IRQHandler+0x34a>
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f90a 	bl	8003cb6 <UART_EndTransmit_IT>
    return;
 8003aa2:	e004      	b.n	8003aae <HAL_UART_IRQHandler+0x34a>
    return;
 8003aa4:	bf00      	nop
 8003aa6:	e002      	b.n	8003aae <HAL_UART_IRQHandler+0x34a>
      return;
 8003aa8:	bf00      	nop
 8003aaa:	e000      	b.n	8003aae <HAL_UART_IRQHandler+0x34a>
      return;
 8003aac:	bf00      	nop
  }
}
 8003aae:	3728      	adds	r7, #40	; 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	08003bf1 	.word	0x08003bf1

08003ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b14:	e02c      	b.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d028      	beq.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b24:	f7fd fe4a 	bl	80017bc <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d21d      	bcs.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e00f      	b.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d0c3      	beq.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0210 	bic.w	r2, r2, #16
 8003bd6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff ff66 	bl	8003adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b21      	cmp	r3, #33	; 0x21
 8003c2a:	d13e      	bne.n	8003caa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d114      	bne.n	8003c60 <UART_Transmit_IT+0x48>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d110      	bne.n	8003c60 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	1c9a      	adds	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	621a      	str	r2, [r3, #32]
 8003c5e:	e008      	b.n	8003c72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	1c59      	adds	r1, r3, #1
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6211      	str	r1, [r2, #32]
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e000      	b.n	8003cac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
  }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff feee 	bl	8003ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b086      	sub	sp, #24
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b22      	cmp	r3, #34	; 0x22
 8003cf8:	f040 8099 	bne.w	8003e2e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	d117      	bne.n	8003d36 <UART_Receive_IT+0x50>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d113      	bne.n	8003d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28
 8003d34:	e026      	b.n	8003d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d48:	d007      	beq.n	8003d5a <UART_Receive_IT+0x74>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10a      	bne.n	8003d68 <UART_Receive_IT+0x82>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	e008      	b.n	8003d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4619      	mov	r1, r3
 8003d92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d148      	bne.n	8003e2a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0220 	bic.w	r2, r2, #32
 8003da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d123      	bne.n	8003e20 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0210 	bic.w	r2, r2, #16
 8003dec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d10a      	bne.n	8003e12 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fe68 	bl	8003aee <HAL_UARTEx_RxEventCallback>
 8003e1e:	e002      	b.n	8003e26 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff fe52 	bl	8003aca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e002      	b.n	8003e30 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e72:	f023 030c 	bic.w	r3, r3, #12
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2c      	ldr	r2, [pc, #176]	; (8003f4c <UART_SetConfig+0x114>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d103      	bne.n	8003ea8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7fe fbf0 	bl	8002684 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	e002      	b.n	8003eae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f7fe fbd8 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003eac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009a      	lsls	r2, r3, #2
 8003eb8:	441a      	add	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <UART_SetConfig+0x118>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	0119      	lsls	r1, r3, #4
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009a      	lsls	r2, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <UART_SetConfig+0x118>)
 8003ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2064      	movs	r0, #100	; 0x64
 8003eee:	fb00 f303 	mul.w	r3, r0, r3
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	3332      	adds	r3, #50	; 0x32
 8003ef8:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <UART_SetConfig+0x118>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f04:	4419      	add	r1, r3
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009a      	lsls	r2, r3, #2
 8003f10:	441a      	add	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <UART_SetConfig+0x118>)
 8003f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2064      	movs	r0, #100	; 0x64
 8003f26:	fb00 f303 	mul.w	r3, r0, r3
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	3332      	adds	r3, #50	; 0x32
 8003f30:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <UART_SetConfig+0x118>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	f003 020f 	and.w	r2, r3, #15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	440a      	add	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	51eb851f 	.word	0x51eb851f

08003f54 <__errno>:
 8003f54:	4b01      	ldr	r3, [pc, #4]	; (8003f5c <__errno+0x8>)
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	2000003c 	.word	0x2000003c

08003f60 <__libc_init_array>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	2600      	movs	r6, #0
 8003f64:	4d0c      	ldr	r5, [pc, #48]	; (8003f98 <__libc_init_array+0x38>)
 8003f66:	4c0d      	ldr	r4, [pc, #52]	; (8003f9c <__libc_init_array+0x3c>)
 8003f68:	1b64      	subs	r4, r4, r5
 8003f6a:	10a4      	asrs	r4, r4, #2
 8003f6c:	42a6      	cmp	r6, r4
 8003f6e:	d109      	bne.n	8003f84 <__libc_init_array+0x24>
 8003f70:	f000 fc5c 	bl	800482c <_init>
 8003f74:	2600      	movs	r6, #0
 8003f76:	4d0a      	ldr	r5, [pc, #40]	; (8003fa0 <__libc_init_array+0x40>)
 8003f78:	4c0a      	ldr	r4, [pc, #40]	; (8003fa4 <__libc_init_array+0x44>)
 8003f7a:	1b64      	subs	r4, r4, r5
 8003f7c:	10a4      	asrs	r4, r4, #2
 8003f7e:	42a6      	cmp	r6, r4
 8003f80:	d105      	bne.n	8003f8e <__libc_init_array+0x2e>
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f88:	4798      	blx	r3
 8003f8a:	3601      	adds	r6, #1
 8003f8c:	e7ee      	b.n	8003f6c <__libc_init_array+0xc>
 8003f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f92:	4798      	blx	r3
 8003f94:	3601      	adds	r6, #1
 8003f96:	e7f2      	b.n	8003f7e <__libc_init_array+0x1e>
 8003f98:	080048b8 	.word	0x080048b8
 8003f9c:	080048b8 	.word	0x080048b8
 8003fa0:	080048b8 	.word	0x080048b8
 8003fa4:	080048bc 	.word	0x080048bc

08003fa8 <memset>:
 8003fa8:	4603      	mov	r3, r0
 8003faa:	4402      	add	r2, r0
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d100      	bne.n	8003fb2 <memset+0xa>
 8003fb0:	4770      	bx	lr
 8003fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb6:	e7f9      	b.n	8003fac <memset+0x4>

08003fb8 <siprintf>:
 8003fb8:	b40e      	push	{r1, r2, r3}
 8003fba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fbe:	b500      	push	{lr}
 8003fc0:	b09c      	sub	sp, #112	; 0x70
 8003fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fc4:	9002      	str	r0, [sp, #8]
 8003fc6:	9006      	str	r0, [sp, #24]
 8003fc8:	9107      	str	r1, [sp, #28]
 8003fca:	9104      	str	r1, [sp, #16]
 8003fcc:	4808      	ldr	r0, [pc, #32]	; (8003ff0 <siprintf+0x38>)
 8003fce:	4909      	ldr	r1, [pc, #36]	; (8003ff4 <siprintf+0x3c>)
 8003fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd4:	9105      	str	r1, [sp, #20]
 8003fd6:	6800      	ldr	r0, [r0, #0]
 8003fd8:	a902      	add	r1, sp, #8
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	f000 f868 	bl	80040b0 <_svfiprintf_r>
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	9b02      	ldr	r3, [sp, #8]
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	b01c      	add	sp, #112	; 0x70
 8003fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fec:	b003      	add	sp, #12
 8003fee:	4770      	bx	lr
 8003ff0:	2000003c 	.word	0x2000003c
 8003ff4:	ffff0208 	.word	0xffff0208

08003ff8 <__ssputs_r>:
 8003ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	688e      	ldr	r6, [r1, #8]
 8003ffe:	4682      	mov	sl, r0
 8004000:	429e      	cmp	r6, r3
 8004002:	460c      	mov	r4, r1
 8004004:	4690      	mov	r8, r2
 8004006:	461f      	mov	r7, r3
 8004008:	d838      	bhi.n	800407c <__ssputs_r+0x84>
 800400a:	898a      	ldrh	r2, [r1, #12]
 800400c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004010:	d032      	beq.n	8004078 <__ssputs_r+0x80>
 8004012:	6825      	ldr	r5, [r4, #0]
 8004014:	6909      	ldr	r1, [r1, #16]
 8004016:	3301      	adds	r3, #1
 8004018:	eba5 0901 	sub.w	r9, r5, r1
 800401c:	6965      	ldr	r5, [r4, #20]
 800401e:	444b      	add	r3, r9
 8004020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004028:	106d      	asrs	r5, r5, #1
 800402a:	429d      	cmp	r5, r3
 800402c:	bf38      	it	cc
 800402e:	461d      	movcc	r5, r3
 8004030:	0553      	lsls	r3, r2, #21
 8004032:	d531      	bpl.n	8004098 <__ssputs_r+0xa0>
 8004034:	4629      	mov	r1, r5
 8004036:	f000 fb53 	bl	80046e0 <_malloc_r>
 800403a:	4606      	mov	r6, r0
 800403c:	b950      	cbnz	r0, 8004054 <__ssputs_r+0x5c>
 800403e:	230c      	movs	r3, #12
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	f8ca 3000 	str.w	r3, [sl]
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404e:	81a3      	strh	r3, [r4, #12]
 8004050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004054:	464a      	mov	r2, r9
 8004056:	6921      	ldr	r1, [r4, #16]
 8004058:	f000 face 	bl	80045f8 <memcpy>
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	6126      	str	r6, [r4, #16]
 800406a:	444e      	add	r6, r9
 800406c:	6026      	str	r6, [r4, #0]
 800406e:	463e      	mov	r6, r7
 8004070:	6165      	str	r5, [r4, #20]
 8004072:	eba5 0509 	sub.w	r5, r5, r9
 8004076:	60a5      	str	r5, [r4, #8]
 8004078:	42be      	cmp	r6, r7
 800407a:	d900      	bls.n	800407e <__ssputs_r+0x86>
 800407c:	463e      	mov	r6, r7
 800407e:	4632      	mov	r2, r6
 8004080:	4641      	mov	r1, r8
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	f000 fac6 	bl	8004614 <memmove>
 8004088:	68a3      	ldr	r3, [r4, #8]
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	1b9b      	subs	r3, r3, r6
 800408e:	4432      	add	r2, r6
 8004090:	2000      	movs	r0, #0
 8004092:	60a3      	str	r3, [r4, #8]
 8004094:	6022      	str	r2, [r4, #0]
 8004096:	e7db      	b.n	8004050 <__ssputs_r+0x58>
 8004098:	462a      	mov	r2, r5
 800409a:	f000 fb7b 	bl	8004794 <_realloc_r>
 800409e:	4606      	mov	r6, r0
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d1e1      	bne.n	8004068 <__ssputs_r+0x70>
 80040a4:	4650      	mov	r0, sl
 80040a6:	6921      	ldr	r1, [r4, #16]
 80040a8:	f000 face 	bl	8004648 <_free_r>
 80040ac:	e7c7      	b.n	800403e <__ssputs_r+0x46>
	...

080040b0 <_svfiprintf_r>:
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	4698      	mov	r8, r3
 80040b6:	898b      	ldrh	r3, [r1, #12]
 80040b8:	4607      	mov	r7, r0
 80040ba:	061b      	lsls	r3, r3, #24
 80040bc:	460d      	mov	r5, r1
 80040be:	4614      	mov	r4, r2
 80040c0:	b09d      	sub	sp, #116	; 0x74
 80040c2:	d50e      	bpl.n	80040e2 <_svfiprintf_r+0x32>
 80040c4:	690b      	ldr	r3, [r1, #16]
 80040c6:	b963      	cbnz	r3, 80040e2 <_svfiprintf_r+0x32>
 80040c8:	2140      	movs	r1, #64	; 0x40
 80040ca:	f000 fb09 	bl	80046e0 <_malloc_r>
 80040ce:	6028      	str	r0, [r5, #0]
 80040d0:	6128      	str	r0, [r5, #16]
 80040d2:	b920      	cbnz	r0, 80040de <_svfiprintf_r+0x2e>
 80040d4:	230c      	movs	r3, #12
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	e0d1      	b.n	8004282 <_svfiprintf_r+0x1d2>
 80040de:	2340      	movs	r3, #64	; 0x40
 80040e0:	616b      	str	r3, [r5, #20]
 80040e2:	2300      	movs	r3, #0
 80040e4:	9309      	str	r3, [sp, #36]	; 0x24
 80040e6:	2320      	movs	r3, #32
 80040e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040ec:	2330      	movs	r3, #48	; 0x30
 80040ee:	f04f 0901 	mov.w	r9, #1
 80040f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800429c <_svfiprintf_r+0x1ec>
 80040fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040fe:	4623      	mov	r3, r4
 8004100:	469a      	mov	sl, r3
 8004102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004106:	b10a      	cbz	r2, 800410c <_svfiprintf_r+0x5c>
 8004108:	2a25      	cmp	r2, #37	; 0x25
 800410a:	d1f9      	bne.n	8004100 <_svfiprintf_r+0x50>
 800410c:	ebba 0b04 	subs.w	fp, sl, r4
 8004110:	d00b      	beq.n	800412a <_svfiprintf_r+0x7a>
 8004112:	465b      	mov	r3, fp
 8004114:	4622      	mov	r2, r4
 8004116:	4629      	mov	r1, r5
 8004118:	4638      	mov	r0, r7
 800411a:	f7ff ff6d 	bl	8003ff8 <__ssputs_r>
 800411e:	3001      	adds	r0, #1
 8004120:	f000 80aa 	beq.w	8004278 <_svfiprintf_r+0x1c8>
 8004124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004126:	445a      	add	r2, fp
 8004128:	9209      	str	r2, [sp, #36]	; 0x24
 800412a:	f89a 3000 	ldrb.w	r3, [sl]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80a2 	beq.w	8004278 <_svfiprintf_r+0x1c8>
 8004134:	2300      	movs	r3, #0
 8004136:	f04f 32ff 	mov.w	r2, #4294967295
 800413a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800413e:	f10a 0a01 	add.w	sl, sl, #1
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	9307      	str	r3, [sp, #28]
 8004146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800414a:	931a      	str	r3, [sp, #104]	; 0x68
 800414c:	4654      	mov	r4, sl
 800414e:	2205      	movs	r2, #5
 8004150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004154:	4851      	ldr	r0, [pc, #324]	; (800429c <_svfiprintf_r+0x1ec>)
 8004156:	f000 fa41 	bl	80045dc <memchr>
 800415a:	9a04      	ldr	r2, [sp, #16]
 800415c:	b9d8      	cbnz	r0, 8004196 <_svfiprintf_r+0xe6>
 800415e:	06d0      	lsls	r0, r2, #27
 8004160:	bf44      	itt	mi
 8004162:	2320      	movmi	r3, #32
 8004164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004168:	0711      	lsls	r1, r2, #28
 800416a:	bf44      	itt	mi
 800416c:	232b      	movmi	r3, #43	; 0x2b
 800416e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004172:	f89a 3000 	ldrb.w	r3, [sl]
 8004176:	2b2a      	cmp	r3, #42	; 0x2a
 8004178:	d015      	beq.n	80041a6 <_svfiprintf_r+0xf6>
 800417a:	4654      	mov	r4, sl
 800417c:	2000      	movs	r0, #0
 800417e:	f04f 0c0a 	mov.w	ip, #10
 8004182:	9a07      	ldr	r2, [sp, #28]
 8004184:	4621      	mov	r1, r4
 8004186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800418a:	3b30      	subs	r3, #48	; 0x30
 800418c:	2b09      	cmp	r3, #9
 800418e:	d94e      	bls.n	800422e <_svfiprintf_r+0x17e>
 8004190:	b1b0      	cbz	r0, 80041c0 <_svfiprintf_r+0x110>
 8004192:	9207      	str	r2, [sp, #28]
 8004194:	e014      	b.n	80041c0 <_svfiprintf_r+0x110>
 8004196:	eba0 0308 	sub.w	r3, r0, r8
 800419a:	fa09 f303 	lsl.w	r3, r9, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	46a2      	mov	sl, r4
 80041a2:	9304      	str	r3, [sp, #16]
 80041a4:	e7d2      	b.n	800414c <_svfiprintf_r+0x9c>
 80041a6:	9b03      	ldr	r3, [sp, #12]
 80041a8:	1d19      	adds	r1, r3, #4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	9103      	str	r1, [sp, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bfbb      	ittet	lt
 80041b2:	425b      	neglt	r3, r3
 80041b4:	f042 0202 	orrlt.w	r2, r2, #2
 80041b8:	9307      	strge	r3, [sp, #28]
 80041ba:	9307      	strlt	r3, [sp, #28]
 80041bc:	bfb8      	it	lt
 80041be:	9204      	strlt	r2, [sp, #16]
 80041c0:	7823      	ldrb	r3, [r4, #0]
 80041c2:	2b2e      	cmp	r3, #46	; 0x2e
 80041c4:	d10c      	bne.n	80041e0 <_svfiprintf_r+0x130>
 80041c6:	7863      	ldrb	r3, [r4, #1]
 80041c8:	2b2a      	cmp	r3, #42	; 0x2a
 80041ca:	d135      	bne.n	8004238 <_svfiprintf_r+0x188>
 80041cc:	9b03      	ldr	r3, [sp, #12]
 80041ce:	3402      	adds	r4, #2
 80041d0:	1d1a      	adds	r2, r3, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	9203      	str	r2, [sp, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bfb8      	it	lt
 80041da:	f04f 33ff 	movlt.w	r3, #4294967295
 80041de:	9305      	str	r3, [sp, #20]
 80041e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042ac <_svfiprintf_r+0x1fc>
 80041e4:	2203      	movs	r2, #3
 80041e6:	4650      	mov	r0, sl
 80041e8:	7821      	ldrb	r1, [r4, #0]
 80041ea:	f000 f9f7 	bl	80045dc <memchr>
 80041ee:	b140      	cbz	r0, 8004202 <_svfiprintf_r+0x152>
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	eba0 000a 	sub.w	r0, r0, sl
 80041f6:	fa03 f000 	lsl.w	r0, r3, r0
 80041fa:	9b04      	ldr	r3, [sp, #16]
 80041fc:	3401      	adds	r4, #1
 80041fe:	4303      	orrs	r3, r0
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004206:	2206      	movs	r2, #6
 8004208:	4825      	ldr	r0, [pc, #148]	; (80042a0 <_svfiprintf_r+0x1f0>)
 800420a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800420e:	f000 f9e5 	bl	80045dc <memchr>
 8004212:	2800      	cmp	r0, #0
 8004214:	d038      	beq.n	8004288 <_svfiprintf_r+0x1d8>
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <_svfiprintf_r+0x1f4>)
 8004218:	bb1b      	cbnz	r3, 8004262 <_svfiprintf_r+0x1b2>
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	3307      	adds	r3, #7
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	3308      	adds	r3, #8
 8004224:	9303      	str	r3, [sp, #12]
 8004226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004228:	4433      	add	r3, r6
 800422a:	9309      	str	r3, [sp, #36]	; 0x24
 800422c:	e767      	b.n	80040fe <_svfiprintf_r+0x4e>
 800422e:	460c      	mov	r4, r1
 8004230:	2001      	movs	r0, #1
 8004232:	fb0c 3202 	mla	r2, ip, r2, r3
 8004236:	e7a5      	b.n	8004184 <_svfiprintf_r+0xd4>
 8004238:	2300      	movs	r3, #0
 800423a:	f04f 0c0a 	mov.w	ip, #10
 800423e:	4619      	mov	r1, r3
 8004240:	3401      	adds	r4, #1
 8004242:	9305      	str	r3, [sp, #20]
 8004244:	4620      	mov	r0, r4
 8004246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800424a:	3a30      	subs	r2, #48	; 0x30
 800424c:	2a09      	cmp	r2, #9
 800424e:	d903      	bls.n	8004258 <_svfiprintf_r+0x1a8>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0c5      	beq.n	80041e0 <_svfiprintf_r+0x130>
 8004254:	9105      	str	r1, [sp, #20]
 8004256:	e7c3      	b.n	80041e0 <_svfiprintf_r+0x130>
 8004258:	4604      	mov	r4, r0
 800425a:	2301      	movs	r3, #1
 800425c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004260:	e7f0      	b.n	8004244 <_svfiprintf_r+0x194>
 8004262:	ab03      	add	r3, sp, #12
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	462a      	mov	r2, r5
 8004268:	4638      	mov	r0, r7
 800426a:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <_svfiprintf_r+0x1f8>)
 800426c:	a904      	add	r1, sp, #16
 800426e:	f3af 8000 	nop.w
 8004272:	1c42      	adds	r2, r0, #1
 8004274:	4606      	mov	r6, r0
 8004276:	d1d6      	bne.n	8004226 <_svfiprintf_r+0x176>
 8004278:	89ab      	ldrh	r3, [r5, #12]
 800427a:	065b      	lsls	r3, r3, #25
 800427c:	f53f af2c 	bmi.w	80040d8 <_svfiprintf_r+0x28>
 8004280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004282:	b01d      	add	sp, #116	; 0x74
 8004284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004288:	ab03      	add	r3, sp, #12
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	462a      	mov	r2, r5
 800428e:	4638      	mov	r0, r7
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <_svfiprintf_r+0x1f8>)
 8004292:	a904      	add	r1, sp, #16
 8004294:	f000 f87c 	bl	8004390 <_printf_i>
 8004298:	e7eb      	b.n	8004272 <_svfiprintf_r+0x1c2>
 800429a:	bf00      	nop
 800429c:	08004884 	.word	0x08004884
 80042a0:	0800488e 	.word	0x0800488e
 80042a4:	00000000 	.word	0x00000000
 80042a8:	08003ff9 	.word	0x08003ff9
 80042ac:	0800488a 	.word	0x0800488a

080042b0 <_printf_common>:
 80042b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	4616      	mov	r6, r2
 80042b6:	4699      	mov	r9, r3
 80042b8:	688a      	ldr	r2, [r1, #8]
 80042ba:	690b      	ldr	r3, [r1, #16]
 80042bc:	4607      	mov	r7, r0
 80042be:	4293      	cmp	r3, r2
 80042c0:	bfb8      	it	lt
 80042c2:	4613      	movlt	r3, r2
 80042c4:	6033      	str	r3, [r6, #0]
 80042c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042ca:	460c      	mov	r4, r1
 80042cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042d0:	b10a      	cbz	r2, 80042d6 <_printf_common+0x26>
 80042d2:	3301      	adds	r3, #1
 80042d4:	6033      	str	r3, [r6, #0]
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	0699      	lsls	r1, r3, #26
 80042da:	bf42      	ittt	mi
 80042dc:	6833      	ldrmi	r3, [r6, #0]
 80042de:	3302      	addmi	r3, #2
 80042e0:	6033      	strmi	r3, [r6, #0]
 80042e2:	6825      	ldr	r5, [r4, #0]
 80042e4:	f015 0506 	ands.w	r5, r5, #6
 80042e8:	d106      	bne.n	80042f8 <_printf_common+0x48>
 80042ea:	f104 0a19 	add.w	sl, r4, #25
 80042ee:	68e3      	ldr	r3, [r4, #12]
 80042f0:	6832      	ldr	r2, [r6, #0]
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	42ab      	cmp	r3, r5
 80042f6:	dc28      	bgt.n	800434a <_printf_common+0x9a>
 80042f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042fc:	1e13      	subs	r3, r2, #0
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	bf18      	it	ne
 8004302:	2301      	movne	r3, #1
 8004304:	0692      	lsls	r2, r2, #26
 8004306:	d42d      	bmi.n	8004364 <_printf_common+0xb4>
 8004308:	4649      	mov	r1, r9
 800430a:	4638      	mov	r0, r7
 800430c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004310:	47c0      	blx	r8
 8004312:	3001      	adds	r0, #1
 8004314:	d020      	beq.n	8004358 <_printf_common+0xa8>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	68e5      	ldr	r5, [r4, #12]
 800431a:	f003 0306 	and.w	r3, r3, #6
 800431e:	2b04      	cmp	r3, #4
 8004320:	bf18      	it	ne
 8004322:	2500      	movne	r5, #0
 8004324:	6832      	ldr	r2, [r6, #0]
 8004326:	f04f 0600 	mov.w	r6, #0
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	bf08      	it	eq
 800432e:	1aad      	subeq	r5, r5, r2
 8004330:	6922      	ldr	r2, [r4, #16]
 8004332:	bf08      	it	eq
 8004334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004338:	4293      	cmp	r3, r2
 800433a:	bfc4      	itt	gt
 800433c:	1a9b      	subgt	r3, r3, r2
 800433e:	18ed      	addgt	r5, r5, r3
 8004340:	341a      	adds	r4, #26
 8004342:	42b5      	cmp	r5, r6
 8004344:	d11a      	bne.n	800437c <_printf_common+0xcc>
 8004346:	2000      	movs	r0, #0
 8004348:	e008      	b.n	800435c <_printf_common+0xac>
 800434a:	2301      	movs	r3, #1
 800434c:	4652      	mov	r2, sl
 800434e:	4649      	mov	r1, r9
 8004350:	4638      	mov	r0, r7
 8004352:	47c0      	blx	r8
 8004354:	3001      	adds	r0, #1
 8004356:	d103      	bne.n	8004360 <_printf_common+0xb0>
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004360:	3501      	adds	r5, #1
 8004362:	e7c4      	b.n	80042ee <_printf_common+0x3e>
 8004364:	2030      	movs	r0, #48	; 0x30
 8004366:	18e1      	adds	r1, r4, r3
 8004368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004372:	4422      	add	r2, r4
 8004374:	3302      	adds	r3, #2
 8004376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800437a:	e7c5      	b.n	8004308 <_printf_common+0x58>
 800437c:	2301      	movs	r3, #1
 800437e:	4622      	mov	r2, r4
 8004380:	4649      	mov	r1, r9
 8004382:	4638      	mov	r0, r7
 8004384:	47c0      	blx	r8
 8004386:	3001      	adds	r0, #1
 8004388:	d0e6      	beq.n	8004358 <_printf_common+0xa8>
 800438a:	3601      	adds	r6, #1
 800438c:	e7d9      	b.n	8004342 <_printf_common+0x92>
	...

08004390 <_printf_i>:
 8004390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004394:	460c      	mov	r4, r1
 8004396:	7e27      	ldrb	r7, [r4, #24]
 8004398:	4691      	mov	r9, r2
 800439a:	2f78      	cmp	r7, #120	; 0x78
 800439c:	4680      	mov	r8, r0
 800439e:	469a      	mov	sl, r3
 80043a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043a6:	d807      	bhi.n	80043b8 <_printf_i+0x28>
 80043a8:	2f62      	cmp	r7, #98	; 0x62
 80043aa:	d80a      	bhi.n	80043c2 <_printf_i+0x32>
 80043ac:	2f00      	cmp	r7, #0
 80043ae:	f000 80d9 	beq.w	8004564 <_printf_i+0x1d4>
 80043b2:	2f58      	cmp	r7, #88	; 0x58
 80043b4:	f000 80a4 	beq.w	8004500 <_printf_i+0x170>
 80043b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043c0:	e03a      	b.n	8004438 <_printf_i+0xa8>
 80043c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043c6:	2b15      	cmp	r3, #21
 80043c8:	d8f6      	bhi.n	80043b8 <_printf_i+0x28>
 80043ca:	a001      	add	r0, pc, #4	; (adr r0, 80043d0 <_printf_i+0x40>)
 80043cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043d0:	08004429 	.word	0x08004429
 80043d4:	0800443d 	.word	0x0800443d
 80043d8:	080043b9 	.word	0x080043b9
 80043dc:	080043b9 	.word	0x080043b9
 80043e0:	080043b9 	.word	0x080043b9
 80043e4:	080043b9 	.word	0x080043b9
 80043e8:	0800443d 	.word	0x0800443d
 80043ec:	080043b9 	.word	0x080043b9
 80043f0:	080043b9 	.word	0x080043b9
 80043f4:	080043b9 	.word	0x080043b9
 80043f8:	080043b9 	.word	0x080043b9
 80043fc:	0800454b 	.word	0x0800454b
 8004400:	0800446d 	.word	0x0800446d
 8004404:	0800452d 	.word	0x0800452d
 8004408:	080043b9 	.word	0x080043b9
 800440c:	080043b9 	.word	0x080043b9
 8004410:	0800456d 	.word	0x0800456d
 8004414:	080043b9 	.word	0x080043b9
 8004418:	0800446d 	.word	0x0800446d
 800441c:	080043b9 	.word	0x080043b9
 8004420:	080043b9 	.word	0x080043b9
 8004424:	08004535 	.word	0x08004535
 8004428:	680b      	ldr	r3, [r1, #0]
 800442a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	600a      	str	r2, [r1, #0]
 8004434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004438:	2301      	movs	r3, #1
 800443a:	e0a4      	b.n	8004586 <_printf_i+0x1f6>
 800443c:	6825      	ldr	r5, [r4, #0]
 800443e:	6808      	ldr	r0, [r1, #0]
 8004440:	062e      	lsls	r6, r5, #24
 8004442:	f100 0304 	add.w	r3, r0, #4
 8004446:	d50a      	bpl.n	800445e <_printf_i+0xce>
 8004448:	6805      	ldr	r5, [r0, #0]
 800444a:	600b      	str	r3, [r1, #0]
 800444c:	2d00      	cmp	r5, #0
 800444e:	da03      	bge.n	8004458 <_printf_i+0xc8>
 8004450:	232d      	movs	r3, #45	; 0x2d
 8004452:	426d      	negs	r5, r5
 8004454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004458:	230a      	movs	r3, #10
 800445a:	485e      	ldr	r0, [pc, #376]	; (80045d4 <_printf_i+0x244>)
 800445c:	e019      	b.n	8004492 <_printf_i+0x102>
 800445e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004462:	6805      	ldr	r5, [r0, #0]
 8004464:	600b      	str	r3, [r1, #0]
 8004466:	bf18      	it	ne
 8004468:	b22d      	sxthne	r5, r5
 800446a:	e7ef      	b.n	800444c <_printf_i+0xbc>
 800446c:	680b      	ldr	r3, [r1, #0]
 800446e:	6825      	ldr	r5, [r4, #0]
 8004470:	1d18      	adds	r0, r3, #4
 8004472:	6008      	str	r0, [r1, #0]
 8004474:	0628      	lsls	r0, r5, #24
 8004476:	d501      	bpl.n	800447c <_printf_i+0xec>
 8004478:	681d      	ldr	r5, [r3, #0]
 800447a:	e002      	b.n	8004482 <_printf_i+0xf2>
 800447c:	0669      	lsls	r1, r5, #25
 800447e:	d5fb      	bpl.n	8004478 <_printf_i+0xe8>
 8004480:	881d      	ldrh	r5, [r3, #0]
 8004482:	2f6f      	cmp	r7, #111	; 0x6f
 8004484:	bf0c      	ite	eq
 8004486:	2308      	moveq	r3, #8
 8004488:	230a      	movne	r3, #10
 800448a:	4852      	ldr	r0, [pc, #328]	; (80045d4 <_printf_i+0x244>)
 800448c:	2100      	movs	r1, #0
 800448e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004492:	6866      	ldr	r6, [r4, #4]
 8004494:	2e00      	cmp	r6, #0
 8004496:	bfa8      	it	ge
 8004498:	6821      	ldrge	r1, [r4, #0]
 800449a:	60a6      	str	r6, [r4, #8]
 800449c:	bfa4      	itt	ge
 800449e:	f021 0104 	bicge.w	r1, r1, #4
 80044a2:	6021      	strge	r1, [r4, #0]
 80044a4:	b90d      	cbnz	r5, 80044aa <_printf_i+0x11a>
 80044a6:	2e00      	cmp	r6, #0
 80044a8:	d04d      	beq.n	8004546 <_printf_i+0x1b6>
 80044aa:	4616      	mov	r6, r2
 80044ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80044b0:	fb03 5711 	mls	r7, r3, r1, r5
 80044b4:	5dc7      	ldrb	r7, [r0, r7]
 80044b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044ba:	462f      	mov	r7, r5
 80044bc:	42bb      	cmp	r3, r7
 80044be:	460d      	mov	r5, r1
 80044c0:	d9f4      	bls.n	80044ac <_printf_i+0x11c>
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d10b      	bne.n	80044de <_printf_i+0x14e>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	07df      	lsls	r7, r3, #31
 80044ca:	d508      	bpl.n	80044de <_printf_i+0x14e>
 80044cc:	6923      	ldr	r3, [r4, #16]
 80044ce:	6861      	ldr	r1, [r4, #4]
 80044d0:	4299      	cmp	r1, r3
 80044d2:	bfde      	ittt	le
 80044d4:	2330      	movle	r3, #48	; 0x30
 80044d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044de:	1b92      	subs	r2, r2, r6
 80044e0:	6122      	str	r2, [r4, #16]
 80044e2:	464b      	mov	r3, r9
 80044e4:	4621      	mov	r1, r4
 80044e6:	4640      	mov	r0, r8
 80044e8:	f8cd a000 	str.w	sl, [sp]
 80044ec:	aa03      	add	r2, sp, #12
 80044ee:	f7ff fedf 	bl	80042b0 <_printf_common>
 80044f2:	3001      	adds	r0, #1
 80044f4:	d14c      	bne.n	8004590 <_printf_i+0x200>
 80044f6:	f04f 30ff 	mov.w	r0, #4294967295
 80044fa:	b004      	add	sp, #16
 80044fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004500:	4834      	ldr	r0, [pc, #208]	; (80045d4 <_printf_i+0x244>)
 8004502:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004506:	680e      	ldr	r6, [r1, #0]
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	f856 5b04 	ldr.w	r5, [r6], #4
 800450e:	061f      	lsls	r7, r3, #24
 8004510:	600e      	str	r6, [r1, #0]
 8004512:	d514      	bpl.n	800453e <_printf_i+0x1ae>
 8004514:	07d9      	lsls	r1, r3, #31
 8004516:	bf44      	itt	mi
 8004518:	f043 0320 	orrmi.w	r3, r3, #32
 800451c:	6023      	strmi	r3, [r4, #0]
 800451e:	b91d      	cbnz	r5, 8004528 <_printf_i+0x198>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	f023 0320 	bic.w	r3, r3, #32
 8004526:	6023      	str	r3, [r4, #0]
 8004528:	2310      	movs	r3, #16
 800452a:	e7af      	b.n	800448c <_printf_i+0xfc>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f043 0320 	orr.w	r3, r3, #32
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	2378      	movs	r3, #120	; 0x78
 8004536:	4828      	ldr	r0, [pc, #160]	; (80045d8 <_printf_i+0x248>)
 8004538:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800453c:	e7e3      	b.n	8004506 <_printf_i+0x176>
 800453e:	065e      	lsls	r6, r3, #25
 8004540:	bf48      	it	mi
 8004542:	b2ad      	uxthmi	r5, r5
 8004544:	e7e6      	b.n	8004514 <_printf_i+0x184>
 8004546:	4616      	mov	r6, r2
 8004548:	e7bb      	b.n	80044c2 <_printf_i+0x132>
 800454a:	680b      	ldr	r3, [r1, #0]
 800454c:	6826      	ldr	r6, [r4, #0]
 800454e:	1d1d      	adds	r5, r3, #4
 8004550:	6960      	ldr	r0, [r4, #20]
 8004552:	600d      	str	r5, [r1, #0]
 8004554:	0635      	lsls	r5, r6, #24
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	d501      	bpl.n	800455e <_printf_i+0x1ce>
 800455a:	6018      	str	r0, [r3, #0]
 800455c:	e002      	b.n	8004564 <_printf_i+0x1d4>
 800455e:	0671      	lsls	r1, r6, #25
 8004560:	d5fb      	bpl.n	800455a <_printf_i+0x1ca>
 8004562:	8018      	strh	r0, [r3, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	4616      	mov	r6, r2
 8004568:	6123      	str	r3, [r4, #16]
 800456a:	e7ba      	b.n	80044e2 <_printf_i+0x152>
 800456c:	680b      	ldr	r3, [r1, #0]
 800456e:	1d1a      	adds	r2, r3, #4
 8004570:	600a      	str	r2, [r1, #0]
 8004572:	681e      	ldr	r6, [r3, #0]
 8004574:	2100      	movs	r1, #0
 8004576:	4630      	mov	r0, r6
 8004578:	6862      	ldr	r2, [r4, #4]
 800457a:	f000 f82f 	bl	80045dc <memchr>
 800457e:	b108      	cbz	r0, 8004584 <_printf_i+0x1f4>
 8004580:	1b80      	subs	r0, r0, r6
 8004582:	6060      	str	r0, [r4, #4]
 8004584:	6863      	ldr	r3, [r4, #4]
 8004586:	6123      	str	r3, [r4, #16]
 8004588:	2300      	movs	r3, #0
 800458a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800458e:	e7a8      	b.n	80044e2 <_printf_i+0x152>
 8004590:	4632      	mov	r2, r6
 8004592:	4649      	mov	r1, r9
 8004594:	4640      	mov	r0, r8
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	47d0      	blx	sl
 800459a:	3001      	adds	r0, #1
 800459c:	d0ab      	beq.n	80044f6 <_printf_i+0x166>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	079b      	lsls	r3, r3, #30
 80045a2:	d413      	bmi.n	80045cc <_printf_i+0x23c>
 80045a4:	68e0      	ldr	r0, [r4, #12]
 80045a6:	9b03      	ldr	r3, [sp, #12]
 80045a8:	4298      	cmp	r0, r3
 80045aa:	bfb8      	it	lt
 80045ac:	4618      	movlt	r0, r3
 80045ae:	e7a4      	b.n	80044fa <_printf_i+0x16a>
 80045b0:	2301      	movs	r3, #1
 80045b2:	4632      	mov	r2, r6
 80045b4:	4649      	mov	r1, r9
 80045b6:	4640      	mov	r0, r8
 80045b8:	47d0      	blx	sl
 80045ba:	3001      	adds	r0, #1
 80045bc:	d09b      	beq.n	80044f6 <_printf_i+0x166>
 80045be:	3501      	adds	r5, #1
 80045c0:	68e3      	ldr	r3, [r4, #12]
 80045c2:	9903      	ldr	r1, [sp, #12]
 80045c4:	1a5b      	subs	r3, r3, r1
 80045c6:	42ab      	cmp	r3, r5
 80045c8:	dcf2      	bgt.n	80045b0 <_printf_i+0x220>
 80045ca:	e7eb      	b.n	80045a4 <_printf_i+0x214>
 80045cc:	2500      	movs	r5, #0
 80045ce:	f104 0619 	add.w	r6, r4, #25
 80045d2:	e7f5      	b.n	80045c0 <_printf_i+0x230>
 80045d4:	08004895 	.word	0x08004895
 80045d8:	080048a6 	.word	0x080048a6

080045dc <memchr>:
 80045dc:	4603      	mov	r3, r0
 80045de:	b510      	push	{r4, lr}
 80045e0:	b2c9      	uxtb	r1, r1
 80045e2:	4402      	add	r2, r0
 80045e4:	4293      	cmp	r3, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	d101      	bne.n	80045ee <memchr+0x12>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e003      	b.n	80045f6 <memchr+0x1a>
 80045ee:	7804      	ldrb	r4, [r0, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	428c      	cmp	r4, r1
 80045f4:	d1f6      	bne.n	80045e4 <memchr+0x8>
 80045f6:	bd10      	pop	{r4, pc}

080045f8 <memcpy>:
 80045f8:	440a      	add	r2, r1
 80045fa:	4291      	cmp	r1, r2
 80045fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004600:	d100      	bne.n	8004604 <memcpy+0xc>
 8004602:	4770      	bx	lr
 8004604:	b510      	push	{r4, lr}
 8004606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460a:	4291      	cmp	r1, r2
 800460c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004610:	d1f9      	bne.n	8004606 <memcpy+0xe>
 8004612:	bd10      	pop	{r4, pc}

08004614 <memmove>:
 8004614:	4288      	cmp	r0, r1
 8004616:	b510      	push	{r4, lr}
 8004618:	eb01 0402 	add.w	r4, r1, r2
 800461c:	d902      	bls.n	8004624 <memmove+0x10>
 800461e:	4284      	cmp	r4, r0
 8004620:	4623      	mov	r3, r4
 8004622:	d807      	bhi.n	8004634 <memmove+0x20>
 8004624:	1e43      	subs	r3, r0, #1
 8004626:	42a1      	cmp	r1, r4
 8004628:	d008      	beq.n	800463c <memmove+0x28>
 800462a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800462e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004632:	e7f8      	b.n	8004626 <memmove+0x12>
 8004634:	4601      	mov	r1, r0
 8004636:	4402      	add	r2, r0
 8004638:	428a      	cmp	r2, r1
 800463a:	d100      	bne.n	800463e <memmove+0x2a>
 800463c:	bd10      	pop	{r4, pc}
 800463e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004646:	e7f7      	b.n	8004638 <memmove+0x24>

08004648 <_free_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4605      	mov	r5, r0
 800464c:	2900      	cmp	r1, #0
 800464e:	d043      	beq.n	80046d8 <_free_r+0x90>
 8004650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004654:	1f0c      	subs	r4, r1, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfb8      	it	lt
 800465a:	18e4      	addlt	r4, r4, r3
 800465c:	f000 f8d0 	bl	8004800 <__malloc_lock>
 8004660:	4a1e      	ldr	r2, [pc, #120]	; (80046dc <_free_r+0x94>)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	4610      	mov	r0, r2
 8004666:	b933      	cbnz	r3, 8004676 <_free_r+0x2e>
 8004668:	6063      	str	r3, [r4, #4]
 800466a:	6014      	str	r4, [r2, #0]
 800466c:	4628      	mov	r0, r5
 800466e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004672:	f000 b8cb 	b.w	800480c <__malloc_unlock>
 8004676:	42a3      	cmp	r3, r4
 8004678:	d90a      	bls.n	8004690 <_free_r+0x48>
 800467a:	6821      	ldr	r1, [r4, #0]
 800467c:	1862      	adds	r2, r4, r1
 800467e:	4293      	cmp	r3, r2
 8004680:	bf01      	itttt	eq
 8004682:	681a      	ldreq	r2, [r3, #0]
 8004684:	685b      	ldreq	r3, [r3, #4]
 8004686:	1852      	addeq	r2, r2, r1
 8004688:	6022      	streq	r2, [r4, #0]
 800468a:	6063      	str	r3, [r4, #4]
 800468c:	6004      	str	r4, [r0, #0]
 800468e:	e7ed      	b.n	800466c <_free_r+0x24>
 8004690:	461a      	mov	r2, r3
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	b10b      	cbz	r3, 800469a <_free_r+0x52>
 8004696:	42a3      	cmp	r3, r4
 8004698:	d9fa      	bls.n	8004690 <_free_r+0x48>
 800469a:	6811      	ldr	r1, [r2, #0]
 800469c:	1850      	adds	r0, r2, r1
 800469e:	42a0      	cmp	r0, r4
 80046a0:	d10b      	bne.n	80046ba <_free_r+0x72>
 80046a2:	6820      	ldr	r0, [r4, #0]
 80046a4:	4401      	add	r1, r0
 80046a6:	1850      	adds	r0, r2, r1
 80046a8:	4283      	cmp	r3, r0
 80046aa:	6011      	str	r1, [r2, #0]
 80046ac:	d1de      	bne.n	800466c <_free_r+0x24>
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4401      	add	r1, r0
 80046b4:	6011      	str	r1, [r2, #0]
 80046b6:	6053      	str	r3, [r2, #4]
 80046b8:	e7d8      	b.n	800466c <_free_r+0x24>
 80046ba:	d902      	bls.n	80046c2 <_free_r+0x7a>
 80046bc:	230c      	movs	r3, #12
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	e7d4      	b.n	800466c <_free_r+0x24>
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	1821      	adds	r1, r4, r0
 80046c6:	428b      	cmp	r3, r1
 80046c8:	bf01      	itttt	eq
 80046ca:	6819      	ldreq	r1, [r3, #0]
 80046cc:	685b      	ldreq	r3, [r3, #4]
 80046ce:	1809      	addeq	r1, r1, r0
 80046d0:	6021      	streq	r1, [r4, #0]
 80046d2:	6063      	str	r3, [r4, #4]
 80046d4:	6054      	str	r4, [r2, #4]
 80046d6:	e7c9      	b.n	800466c <_free_r+0x24>
 80046d8:	bd38      	pop	{r3, r4, r5, pc}
 80046da:	bf00      	nop
 80046dc:	20000108 	.word	0x20000108

080046e0 <_malloc_r>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	1ccd      	adds	r5, r1, #3
 80046e4:	f025 0503 	bic.w	r5, r5, #3
 80046e8:	3508      	adds	r5, #8
 80046ea:	2d0c      	cmp	r5, #12
 80046ec:	bf38      	it	cc
 80046ee:	250c      	movcc	r5, #12
 80046f0:	2d00      	cmp	r5, #0
 80046f2:	4606      	mov	r6, r0
 80046f4:	db01      	blt.n	80046fa <_malloc_r+0x1a>
 80046f6:	42a9      	cmp	r1, r5
 80046f8:	d903      	bls.n	8004702 <_malloc_r+0x22>
 80046fa:	230c      	movs	r3, #12
 80046fc:	6033      	str	r3, [r6, #0]
 80046fe:	2000      	movs	r0, #0
 8004700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004702:	f000 f87d 	bl	8004800 <__malloc_lock>
 8004706:	4921      	ldr	r1, [pc, #132]	; (800478c <_malloc_r+0xac>)
 8004708:	680a      	ldr	r2, [r1, #0]
 800470a:	4614      	mov	r4, r2
 800470c:	b99c      	cbnz	r4, 8004736 <_malloc_r+0x56>
 800470e:	4f20      	ldr	r7, [pc, #128]	; (8004790 <_malloc_r+0xb0>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	b923      	cbnz	r3, 800471e <_malloc_r+0x3e>
 8004714:	4621      	mov	r1, r4
 8004716:	4630      	mov	r0, r6
 8004718:	f000 f862 	bl	80047e0 <_sbrk_r>
 800471c:	6038      	str	r0, [r7, #0]
 800471e:	4629      	mov	r1, r5
 8004720:	4630      	mov	r0, r6
 8004722:	f000 f85d 	bl	80047e0 <_sbrk_r>
 8004726:	1c43      	adds	r3, r0, #1
 8004728:	d123      	bne.n	8004772 <_malloc_r+0x92>
 800472a:	230c      	movs	r3, #12
 800472c:	4630      	mov	r0, r6
 800472e:	6033      	str	r3, [r6, #0]
 8004730:	f000 f86c 	bl	800480c <__malloc_unlock>
 8004734:	e7e3      	b.n	80046fe <_malloc_r+0x1e>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	1b5b      	subs	r3, r3, r5
 800473a:	d417      	bmi.n	800476c <_malloc_r+0x8c>
 800473c:	2b0b      	cmp	r3, #11
 800473e:	d903      	bls.n	8004748 <_malloc_r+0x68>
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	441c      	add	r4, r3
 8004744:	6025      	str	r5, [r4, #0]
 8004746:	e004      	b.n	8004752 <_malloc_r+0x72>
 8004748:	6863      	ldr	r3, [r4, #4]
 800474a:	42a2      	cmp	r2, r4
 800474c:	bf0c      	ite	eq
 800474e:	600b      	streq	r3, [r1, #0]
 8004750:	6053      	strne	r3, [r2, #4]
 8004752:	4630      	mov	r0, r6
 8004754:	f000 f85a 	bl	800480c <__malloc_unlock>
 8004758:	f104 000b 	add.w	r0, r4, #11
 800475c:	1d23      	adds	r3, r4, #4
 800475e:	f020 0007 	bic.w	r0, r0, #7
 8004762:	1ac2      	subs	r2, r0, r3
 8004764:	d0cc      	beq.n	8004700 <_malloc_r+0x20>
 8004766:	1a1b      	subs	r3, r3, r0
 8004768:	50a3      	str	r3, [r4, r2]
 800476a:	e7c9      	b.n	8004700 <_malloc_r+0x20>
 800476c:	4622      	mov	r2, r4
 800476e:	6864      	ldr	r4, [r4, #4]
 8004770:	e7cc      	b.n	800470c <_malloc_r+0x2c>
 8004772:	1cc4      	adds	r4, r0, #3
 8004774:	f024 0403 	bic.w	r4, r4, #3
 8004778:	42a0      	cmp	r0, r4
 800477a:	d0e3      	beq.n	8004744 <_malloc_r+0x64>
 800477c:	1a21      	subs	r1, r4, r0
 800477e:	4630      	mov	r0, r6
 8004780:	f000 f82e 	bl	80047e0 <_sbrk_r>
 8004784:	3001      	adds	r0, #1
 8004786:	d1dd      	bne.n	8004744 <_malloc_r+0x64>
 8004788:	e7cf      	b.n	800472a <_malloc_r+0x4a>
 800478a:	bf00      	nop
 800478c:	20000108 	.word	0x20000108
 8004790:	2000010c 	.word	0x2000010c

08004794 <_realloc_r>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	4607      	mov	r7, r0
 8004798:	4614      	mov	r4, r2
 800479a:	460e      	mov	r6, r1
 800479c:	b921      	cbnz	r1, 80047a8 <_realloc_r+0x14>
 800479e:	4611      	mov	r1, r2
 80047a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047a4:	f7ff bf9c 	b.w	80046e0 <_malloc_r>
 80047a8:	b922      	cbnz	r2, 80047b4 <_realloc_r+0x20>
 80047aa:	f7ff ff4d 	bl	8004648 <_free_r>
 80047ae:	4625      	mov	r5, r4
 80047b0:	4628      	mov	r0, r5
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b4:	f000 f830 	bl	8004818 <_malloc_usable_size_r>
 80047b8:	42a0      	cmp	r0, r4
 80047ba:	d20f      	bcs.n	80047dc <_realloc_r+0x48>
 80047bc:	4621      	mov	r1, r4
 80047be:	4638      	mov	r0, r7
 80047c0:	f7ff ff8e 	bl	80046e0 <_malloc_r>
 80047c4:	4605      	mov	r5, r0
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d0f2      	beq.n	80047b0 <_realloc_r+0x1c>
 80047ca:	4631      	mov	r1, r6
 80047cc:	4622      	mov	r2, r4
 80047ce:	f7ff ff13 	bl	80045f8 <memcpy>
 80047d2:	4631      	mov	r1, r6
 80047d4:	4638      	mov	r0, r7
 80047d6:	f7ff ff37 	bl	8004648 <_free_r>
 80047da:	e7e9      	b.n	80047b0 <_realloc_r+0x1c>
 80047dc:	4635      	mov	r5, r6
 80047de:	e7e7      	b.n	80047b0 <_realloc_r+0x1c>

080047e0 <_sbrk_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	2300      	movs	r3, #0
 80047e4:	4d05      	ldr	r5, [pc, #20]	; (80047fc <_sbrk_r+0x1c>)
 80047e6:	4604      	mov	r4, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	602b      	str	r3, [r5, #0]
 80047ec:	f7fc fe20 	bl	8001430 <_sbrk>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_sbrk_r+0x1a>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_sbrk_r+0x1a>
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	20000210 	.word	0x20000210

08004800 <__malloc_lock>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__malloc_lock+0x8>)
 8004802:	f000 b811 	b.w	8004828 <__retarget_lock_acquire_recursive>
 8004806:	bf00      	nop
 8004808:	20000218 	.word	0x20000218

0800480c <__malloc_unlock>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__malloc_unlock+0x8>)
 800480e:	f000 b80c 	b.w	800482a <__retarget_lock_release_recursive>
 8004812:	bf00      	nop
 8004814:	20000218 	.word	0x20000218

08004818 <_malloc_usable_size_r>:
 8004818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800481c:	1f18      	subs	r0, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	bfbc      	itt	lt
 8004822:	580b      	ldrlt	r3, [r1, r0]
 8004824:	18c0      	addlt	r0, r0, r3
 8004826:	4770      	bx	lr

08004828 <__retarget_lock_acquire_recursive>:
 8004828:	4770      	bx	lr

0800482a <__retarget_lock_release_recursive>:
 800482a:	4770      	bx	lr

0800482c <_init>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr

08004838 <_fini>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	bf00      	nop
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr
