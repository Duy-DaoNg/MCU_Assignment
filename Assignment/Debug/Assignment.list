
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004760  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080048e0  080048e0  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e0  080048e0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080048e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000a0  08004988  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004988  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164c0  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ced  00000000  00000000  00036589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00039278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00039fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c43  00000000  00000000  0003abb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d55  00000000  00000000  000547fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b294  00000000  00000000  00067550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f27e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  000f2838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004854 	.word	0x08004854

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08004854 	.word	0x08004854

0800014c <button_reading>:
static GPIO_PinState Reg1[NO_OF_BUTTONS];
static GPIO_PinState Reg2[NO_OF_BUTTONS];
/* Set time out */
int TimerForKeyPress = 300;
/* Read input then set button flag */
void button_reading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0a6      	b.n	80002a6 <button_reading+0x15a>
		Reg2[i] = Reg1[i];
 8000158:	4a57      	ldr	r2, [pc, #348]	; (80002b8 <button_reading+0x16c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a56      	ldr	r2, [pc, #344]	; (80002bc <button_reading+0x170>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		Reg1[i] = Reg0[i];
 800016a:	4a55      	ldr	r2, [pc, #340]	; (80002c0 <button_reading+0x174>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a51      	ldr	r2, [pc, #324]	; (80002b8 <button_reading+0x16c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 800017c:	4a51      	ldr	r2, [pc, #324]	; (80002c4 <button_reading+0x178>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000184:	4619      	mov	r1, r3
 8000186:	4850      	ldr	r0, [pc, #320]	; (80002c8 <button_reading+0x17c>)
 8000188:	f001 fe78 	bl	8001e7c <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	4619      	mov	r1, r3
 8000190:	4a4b      	ldr	r2, [pc, #300]	; (80002c0 <button_reading+0x174>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	460a      	mov	r2, r1
 8000198:	701a      	strb	r2, [r3, #0]
		if(i <= 1){
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	dc0f      	bgt.n	80001c0 <button_reading+0x74>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001a0:	4a48      	ldr	r2, [pc, #288]	; (80002c4 <button_reading+0x178>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001a8:	4619      	mov	r1, r3
 80001aa:	4847      	ldr	r0, [pc, #284]	; (80002c8 <button_reading+0x17c>)
 80001ac:	f001 fe66 	bl	8001e7c <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a42      	ldr	r2, [pc, #264]	; (80002c0 <button_reading+0x174>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4413      	add	r3, r2
 80001ba:	460a      	mov	r2, r1
 80001bc:	701a      	strb	r2, [r3, #0]
 80001be:	e021      	b.n	8000204 <button_reading+0xb8>
		}
		else if(i == 2){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d10f      	bne.n	80001e6 <button_reading+0x9a>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOB, INPUT_BUTTON[i]);
 80001c6:	4a3f      	ldr	r2, [pc, #252]	; (80002c4 <button_reading+0x178>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ce:	4619      	mov	r1, r3
 80001d0:	483e      	ldr	r0, [pc, #248]	; (80002cc <button_reading+0x180>)
 80001d2:	f001 fe53 	bl	8001e7c <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a39      	ldr	r2, [pc, #228]	; (80002c0 <button_reading+0x174>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	460a      	mov	r2, r1
 80001e2:	701a      	strb	r2, [r3, #0]
 80001e4:	e00e      	b.n	8000204 <button_reading+0xb8>
		}
		else{
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001e6:	4a37      	ldr	r2, [pc, #220]	; (80002c4 <button_reading+0x178>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ee:	4619      	mov	r1, r3
 80001f0:	4835      	ldr	r0, [pc, #212]	; (80002c8 <button_reading+0x17c>)
 80001f2:	f001 fe43 	bl	8001e7c <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a31      	ldr	r2, [pc, #196]	; (80002c0 <button_reading+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	460a      	mov	r2, r1
 8000202:	701a      	strb	r2, [r3, #0]
		}
		/* Check stable state */
		if((Reg0[i] == Reg1[i]) && (Reg1[i] == Reg2[i])){
 8000204:	4a2e      	ldr	r2, [pc, #184]	; (80002c0 <button_reading+0x174>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	781a      	ldrb	r2, [r3, #0]
 800020c:	492a      	ldr	r1, [pc, #168]	; (80002b8 <button_reading+0x16c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	440b      	add	r3, r1
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d143      	bne.n	80002a0 <button_reading+0x154>
 8000218:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <button_reading+0x16c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	781a      	ldrb	r2, [r3, #0]
 8000220:	4926      	ldr	r1, [pc, #152]	; (80002bc <button_reading+0x170>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	440b      	add	r3, r1
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	429a      	cmp	r2, r3
 800022a:	d139      	bne.n	80002a0 <button_reading+0x154>
			if(Reg3[i] != Reg2[i]){
 800022c:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <button_reading+0x184>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4413      	add	r3, r2
 8000232:	781a      	ldrb	r2, [r3, #0]
 8000234:	4921      	ldr	r1, [pc, #132]	; (80002bc <button_reading+0x170>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	440b      	add	r3, r1
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d018      	beq.n	8000272 <button_reading+0x126>
				Reg3[i] = Reg2[i];
 8000240:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <button_reading+0x170>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4413      	add	r3, r2
 8000246:	7819      	ldrb	r1, [r3, #0]
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <button_reading+0x184>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4413      	add	r3, r2
 800024e:	460a      	mov	r2, r1
 8000250:	701a      	strb	r2, [r3, #0]
				if(Reg2[i] == PRESSED){
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <button_reading+0x170>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d120      	bne.n	80002a0 <button_reading+0x154>
					/* Button is pressed set flag */
					buttonPressed_flag[i] = 1;
 800025e:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <button_reading+0x188>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
					TimerForKeyPress = 300;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <button_reading+0x18c>)
 800026a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	e016      	b.n	80002a0 <button_reading+0x154>
				}
			}
			else{
				/* Long-press handle*/
				if(Reg2[i] == PRESSED){
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <button_reading+0x170>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d110      	bne.n	80002a0 <button_reading+0x154>
					TimerForKeyPress--;
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <button_reading+0x18c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3b01      	subs	r3, #1
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <button_reading+0x18c>)
 8000286:	6013      	str	r3, [r2, #0]
					if(TimerForKeyPress == 0){
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <button_reading+0x18c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d107      	bne.n	80002a0 <button_reading+0x154>
						buttonPressed_flag[i] = 1;
 8000290:	4a10      	ldr	r2, [pc, #64]	; (80002d4 <button_reading+0x188>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4413      	add	r3, r2
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
						TimerForKeyPress = 100;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <button_reading+0x18c>)
 800029c:	2264      	movs	r2, #100	; 0x64
 800029e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	f77f af55 	ble.w	8000158 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200000c4 	.word	0x200000c4
 80002bc:	200000c8 	.word	0x200000c8
 80002c0:	200000c0 	.word	0x200000c0
 80002c4:	20000004 	.word	0x20000004
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	200000bc 	.word	0x200000bc
 80002d4:	200000d0 	.word	0x200000d0
 80002d8:	20000000 	.word	0x20000000

080002dc <FSM_Buzzer>:
 *      Author: Minh Duc Quach
 */

#include "buzzer.h"

void FSM_Buzzer(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	/* If Pedestrian button is pressed and the pedestrian is allowed to cross the road */
	if(FSM_Pedestrian_State == WORK && FSM_Traffic_Light_State_Row == AUTO_RED){
 80002e0:	4b3f      	ldr	r3, [pc, #252]	; (80003e0 <FSM_Buzzer+0x104>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d158      	bne.n	800039a <FSM_Buzzer+0xbe>
 80002e8:	4b3e      	ldr	r3, [pc, #248]	; (80003e4 <FSM_Buzzer+0x108>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d154      	bne.n	800039a <FSM_Buzzer+0xbe>
		switch (FSM_Buzzer_State){
 80002f0:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <FSM_Buzzer+0x10c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d020      	beq.n	800033a <FSM_Buzzer+0x5e>
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d148      	bne.n	800038e <FSM_Buzzer+0xb2>
		case ON:
			/* Turn on Buzzer */
			if(timer4Flag == 1){
 80002fc:	4b3b      	ldr	r3, [pc, #236]	; (80003ec <FSM_Buzzer+0x110>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d146      	bne.n	8000392 <FSM_Buzzer+0xb6>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Increase_Duty_Cycle);		// set buzzer volume
 8000304:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <FSM_Buzzer+0x114>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b3a      	ldr	r3, [pc, #232]	; (80003f4 <FSM_Buzzer+0x118>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	635a      	str	r2, [r3, #52]	; 0x34
				Increase_Duty_Cycle += 50;
 800030e:	4b38      	ldr	r3, [pc, #224]	; (80003f0 <FSM_Buzzer+0x114>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3332      	adds	r3, #50	; 0x32
 8000314:	4a36      	ldr	r2, [pc, #216]	; (80003f0 <FSM_Buzzer+0x114>)
 8000316:	6013      	str	r3, [r2, #0]
				if(Increase_Duty_Cycle >= 999){											// 999 is the maximum period
 8000318:	4b35      	ldr	r3, [pc, #212]	; (80003f0 <FSM_Buzzer+0x114>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000320:	4293      	cmp	r3, r2
 8000322:	dd03      	ble.n	800032c <FSM_Buzzer+0x50>
					Increase_Duty_Cycle = 989;
 8000324:	4b32      	ldr	r3, [pc, #200]	; (80003f0 <FSM_Buzzer+0x114>)
 8000326:	f240 32dd 	movw	r2, #989	; 0x3dd
 800032a:	601a      	str	r2, [r3, #0]
				}
				FSM_Buzzer_State = OFF;
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <FSM_Buzzer+0x10c>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
				/* The buzzer is ON for DURATION_ON_TIME * TICK ms */
				setTimer4(DURATION_ON_TIME * TICK);
 8000332:	200a      	movs	r0, #10
 8000334:	f001 f908 	bl	8001548 <setTimer4>
			}
			break;
 8000338:	e02b      	b.n	8000392 <FSM_Buzzer+0xb6>
		case OFF:
			if(timer4Flag == 1){
 800033a:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <FSM_Buzzer+0x110>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d129      	bne.n	8000396 <FSM_Buzzer+0xba>
				FSM_Buzzer_State = ON;
 8000342:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <FSM_Buzzer+0x10c>)
 8000344:	2201      	movs	r2, #1
 8000346:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);						// turn off buzzer
 8000348:	4b2a      	ldr	r3, [pc, #168]	; (80003f4 <FSM_Buzzer+0x118>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
				/* If the OFF duration is small enough, stop decreasing OFF duration and keep it at TICK ms */
				if(red_time*TICK*100 <= Increase_Speed){
 8000350:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <FSM_Buzzer+0x11c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2264      	movs	r2, #100	; 0x64
 8000356:	fb02 f203 	mul.w	r2, r2, r3
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <FSM_Buzzer+0x120>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	dc03      	bgt.n	800036a <FSM_Buzzer+0x8e>
					setTimer4(1*TICK);
 8000362:	2001      	movs	r0, #1
 8000364:	f001 f8f0 	bl	8001548 <setTimer4>
					break;
 8000368:	e016      	b.n	8000398 <FSM_Buzzer+0xbc>
				}
				Increase_Speed += 4;
 800036a:	4b24      	ldr	r3, [pc, #144]	; (80003fc <FSM_Buzzer+0x120>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3304      	adds	r3, #4
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <FSM_Buzzer+0x120>)
 8000372:	6013      	str	r3, [r2, #0]
				/* Increase the beeping frequency by decreasing buzzer's OFF duration */
				setTimer4(red_time*TICK*100/Increase_Speed);
 8000374:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <FSM_Buzzer+0x11c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2264      	movs	r2, #100	; 0x64
 800037a:	fb02 f203 	mul.w	r2, r2, r3
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <FSM_Buzzer+0x120>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	fb92 f3f3 	sdiv	r3, r2, r3
 8000386:	4618      	mov	r0, r3
 8000388:	f001 f8de 	bl	8001548 <setTimer4>
			}
			break;
 800038c:	e003      	b.n	8000396 <FSM_Buzzer+0xba>
		default:
			break;
 800038e:	bf00      	nop
 8000390:	e023      	b.n	80003da <FSM_Buzzer+0xfe>
			break;
 8000392:	bf00      	nop
 8000394:	e021      	b.n	80003da <FSM_Buzzer+0xfe>
			break;
 8000396:	bf00      	nop
		switch (FSM_Buzzer_State){
 8000398:	e01f      	b.n	80003da <FSM_Buzzer+0xfe>
		}
	}
	/* If Pedestrian button is pressed and the pedestrian is not allowed to cross the road */
	else if(FSM_Pedestrian_State == WORK && FSM_Traffic_Light_State_Row != AUTO_RED){
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <FSM_Buzzer+0x104>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d10f      	bne.n	80003c2 <FSM_Buzzer+0xe6>
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <FSM_Buzzer+0x108>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d00b      	beq.n	80003c2 <FSM_Buzzer+0xe6>
		/* Reset all */
		Increase_Duty_Cycle = 99;		// initial volume
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <FSM_Buzzer+0x114>)
 80003ac:	2263      	movs	r2, #99	; 0x63
 80003ae:	601a      	str	r2, [r3, #0]
		Increase_Speed = red_time;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <FSM_Buzzer+0x11c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <FSM_Buzzer+0x120>)
 80003b6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <FSM_Buzzer+0x118>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2200      	movs	r2, #0
 80003be:	635a      	str	r2, [r3, #52]	; 0x34
 80003c0:	e00b      	b.n	80003da <FSM_Buzzer+0xfe>
	}
	/* Other cases */
	else{
		Increase_Duty_Cycle = 99;		// initial volume
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <FSM_Buzzer+0x114>)
 80003c4:	2263      	movs	r2, #99	; 0x63
 80003c6:	601a      	str	r2, [r3, #0]
		Increase_Speed = red_time;
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <FSM_Buzzer+0x11c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <FSM_Buzzer+0x120>)
 80003ce:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <FSM_Buzzer+0x118>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2200      	movs	r2, #0
 80003d6:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200000d8 	.word	0x200000d8
 80003e4:	200000d4 	.word	0x200000d4
 80003e8:	200000dc 	.word	0x200000dc
 80003ec:	200000fc 	.word	0x200000fc
 80003f0:	20000010 	.word	0x20000010
 80003f4:	20000114 	.word	0x20000114
 80003f8:	20000018 	.word	0x20000018
 80003fc:	20000014 	.word	0x20000014

08000400 <display_traffic_light>:
 *      Author: LENOVO
 */

#include "display_traffic_light.h"

void display_traffic_light(){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row){
 8000404:	4b84      	ldr	r3, [pc, #528]	; (8000618 <display_traffic_light+0x218>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b09      	cmp	r3, #9
 800040a:	f200 80a1 	bhi.w	8000550 <display_traffic_light+0x150>
 800040e:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <display_traffic_light+0x14>)
 8000410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000414:	0800043d 	.word	0x0800043d
 8000418:	08000499 	.word	0x08000499
 800041c:	080004f5 	.word	0x080004f5
 8000420:	08000455 	.word	0x08000455
 8000424:	080004b1 	.word	0x080004b1
 8000428:	0800050d 	.word	0x0800050d
 800042c:	08000551 	.word	0x08000551
 8000430:	0800046d 	.word	0x0800046d
 8000434:	080004c9 	.word	0x080004c9
 8000438:	08000525 	.word	0x08000525
	case AUTO_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000442:	4876      	ldr	r0, [pc, #472]	; (800061c <display_traffic_light+0x21c>)
 8000444:	f001 fd31 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2108      	movs	r1, #8
 800044c:	4874      	ldr	r0, [pc, #464]	; (8000620 <display_traffic_light+0x220>)
 800044e:	f001 fd2c 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 8000452:	e088      	b.n	8000566 <display_traffic_light+0x166>
	case MANUAL_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045a:	4870      	ldr	r0, [pc, #448]	; (800061c <display_traffic_light+0x21c>)
 800045c:	f001 fd25 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2108      	movs	r1, #8
 8000464:	486e      	ldr	r0, [pc, #440]	; (8000620 <display_traffic_light+0x220>)
 8000466:	f001 fd20 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 800046a:	e07c      	b.n	8000566 <display_traffic_light+0x166>
	case SET_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000472:	486a      	ldr	r0, [pc, #424]	; (800061c <display_traffic_light+0x21c>)
 8000474:	f001 fd19 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2108      	movs	r1, #8
 800047c:	4868      	ldr	r0, [pc, #416]	; (8000620 <display_traffic_light+0x220>)
 800047e:	f001 fd14 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	2120      	movs	r1, #32
 8000486:	4866      	ldr	r0, [pc, #408]	; (8000620 <display_traffic_light+0x220>)
 8000488:	f001 fd0f 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	4863      	ldr	r0, [pc, #396]	; (8000620 <display_traffic_light+0x220>)
 8000492:	f001 fd0a 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 8000496:	e066      	b.n	8000566 <display_traffic_light+0x166>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049e:	485f      	ldr	r0, [pc, #380]	; (800061c <display_traffic_light+0x21c>)
 80004a0:	f001 fd03 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2108      	movs	r1, #8
 80004a8:	485d      	ldr	r0, [pc, #372]	; (8000620 <display_traffic_light+0x220>)
 80004aa:	f001 fcfe 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 80004ae:	e05a      	b.n	8000566 <display_traffic_light+0x166>
	case MANUAL_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b6:	4859      	ldr	r0, [pc, #356]	; (800061c <display_traffic_light+0x21c>)
 80004b8:	f001 fcf7 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4857      	ldr	r0, [pc, #348]	; (8000620 <display_traffic_light+0x220>)
 80004c2:	f001 fcf2 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 80004c6:	e04e      	b.n	8000566 <display_traffic_light+0x166>
	case SET_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ce:	4853      	ldr	r0, [pc, #332]	; (800061c <display_traffic_light+0x21c>)
 80004d0:	f001 fceb 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4851      	ldr	r0, [pc, #324]	; (8000620 <display_traffic_light+0x220>)
 80004da:	f001 fce6 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	484f      	ldr	r0, [pc, #316]	; (8000620 <display_traffic_light+0x220>)
 80004e4:	f001 fce1 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2110      	movs	r1, #16
 80004ec:	484c      	ldr	r0, [pc, #304]	; (8000620 <display_traffic_light+0x220>)
 80004ee:	f001 fcdc 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 80004f2:	e038      	b.n	8000566 <display_traffic_light+0x166>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	4848      	ldr	r0, [pc, #288]	; (800061c <display_traffic_light+0x21c>)
 80004fc:	f001 fcd5 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2108      	movs	r1, #8
 8000504:	4846      	ldr	r0, [pc, #280]	; (8000620 <display_traffic_light+0x220>)
 8000506:	f001 fcd0 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 800050a:	e02c      	b.n	8000566 <display_traffic_light+0x166>
	case MANUAL_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000512:	4842      	ldr	r0, [pc, #264]	; (800061c <display_traffic_light+0x21c>)
 8000514:	f001 fcc9 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2108      	movs	r1, #8
 800051c:	4840      	ldr	r0, [pc, #256]	; (8000620 <display_traffic_light+0x220>)
 800051e:	f001 fcc4 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 8000522:	e020      	b.n	8000566 <display_traffic_light+0x166>
	case SET_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052a:	483c      	ldr	r0, [pc, #240]	; (800061c <display_traffic_light+0x21c>)
 800052c:	f001 fcbd 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2108      	movs	r1, #8
 8000534:	483a      	ldr	r0, [pc, #232]	; (8000620 <display_traffic_light+0x220>)
 8000536:	f001 fcb8 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2120      	movs	r1, #32
 800053e:	4838      	ldr	r0, [pc, #224]	; (8000620 <display_traffic_light+0x220>)
 8000540:	f001 fcb3 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4835      	ldr	r0, [pc, #212]	; (8000620 <display_traffic_light+0x220>)
 800054a:	f001 fcae 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 800054e:	e00a      	b.n	8000566 <display_traffic_light+0x166>
	default:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000556:	4831      	ldr	r0, [pc, #196]	; (800061c <display_traffic_light+0x21c>)
 8000558:	f001 fca7 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	482f      	ldr	r0, [pc, #188]	; (8000620 <display_traffic_light+0x220>)
 8000562:	f001 fca2 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	switch (FSM_Traffic_Light_State_Col){
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <display_traffic_light+0x224>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b05      	cmp	r3, #5
 800056c:	d850      	bhi.n	8000610 <display_traffic_light+0x210>
 800056e:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <display_traffic_light+0x174>)
 8000570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000574:	0800058d 	.word	0x0800058d
 8000578:	080005b9 	.word	0x080005b9
 800057c:	080005e5 	.word	0x080005e5
 8000580:	080005a3 	.word	0x080005a3
 8000584:	080005cf 	.word	0x080005cf
 8000588:	080005fb 	.word	0x080005fb
	case AUTO_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2120      	movs	r1, #32
 8000590:	4823      	ldr	r0, [pc, #140]	; (8000620 <display_traffic_light+0x220>)
 8000592:	f001 fc8a 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4821      	ldr	r0, [pc, #132]	; (8000620 <display_traffic_light+0x220>)
 800059c:	f001 fc85 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 80005a0:	e037      	b.n	8000612 <display_traffic_light+0x212>
	case MANUAL_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <display_traffic_light+0x220>)
 80005a8:	f001 fc7f 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2110      	movs	r1, #16
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <display_traffic_light+0x220>)
 80005b2:	f001 fc7a 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 80005b6:	e02c      	b.n	8000612 <display_traffic_light+0x212>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2120      	movs	r1, #32
 80005bc:	4818      	ldr	r0, [pc, #96]	; (8000620 <display_traffic_light+0x220>)
 80005be:	f001 fc74 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2110      	movs	r1, #16
 80005c6:	4816      	ldr	r0, [pc, #88]	; (8000620 <display_traffic_light+0x220>)
 80005c8:	f001 fc6f 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 80005cc:	e021      	b.n	8000612 <display_traffic_light+0x212>
	case MANUAL_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	4813      	ldr	r0, [pc, #76]	; (8000620 <display_traffic_light+0x220>)
 80005d4:	f001 fc69 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2110      	movs	r1, #16
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <display_traffic_light+0x220>)
 80005de:	f001 fc64 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 80005e2:	e016      	b.n	8000612 <display_traffic_light+0x212>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <display_traffic_light+0x220>)
 80005ea:	f001 fc5e 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <display_traffic_light+0x220>)
 80005f4:	f001 fc59 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 80005f8:	e00b      	b.n	8000612 <display_traffic_light+0x212>
	case MANUAL_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2120      	movs	r1, #32
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <display_traffic_light+0x220>)
 8000600:	f001 fc53 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <display_traffic_light+0x220>)
 800060a:	f001 fc4e 	bl	8001eaa <HAL_GPIO_WritePin>
		break;
 800060e:	e000      	b.n	8000612 <display_traffic_light+0x212>
	default:
		break;
 8000610:	bf00      	nop
	}
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000d4 	.word	0x200000d4
 800061c:	40010800 	.word	0x40010800
 8000620:	40010c00 	.word	0x40010c00
 8000624:	2000000c 	.word	0x2000000c

08000628 <FSM_Pedestrian>:
 *      Author: duchu
 */

#include "fsm_pedestrian.h"

void FSM_Pedestrian(){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    switch(FSM_Pedestrian_State){
 800062c:	4b45      	ldr	r3, [pc, #276]	; (8000744 <FSM_Pedestrian+0x11c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <FSM_Pedestrian+0x12>
 8000634:	2b01      	cmp	r3, #1
 8000636:	d023      	beq.n	8000680 <FSM_Pedestrian+0x58>
        default:
            break;
        }
        break;
    default:
        break;
 8000638:	e081      	b.n	800073e <FSM_Pedestrian+0x116>
        HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000640:	4841      	ldr	r0, [pc, #260]	; (8000748 <FSM_Pedestrian+0x120>)
 8000642:	f001 fc32 	bl	8001eaa <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	483f      	ldr	r0, [pc, #252]	; (800074c <FSM_Pedestrian+0x124>)
 800064e:	f001 fc2c 	bl	8001eaa <HAL_GPIO_WritePin>
        if(buttonPressed_flag[3]){
 8000652:	4b3f      	ldr	r3, [pc, #252]	; (8000750 <FSM_Pedestrian+0x128>)
 8000654:	78db      	ldrb	r3, [r3, #3]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d070      	beq.n	800073c <FSM_Pedestrian+0x114>
            buttonPressed_flag[3] = 0;
 800065a:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <FSM_Pedestrian+0x128>)
 800065c:	2200      	movs	r2, #0
 800065e:	70da      	strb	r2, [r3, #3]
            FSM_Pedestrian_State = WORK;
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <FSM_Pedestrian+0x11c>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
            FSM_Buzzer_State = ON;
 8000666:	4b3b      	ldr	r3, [pc, #236]	; (8000754 <FSM_Pedestrian+0x12c>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
            setTimer4(1*TICK);									// buzzer timer
 800066c:	2001      	movs	r0, #1
 800066e:	f000 ff6b 	bl	8001548 <setTimer4>
            setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);		// pedestrian mode timer, set to 2 cycles of RED + YELLOW + GREEN
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <FSM_Pedestrian+0x130>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f000 ff51 	bl	8001520 <setTimer3>
        break;
 800067e:	e05d      	b.n	800073c <FSM_Pedestrian+0x114>
        if(timer3Flag == 1 || FSM_Traffic_Light_State_Row == SET_GREEN
 8000680:	4b36      	ldr	r3, [pc, #216]	; (800075c <FSM_Pedestrian+0x134>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d017      	beq.n	80006b8 <FSM_Pedestrian+0x90>
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <FSM_Pedestrian+0x138>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b08      	cmp	r3, #8
 800068e:	d013      	beq.n	80006b8 <FSM_Pedestrian+0x90>
        	|| FSM_Traffic_Light_State_Row == SET_RED || FSM_Traffic_Light_State_Row == SET_YEL
 8000690:	4b33      	ldr	r3, [pc, #204]	; (8000760 <FSM_Pedestrian+0x138>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b07      	cmp	r3, #7
 8000696:	d00f      	beq.n	80006b8 <FSM_Pedestrian+0x90>
 8000698:	4b31      	ldr	r3, [pc, #196]	; (8000760 <FSM_Pedestrian+0x138>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b09      	cmp	r3, #9
 800069e:	d00b      	beq.n	80006b8 <FSM_Pedestrian+0x90>
			|| FSM_Traffic_Light_State_Row == MANUAL_RED || FSM_Traffic_Light_State_Row == MANUAL_YEL
 80006a0:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <FSM_Pedestrian+0x138>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d007      	beq.n	80006b8 <FSM_Pedestrian+0x90>
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <FSM_Pedestrian+0x138>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b05      	cmp	r3, #5
 80006ae:	d003      	beq.n	80006b8 <FSM_Pedestrian+0x90>
			|| FSM_Traffic_Light_State_Row == MANUAL_GREEN){	// 2 cycles passed without pressing the button or MODE changed to SET or MANUAL
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <FSM_Pedestrian+0x138>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d103      	bne.n	80006c0 <FSM_Pedestrian+0x98>
            FSM_Pedestrian_State = IDLE;
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <FSM_Pedestrian+0x11c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
            break;
 80006be:	e03e      	b.n	800073e <FSM_Pedestrian+0x116>
        if(buttonPressed_flag[3]){	// the button is pressed before timeout
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <FSM_Pedestrian+0x128>)
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d005      	beq.n	80006d4 <FSM_Pedestrian+0xac>
            setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <FSM_Pedestrian+0x130>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 ff26 	bl	8001520 <setTimer3>
        switch (FSM_Traffic_Light_State_Col){
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <FSM_Pedestrian+0x13c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d020      	beq.n	800071e <FSM_Pedestrian+0xf6>
 80006dc:	2b02      	cmp	r3, #2
 80006de:	dc2b      	bgt.n	8000738 <FSM_Pedestrian+0x110>
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <FSM_Pedestrian+0xc2>
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d00d      	beq.n	8000704 <FSM_Pedestrian+0xdc>
            break;
 80006e8:	e026      	b.n	8000738 <FSM_Pedestrian+0x110>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f0:	4815      	ldr	r0, [pc, #84]	; (8000748 <FSM_Pedestrian+0x120>)
 80006f2:	f001 fbda 	bl	8001eaa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <FSM_Pedestrian+0x124>)
 80006fe:	f001 fbd4 	bl	8001eaa <HAL_GPIO_WritePin>
            break;
 8000702:	e01a      	b.n	800073a <FSM_Pedestrian+0x112>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070a:	480f      	ldr	r0, [pc, #60]	; (8000748 <FSM_Pedestrian+0x120>)
 800070c:	f001 fbcd 	bl	8001eaa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <FSM_Pedestrian+0x124>)
 8000718:	f001 fbc7 	bl	8001eaa <HAL_GPIO_WritePin>
            break;
 800071c:	e00d      	b.n	800073a <FSM_Pedestrian+0x112>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <FSM_Pedestrian+0x120>)
 8000726:	f001 fbc0 	bl	8001eaa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <FSM_Pedestrian+0x124>)
 8000732:	f001 fbba 	bl	8001eaa <HAL_GPIO_WritePin>
            break;
 8000736:	e000      	b.n	800073a <FSM_Pedestrian+0x112>
            break;
 8000738:	bf00      	nop
        break;
 800073a:	e000      	b.n	800073e <FSM_Pedestrian+0x116>
        break;
 800073c:	bf00      	nop
    }
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000d8 	.word	0x200000d8
 8000748:	40010c00 	.word	0x40010c00
 800074c:	40010800 	.word	0x40010800
 8000750:	200000d0 	.word	0x200000d0
 8000754:	200000dc 	.word	0x200000dc
 8000758:	2000002c 	.word	0x2000002c
 800075c:	200000f4 	.word	0x200000f4
 8000760:	200000d4 	.word	0x200000d4
 8000764:	2000000c 	.word	0x2000000c

08000768 <resetAllButtonState>:

#include "fsm_traffic_light.h"

int To_Default_State = 0;		// used to set COL traffic state

void resetAllButtonState(){		// reset buttons
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	e007      	b.n	8000784 <resetAllButtonState+0x1c>
		buttonPressed_flag[i] = 0;
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <resetAllButtonState+0x30>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3301      	adds	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b03      	cmp	r3, #3
 8000788:	ddf4      	ble.n	8000774 <resetAllButtonState+0xc>
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200000d0 	.word	0x200000d0

0800079c <changeTime>:

void changeTime(){				// change traffic time
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	Set_TL_Time++;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <changeTime+0x24>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <changeTime+0x24>)
 80007a8:	6013      	str	r3, [r2, #0]
	if(Set_TL_Time >= 100){		// 1 <= time <= 99
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <changeTime+0x24>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b63      	cmp	r3, #99	; 0x63
 80007b0:	dd02      	ble.n	80007b8 <changeTime+0x1c>
		Set_TL_Time = 1;
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <changeTime+0x24>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	601a      	str	r2, [r3, #0]
	}
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000100 	.word	0x20000100

080007c4 <FSM_Traffic_Light_Row>:

void FSM_Traffic_Light_Row(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row) {
 80007c8:	4ba6      	ldr	r3, [pc, #664]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b09      	cmp	r3, #9
 80007ce:	f200 8289 	bhi.w	8000ce4 <FSM_Traffic_Light_Row+0x520>
 80007d2:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <FSM_Traffic_Light_Row+0x14>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	08000801 	.word	0x08000801
 80007dc:	08000887 	.word	0x08000887
 80007e0:	0800090d 	.word	0x0800090d
 80007e4:	08000bc9 	.word	0x08000bc9
 80007e8:	08000c29 	.word	0x08000c29
 80007ec:	08000c87 	.word	0x08000c87
 80007f0:	08000ce5 	.word	0x08000ce5
 80007f4:	08000993 	.word	0x08000993
 80007f8:	08000a3d 	.word	0x08000a3d
 80007fc:	08000b13 	.word	0x08000b13
	/* AUTO MODE */
	case AUTO_RED:
		if(timer1Flag == 1){
 8000800:	4b99      	ldr	r3, [pc, #612]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d114      	bne.n	8000832 <FSM_Traffic_Light_Row+0x6e>
			/* Count down time */
			traffic_light_remain_time_row--;
 8000808:	4b98      	ldr	r3, [pc, #608]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3b01      	subs	r3, #1
 800080e:	4a97      	ldr	r2, [pc, #604]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000810:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 8000812:	4b96      	ldr	r3, [pc, #600]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d106      	bne.n	8000828 <FSM_Traffic_Light_Row+0x64>
				/* Move to next state */
				FSM_Traffic_Light_State_Row = AUTO_GREEN;
 800081a:	4b92      	ldr	r3, [pc, #584]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = green_time;
 8000820:	4b93      	ldr	r3, [pc, #588]	; (8000a70 <FSM_Traffic_Light_Row+0x2ac>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a91      	ldr	r2, [pc, #580]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000826:	6013      	str	r3, [r2, #0]
			}

			uart_transmit();
 8000828:	f000 fef8 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 800082c:	2064      	movs	r0, #100	; 0x64
 800082e:	f000 fe4f 	bl	80014d0 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 8000832:	4b90      	ldr	r3, [pc, #576]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d014      	beq.n	8000864 <FSM_Traffic_Light_Row+0xa0>
			buttonPressed_flag[0] = 0;
 800083a:	4b8e      	ldr	r3, [pc, #568]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000840:	4b8d      	ldr	r3, [pc, #564]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a8d      	ldr	r2, [pc, #564]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 8000846:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 8000848:	4b86      	ldr	r3, [pc, #536]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 800084a:	2207      	movs	r2, #7
 800084c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 800084e:	4b8c      	ldr	r3, [pc, #560]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 8000850:	2206      	movs	r2, #6
 8000852:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000854:	f000 fee2 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085c:	f000 fe38 	bl	80014d0 <setTimer1>
			resetAllButtonState();
 8000860:	f7ff ff82 	bl	8000768 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 8000864:	4b83      	ldr	r3, [pc, #524]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000866:	785b      	ldrb	r3, [r3, #1]
 8000868:	2b00      	cmp	r3, #0
 800086a:	f000 823d 	beq.w	8000ce8 <FSM_Traffic_Light_Row+0x524>
			buttonPressed_flag[1] = 0;
 800086e:	4b81      	ldr	r3, [pc, #516]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000870:	2200      	movs	r2, #0
 8000872:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 8000874:	4b7b      	ldr	r3, [pc, #492]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000876:	2203      	movs	r2, #3
 8000878:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 800087a:	4b81      	ldr	r3, [pc, #516]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 800087c:	2204      	movs	r2, #4
 800087e:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000880:	f7ff ff72 	bl	8000768 <resetAllButtonState>
		}
		break;
 8000884:	e230      	b.n	8000ce8 <FSM_Traffic_Light_Row+0x524>
	case AUTO_GREEN:
		if(timer1Flag == 1){
 8000886:	4b78      	ldr	r3, [pc, #480]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d114      	bne.n	80008b8 <FSM_Traffic_Light_Row+0xf4>
			/* Count down time */
			traffic_light_remain_time_row--;
 800088e:	4b77      	ldr	r3, [pc, #476]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a75      	ldr	r2, [pc, #468]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000896:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 8000898:	4b74      	ldr	r3, [pc, #464]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d106      	bne.n	80008ae <FSM_Traffic_Light_Row+0xea>
				/* Move to next state */
				FSM_Traffic_Light_State_Row = AUTO_YEL;
 80008a0:	4b70      	ldr	r3, [pc, #448]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = yellow_time;
 80008a6:	4b77      	ldr	r3, [pc, #476]	; (8000a84 <FSM_Traffic_Light_Row+0x2c0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a70      	ldr	r2, [pc, #448]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 80008ac:	6013      	str	r3, [r2, #0]
			}
			uart_transmit();
 80008ae:	f000 feb5 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80008b2:	2064      	movs	r0, #100	; 0x64
 80008b4:	f000 fe0c 	bl	80014d0 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 80008b8:	4b6e      	ldr	r3, [pc, #440]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d014      	beq.n	80008ea <FSM_Traffic_Light_Row+0x126>
			buttonPressed_flag[0] = 0;
 80008c0:	4b6c      	ldr	r3, [pc, #432]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 80008c6:	4b6c      	ldr	r3, [pc, #432]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a6c      	ldr	r2, [pc, #432]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 80008cc:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 80008ce:	4b65      	ldr	r3, [pc, #404]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 80008d4:	4b6a      	ldr	r3, [pc, #424]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 80008d6:	2206      	movs	r2, #6
 80008d8:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80008da:	f000 fe9f 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80008de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e2:	f000 fdf5 	bl	80014d0 <setTimer1>
			resetAllButtonState();
 80008e6:	f7ff ff3f 	bl	8000768 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 80008ea:	4b62      	ldr	r3, [pc, #392]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 81fc 	beq.w	8000cec <FSM_Traffic_Light_Row+0x528>
			buttonPressed_flag[1] = 0;
 80008f4:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 80008fa:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80008fc:	2203      	movs	r2, #3
 80008fe:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000900:	4b5f      	ldr	r3, [pc, #380]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 8000902:	2204      	movs	r2, #4
 8000904:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000906:	f7ff ff2f 	bl	8000768 <resetAllButtonState>
		}
		break;
 800090a:	e1ef      	b.n	8000cec <FSM_Traffic_Light_Row+0x528>
	case AUTO_YEL:
		if(timer1Flag == 1){
 800090c:	4b56      	ldr	r3, [pc, #344]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d114      	bne.n	800093e <FSM_Traffic_Light_Row+0x17a>
			/* Count down time */
			traffic_light_remain_time_row--;
 8000914:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 800091c:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 800091e:	4b53      	ldr	r3, [pc, #332]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d106      	bne.n	8000934 <FSM_Traffic_Light_Row+0x170>
				/* Move to next state*/
				FSM_Traffic_Light_State_Row = AUTO_RED;
 8000926:	4b4f      	ldr	r3, [pc, #316]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = red_time;
 800092c:	4b52      	ldr	r3, [pc, #328]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a4e      	ldr	r2, [pc, #312]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000932:	6013      	str	r3, [r2, #0]
			}
			uart_transmit();
 8000934:	f000 fe72 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000938:	2064      	movs	r0, #100	; 0x64
 800093a:	f000 fdc9 	bl	80014d0 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 800093e:	4b4d      	ldr	r3, [pc, #308]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d014      	beq.n	8000970 <FSM_Traffic_Light_Row+0x1ac>
			buttonPressed_flag[0] = 0;
 8000946:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 800094c:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a4a      	ldr	r2, [pc, #296]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 8000952:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 8000954:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000956:	2207      	movs	r2, #7
 8000958:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 800095c:	2206      	movs	r2, #6
 800095e:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000960:	f000 fe5c 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000968:	f000 fdb2 	bl	80014d0 <setTimer1>
			resetAllButtonState();
 800096c:	f7ff fefc 	bl	8000768 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 8000970:	4b40      	ldr	r3, [pc, #256]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 81bb 	beq.w	8000cf0 <FSM_Traffic_Light_Row+0x52c>
			buttonPressed_flag[1] = 0;
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 800097c:	2200      	movs	r2, #0
 800097e:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 8000980:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000982:	2203      	movs	r2, #3
 8000984:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 8000988:	2204      	movs	r2, #4
 800098a:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 800098c:	f7ff feec 	bl	8000768 <resetAllButtonState>
		}
		break;
 8000990:	e1ae      	b.n	8000cf0 <FSM_Traffic_Light_Row+0x52c>

	/* SET MODE */
	case SET_RED:
		if(timer1Flag == 1){
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d10f      	bne.n	80009ba <FSM_Traffic_Light_Row+0x1f6>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 80009a0:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 80009a6:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 80009a8:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <FSM_Traffic_Light_Row+0x2c4>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80009ae:	f000 fe35 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f000 fd8c 	bl	80014d0 <setTimer1>
			break;
 80009b8:	e1a7      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		}
		if(buttonPressed_flag[0]){
 80009ba:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00f      	beq.n	80009e2 <FSM_Traffic_Light_Row+0x21e>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = green_time;
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <FSM_Traffic_Light_Row+0x2ac>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a2b      	ldr	r2, [pc, #172]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 80009ce:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_GREEN;
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80009d6:	f000 fe21 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80009da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009de:	f000 fd77 	bl	80014d0 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00a      	beq.n	8000a00 <FSM_Traffic_Light_Row+0x23c>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	705a      	strb	r2, [r3, #1]
			changeTime();
 80009f0:	f7ff fed4 	bl	800079c <changeTime>
			uart_transmit();
 80009f4:	f000 fe12 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 fd68 	bl	80014d0 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000a02:	789b      	ldrb	r3, [r3, #2]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 8175 	beq.w	8000cf4 <FSM_Traffic_Light_Row+0x530>
			/* Save value */
			buttonPressed_flag[2] = 0;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	709a      	strb	r2, [r3, #2]
			red_time = Set_TL_Time;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 8000a16:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <FSM_Traffic_Light_Row+0x2c0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	441a      	add	r2, r3
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <FSM_Traffic_Light_Row+0x2ac>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	2264      	movs	r2, #100	; 0x64
 8000a2a:	fb02 f303 	mul.w	r3, r2, r3
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <FSM_Traffic_Light_Row+0x2c8>)
 8000a30:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a36:	f000 fd4b 	bl	80014d0 <setTimer1>
		}
		break;
 8000a3a:	e15b      	b.n	8000cf4 <FSM_Traffic_Light_Row+0x530>
	case SET_GREEN:
		if(timer1Flag == 1){
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d125      	bne.n	8000a90 <FSM_Traffic_Light_Row+0x2cc>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <FSM_Traffic_Light_Row+0x2c4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000a56:	6013      	str	r3, [r2, #0]
			uart_transmit();
 8000a58:	f000 fde0 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f000 fd37 	bl	80014d0 <setTimer1>
			break;
 8000a62:	e152      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
 8000a64:	200000d4 	.word	0x200000d4
 8000a68:	200000e4 	.word	0x200000e4
 8000a6c:	20000024 	.word	0x20000024
 8000a70:	2000001c 	.word	0x2000001c
 8000a74:	200000d0 	.word	0x200000d0
 8000a78:	20000018 	.word	0x20000018
 8000a7c:	20000100 	.word	0x20000100
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	20000020 	.word	0x20000020
 8000a88:	200000cc 	.word	0x200000cc
 8000a8c:	2000002c 	.word	0x2000002c
		}
		if(buttonPressed_flag[0]){
 8000a90:	4b9f      	ldr	r3, [pc, #636]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00f      	beq.n	8000ab8 <FSM_Traffic_Light_Row+0x2f4>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 8000a98:	4b9d      	ldr	r3, [pc, #628]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = yellow_time;
 8000a9e:	4b9d      	ldr	r3, [pc, #628]	; (8000d14 <FSM_Traffic_Light_Row+0x550>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a9d      	ldr	r2, [pc, #628]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000aa4:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_YEL;
 8000aa6:	4b9d      	ldr	r3, [pc, #628]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000aa8:	2209      	movs	r2, #9
 8000aaa:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000aac:	f000 fdb6 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab4:	f000 fd0c 	bl	80014d0 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 8000ab8:	4b95      	ldr	r3, [pc, #596]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00a      	beq.n	8000ad6 <FSM_Traffic_Light_Row+0x312>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 8000ac0:	4b93      	ldr	r3, [pc, #588]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	705a      	strb	r2, [r3, #1]
			changeTime();
 8000ac6:	f7ff fe69 	bl	800079c <changeTime>
			uart_transmit();
 8000aca:	f000 fda7 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad2:	f000 fcfd 	bl	80014d0 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000ad6:	4b8e      	ldr	r3, [pc, #568]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000ad8:	789b      	ldrb	r3, [r3, #2]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 810c 	beq.w	8000cf8 <FSM_Traffic_Light_Row+0x534>
			/* Save value if button 2 is pressed*/
			buttonPressed_flag[2] = 0;
 8000ae0:	4b8b      	ldr	r3, [pc, #556]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	709a      	strb	r2, [r3, #2]
			green_time = Set_TL_Time;
 8000ae6:	4b8c      	ldr	r3, [pc, #560]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a8d      	ldr	r2, [pc, #564]	; (8000d20 <FSM_Traffic_Light_Row+0x55c>)
 8000aec:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000aee:	4b8d      	ldr	r3, [pc, #564]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b88      	ldr	r3, [pc, #544]	; (8000d14 <FSM_Traffic_Light_Row+0x550>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	441a      	add	r2, r3
 8000af8:	4b89      	ldr	r3, [pc, #548]	; (8000d20 <FSM_Traffic_Light_Row+0x55c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	2264      	movs	r2, #100	; 0x64
 8000b00:	fb02 f303 	mul.w	r3, r2, r3
 8000b04:	4a88      	ldr	r2, [pc, #544]	; (8000d28 <FSM_Traffic_Light_Row+0x564>)
 8000b06:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b0c:	f000 fce0 	bl	80014d0 <setTimer1>
		}
		break;
 8000b10:	e0f2      	b.n	8000cf8 <FSM_Traffic_Light_Row+0x534>
	case SET_YEL:
		if(timer1Flag == 1){
 8000b12:	4b86      	ldr	r3, [pc, #536]	; (8000d2c <FSM_Traffic_Light_Row+0x568>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d10f      	bne.n	8000b3a <FSM_Traffic_Light_Row+0x376>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000b1a:	4b80      	ldr	r3, [pc, #512]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 8000b20:	4b83      	ldr	r3, [pc, #524]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000b26:	4b7f      	ldr	r3, [pc, #508]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a82      	ldr	r2, [pc, #520]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000b2c:	6013      	str	r3, [r2, #0]
			uart_transmit();
 8000b2e:	f000 fd75 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f000 fccc 	bl	80014d0 <setTimer1>
			break;
 8000b38:	e0e7      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		}
		if(buttonPressed_flag[0]){
 8000b3a:	4b75      	ldr	r3, [pc, #468]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d015      	beq.n	8000b6e <FSM_Traffic_Light_Row+0x3aa>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 8000b42:	4b73      	ldr	r3, [pc, #460]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000b48:	4b76      	ldr	r3, [pc, #472]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a72      	ldr	r2, [pc, #456]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000b4e:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000b50:	4b74      	ldr	r3, [pc, #464]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a77      	ldr	r2, [pc, #476]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000b56:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000b58:	4b75      	ldr	r3, [pc, #468]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000b5e:	4b6f      	ldr	r3, [pc, #444]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000b64:	f000 fd5a 	bl	800161c <uart_transmit>

			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000b68:	2064      	movs	r0, #100	; 0x64
 8000b6a:	f000 fcb1 	bl	80014d0 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 8000b6e:	4b68      	ldr	r3, [pc, #416]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00a      	beq.n	8000b8c <FSM_Traffic_Light_Row+0x3c8>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 8000b76:	4b66      	ldr	r3, [pc, #408]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	705a      	strb	r2, [r3, #1]
			changeTime();
 8000b7c:	f7ff fe0e 	bl	800079c <changeTime>
			uart_transmit();
 8000b80:	f000 fd4c 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b88:	f000 fca2 	bl	80014d0 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000b8c:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b8e:	789b      	ldrb	r3, [r3, #2]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f000 80b3 	beq.w	8000cfc <FSM_Traffic_Light_Row+0x538>
			/* Save value if button 2 is pressed */
			buttonPressed_flag[2] = 0;
 8000b96:	4b5e      	ldr	r3, [pc, #376]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	709a      	strb	r2, [r3, #2]
			yellow_time = Set_TL_Time;
 8000b9c:	4b5e      	ldr	r3, [pc, #376]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a5c      	ldr	r2, [pc, #368]	; (8000d14 <FSM_Traffic_Light_Row+0x550>)
 8000ba2:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000ba4:	4b5f      	ldr	r3, [pc, #380]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <FSM_Traffic_Light_Row+0x550>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	441a      	add	r2, r3
 8000bae:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <FSM_Traffic_Light_Row+0x55c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	2264      	movs	r2, #100	; 0x64
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	4a5b      	ldr	r2, [pc, #364]	; (8000d28 <FSM_Traffic_Light_Row+0x564>)
 8000bbc:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc2:	f000 fc85 	bl	80014d0 <setTimer1>
		}
		break;
 8000bc6:	e099      	b.n	8000cfc <FSM_Traffic_Light_Row+0x538>

	/* MANUAL MODE */
	case MANUAL_RED:
		if(buttonPressed_flag[1]){
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000bca:	785b      	ldrb	r3, [r3, #1]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00c      	beq.n	8000bea <FSM_Traffic_Light_Row+0x426>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000bd0:	f000 fd24 	bl	800161c <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000bd4:	4b4e      	ldr	r3, [pc, #312]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_GREEN;
 8000bda:	4b50      	ldr	r3, [pc, #320]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_RED;
 8000be0:	4b55      	ldr	r3, [pc, #340]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000be2:	2203      	movs	r2, #3
 8000be4:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000be6:	f7ff fdbf 	bl	8000768 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000bea:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8086 	beq.w	8000d00 <FSM_Traffic_Light_Row+0x53c>
			/* Back to AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000bf4:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a46      	ldr	r2, [pc, #280]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000c00:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000c02:	4b48      	ldr	r3, [pc, #288]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a4b      	ldr	r2, [pc, #300]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000c08:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000c10:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000c16:	4b48      	ldr	r3, [pc, #288]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000c18:	2206      	movs	r2, #6
 8000c1a:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000c1c:	f000 fcfe 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000c20:	2064      	movs	r0, #100	; 0x64
 8000c22:	f000 fc55 	bl	80014d0 <setTimer1>
		}
		break;
 8000c26:	e06b      	b.n	8000d00 <FSM_Traffic_Light_Row+0x53c>
	case MANUAL_GREEN:
		if(buttonPressed_flag[1]){
 8000c28:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c2a:	785b      	ldrb	r3, [r3, #1]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00c      	beq.n	8000c4a <FSM_Traffic_Light_Row+0x486>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000c30:	f000 fcf4 	bl	800161c <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000c34:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_YEL;
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000c3c:	2205      	movs	r2, #5
 8000c3e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_YEL;
 8000c40:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000c42:	2205      	movs	r2, #5
 8000c44:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000c46:	f7ff fd8f 	bl	8000768 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d058      	beq.n	8000d04 <FSM_Traffic_Light_Row+0x540>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a2e      	ldr	r2, [pc, #184]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000c5e:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a33      	ldr	r2, [pc, #204]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000c66:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000c68:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000c76:	2206      	movs	r2, #6
 8000c78:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000c7a:	f000 fccf 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f000 fc26 	bl	80014d0 <setTimer1>
		}
		break;
 8000c84:	e03e      	b.n	8000d04 <FSM_Traffic_Light_Row+0x540>
	case MANUAL_YEL:
		if(buttonPressed_flag[1]){
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00c      	beq.n	8000ca8 <FSM_Traffic_Light_Row+0x4e4>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000c8e:	f000 fcc5 	bl	800161c <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000ca4:	f7ff fd60 	bl	8000768 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d02b      	beq.n	8000d08 <FSM_Traffic_Light_Row+0x544>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000cbc:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000cc4:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000cd4:	2206      	movs	r2, #6
 8000cd6:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000cd8:	f000 fca0 	bl	800161c <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000cdc:	2064      	movs	r0, #100	; 0x64
 8000cde:	f000 fbf7 	bl	80014d0 <setTimer1>
		}
		break;
 8000ce2:	e011      	b.n	8000d08 <FSM_Traffic_Light_Row+0x544>
	default:
		break;
 8000ce4:	bf00      	nop
 8000ce6:	e010      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000ce8:	bf00      	nop
 8000cea:	e00e      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cec:	bf00      	nop
 8000cee:	e00c      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cf0:	bf00      	nop
 8000cf2:	e00a      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cf4:	bf00      	nop
 8000cf6:	e008      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cf8:	bf00      	nop
 8000cfa:	e006      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cfc:	bf00      	nop
 8000cfe:	e004      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000d00:	bf00      	nop
 8000d02:	e002      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000d04:	bf00      	nop
 8000d06:	e000      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000d08:	bf00      	nop
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000d0 	.word	0x200000d0
 8000d14:	20000020 	.word	0x20000020
 8000d18:	20000100 	.word	0x20000100
 8000d1c:	200000d4 	.word	0x200000d4
 8000d20:	2000001c 	.word	0x2000001c
 8000d24:	20000018 	.word	0x20000018
 8000d28:	2000002c 	.word	0x2000002c
 8000d2c:	200000e4 	.word	0x200000e4
 8000d30:	200000cc 	.word	0x200000cc
 8000d34:	20000024 	.word	0x20000024
 8000d38:	2000000c 	.word	0x2000000c

08000d3c <FSM_Traffic_Light_Col>:

void FSM_Traffic_Light_Col(){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Col) {
 8000d40:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d86b      	bhi.n	8000e20 <FSM_Traffic_Light_Col+0xe4>
 8000d48:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <FSM_Traffic_Light_Col+0x14>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000d6d 	.word	0x08000d6d
 8000d54:	08000d9d 	.word	0x08000d9d
 8000d58:	08000dcd 	.word	0x08000dcd
 8000d5c:	08000e21 	.word	0x08000e21
 8000d60:	08000e21 	.word	0x08000e21
 8000d64:	08000e21 	.word	0x08000e21
 8000d68:	08000dfd 	.word	0x08000dfd
	/* The first three states are similar to ROW */
	case AUTO_RED:
		if(timer2Flag == 1){
 8000d6c:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <FSM_Traffic_Light_Col+0x100>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d157      	bne.n	8000e24 <FSM_Traffic_Light_Col+0xe8>
			traffic_light_remain_time_col--;
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	4a31      	ldr	r2, [pc, #196]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000d7c:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d106      	bne.n	8000d94 <FSM_Traffic_Light_Col+0x58>
				FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = green_time;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <FSM_Traffic_Light_Col+0x108>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2b      	ldr	r2, [pc, #172]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000d92:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	f000 fbaf 	bl	80014f8 <setTimer2>
		}
		break;
 8000d9a:	e043      	b.n	8000e24 <FSM_Traffic_Light_Col+0xe8>
	case AUTO_GREEN:
		if(timer2Flag == 1){
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <FSM_Traffic_Light_Col+0x100>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d141      	bne.n	8000e28 <FSM_Traffic_Light_Col+0xec>
			traffic_light_remain_time_col--;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000dac:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d106      	bne.n	8000dc4 <FSM_Traffic_Light_Col+0x88>
				FSM_Traffic_Light_State_Col = AUTO_YEL;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = yellow_time;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <FSM_Traffic_Light_Col+0x10c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000dc2:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000dc4:	2064      	movs	r0, #100	; 0x64
 8000dc6:	f000 fb97 	bl	80014f8 <setTimer2>
		}
		break;
 8000dca:	e02d      	b.n	8000e28 <FSM_Traffic_Light_Col+0xec>
	case AUTO_YEL:
		if(timer2Flag == 1){
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <FSM_Traffic_Light_Col+0x100>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d12b      	bne.n	8000e2c <FSM_Traffic_Light_Col+0xf0>
			traffic_light_remain_time_col--;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000ddc:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d106      	bne.n	8000df4 <FSM_Traffic_Light_Col+0xb8>
				FSM_Traffic_Light_State_Col = AUTO_RED;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = red_time;
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <FSM_Traffic_Light_Col+0x110>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000df2:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f000 fb7f 	bl	80014f8 <setTimer2>
		}
		break;
 8000dfa:	e017      	b.n	8000e2c <FSM_Traffic_Light_Col+0xf0>
	case BLACK_HOLE:
		/* This is trap state to force Col stop */
		if(To_Default_State == 1){
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <FSM_Traffic_Light_Col+0x114>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d115      	bne.n	8000e30 <FSM_Traffic_Light_Col+0xf4>
			To_Default_State = 0;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <FSM_Traffic_Light_Col+0x114>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_col = green_time;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <FSM_Traffic_Light_Col+0x108>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000e16:	6013      	str	r3, [r2, #0]
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000e18:	2064      	movs	r0, #100	; 0x64
 8000e1a:	f000 fb6d 	bl	80014f8 <setTimer2>
		}
		break;
 8000e1e:	e007      	b.n	8000e30 <FSM_Traffic_Light_Col+0xf4>
	default:
		break;
 8000e20:	bf00      	nop
 8000e22:	e006      	b.n	8000e32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e24:	bf00      	nop
 8000e26:	e004      	b.n	8000e32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e28:	bf00      	nop
 8000e2a:	e002      	b.n	8000e32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e2c:	bf00      	nop
 8000e2e:	e000      	b.n	8000e32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e30:	bf00      	nop
	}
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	200000ec 	.word	0x200000ec
 8000e40:	20000028 	.word	0x20000028
 8000e44:	2000001c 	.word	0x2000001c
 8000e48:	20000020 	.word	0x20000020
 8000e4c:	20000018 	.word	0x20000018
 8000e50:	200000cc 	.word	0x200000cc

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f000 fc6c 	bl	8001734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f824 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f000 f950 	bl	8001104 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e64:	f000 f862 	bl	8000f2c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e68:	f000 f922 	bl	80010b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e6c:	f000 f8aa 	bl	8000fc4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <main+0x4c>)
 8000e72:	f001 fc9d 	bl	80027b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e76:	2100      	movs	r1, #0
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <main+0x50>)
 8000e7a:	f001 fd43 	bl	8002904 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  SCH_Init();
  setTimer1(100);
 8000e7e:	2064      	movs	r0, #100	; 0x64
 8000e80:	f000 fb26 	bl	80014d0 <setTimer1>
  setTimer2(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f000 fb37 	bl	80014f8 <setTimer2>
//  SCH_Add_Task(FSM_Buzzer, 0, 1);
//  SCH_Add_Task(timerRun, 0, 1);
//  SCH_Add_Task(button_reading, 0, 1);
  while (1)
  {
	  FSM_Traffic_Light_Row();
 8000e8a:	f7ff fc9b 	bl	80007c4 <FSM_Traffic_Light_Row>
	  FSM_Traffic_Light_Col();
 8000e8e:	f7ff ff55 	bl	8000d3c <FSM_Traffic_Light_Col>
	  FSM_Pedestrian();
 8000e92:	f7ff fbc9 	bl	8000628 <FSM_Pedestrian>
	  display_traffic_light();
 8000e96:	f7ff fab3 	bl	8000400 <display_traffic_light>
	  FSM_Buzzer();
 8000e9a:	f7ff fa1f 	bl	80002dc <FSM_Buzzer>
	  FSM_Traffic_Light_Row();
 8000e9e:	e7f4      	b.n	8000e8a <main+0x36>
 8000ea0:	2000015c 	.word	0x2000015c
 8000ea4:	20000114 	.word	0x20000114

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b090      	sub	sp, #64	; 0x40
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	2228      	movs	r2, #40	; 0x28
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 f88a 	bl	8003fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ede:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fff7 	bl	8001edc <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ef4:	f000 f980 	bl	80011f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fa62 	bl	80023dc <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f1e:	f000 f96b 	bl	80011f8 <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3740      	adds	r7, #64	; 0x40
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_TIM2_Init+0x94>)
 8000f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_TIM2_Init+0x94>)
 8000f52:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_TIM2_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_TIM2_Init+0x94>)
 8000f60:	223f      	movs	r2, #63	; 0x3f
 8000f62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_TIM2_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_TIM2_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <MX_TIM2_Init+0x94>)
 8000f72:	f001 fbcd 	bl	8002710 <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f7c:	f000 f93c 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_TIM2_Init+0x94>)
 8000f8e:	f001 ff21 	bl	8002dd4 <HAL_TIM_ConfigClockSource>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f98:	f000 f92e 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_TIM2_Init+0x94>)
 8000faa:	f002 fa9f 	bl	80034ec <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb4:	f000 f920 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000015c 	.word	0x2000015c

08000fc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8000ff6:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <MX_TIM3_Init+0xe8>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8000ffc:	223f      	movs	r2, #63	; 0x3f
 8000ffe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001008:	f240 32e7 	movw	r2, #999	; 0x3e7
 800100c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800101a:	4823      	ldr	r0, [pc, #140]	; (80010a8 <MX_TIM3_Init+0xe4>)
 800101c:	f001 fb78 	bl	8002710 <HAL_TIM_Base_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001026:	f000 f8e7 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001034:	4619      	mov	r1, r3
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001038:	f001 fecc 	bl	8002dd4 <HAL_TIM_ConfigClockSource>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001042:	f000 f8d9 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001046:	4818      	ldr	r0, [pc, #96]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001048:	f001 fc04 	bl	8002854 <HAL_TIM_PWM_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001052:	f000 f8d1 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	4619      	mov	r1, r3
 8001064:	4810      	ldr	r0, [pc, #64]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001066:	f002 fa41 	bl	80034ec <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001070:	f000 f8c2 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001074:	2360      	movs	r3, #96	; 0x60
 8001076:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 199;
 8001078:	23c7      	movs	r3, #199	; 0xc7
 800107a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM3_Init+0xe4>)
 800108c:	f001 fde4 	bl	8002c58 <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001096:	f000 f8af 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM3_Init+0xe4>)
 800109c:	f000 f91c 	bl	80012d8 <HAL_TIM_MspPostInit>

}
 80010a0:	bf00      	nop
 80010a2:	3738      	adds	r7, #56	; 0x38
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000114 	.word	0x20000114
 80010ac:	40000400 	.word	0x40000400

080010b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_USART2_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e8:	f002 fa70 	bl	80035cc <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 f881 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001a4 	.word	0x200001a4
 8001100:	40004400 	.word	0x40004400

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <MX_GPIO_Init+0xd0>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <MX_GPIO_Init+0xd0>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800114e:	4822      	ldr	r0, [pc, #136]	; (80011d8 <MX_GPIO_Init+0xd4>)
 8001150:	f000 feab 	bl	8001eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800115a:	4820      	ldr	r0, [pc, #128]	; (80011dc <MX_GPIO_Init+0xd8>)
 800115c:	f000 fea5 	bl	8001eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDE_Pin BUTTON_MOD_Pin BUTTON_IC_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDE_Pin|BUTTON_MOD_Pin|BUTTON_IC_Pin;
 8001160:	2313      	movs	r3, #19
 8001162:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001168:	2301      	movs	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	4619      	mov	r1, r3
 8001172:	481a      	ldr	r0, [pc, #104]	; (80011dc <MX_GPIO_Init+0xd8>)
 8001174:	f000 fcfe 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_SET_Pin;
 8001178:	2301      	movs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_SET_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4619      	mov	r1, r3
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <MX_GPIO_Init+0xd4>)
 800118c:	f000 fcf2 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL1_Pin TL1_SIGNAL2_Pin TL2_SIGNAL2_Pin TL2_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin;
 8001190:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001194:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2302      	movs	r3, #2
 80011a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4619      	mov	r1, r3
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <MX_GPIO_Init+0xd4>)
 80011aa:	f000 fce3 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL2_Pin TL1_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin;
 80011ae:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2302      	movs	r3, #2
 80011be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_GPIO_Init+0xd8>)
 80011c8:	f000 fcd4 	bl	8001b74 <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	40010800 	.word	0x40010800

080011e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	timerRun();
 80011e8:	f000 f9c2 	bl	8001570 <timerRun>
	button_reading();
 80011ec:	f7fe ffae 	bl	800014c <button_reading>
//	SCH_Update();
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_MspInit+0x5c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_MspInit+0x5c>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_MspInit+0x5c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_MspInit+0x5c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_MspInit+0x60>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_MspInit+0x60>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d114      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_TIM_Base_MspInit+0x68>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_TIM_Base_MspInit+0x68>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_TIM_Base_MspInit+0x68>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	201c      	movs	r0, #28
 8001298:	f000 fb85 	bl	80019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800129c:	201c      	movs	r0, #28
 800129e:	f000 fb9e 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012a2:	e010      	b.n	80012c6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_TIM_Base_MspInit+0x6c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10b      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_TIM_Base_MspInit+0x68>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_TIM_Base_MspInit+0x68>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_TIM_Base_MspInit+0x68>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40000400 	.word	0x40000400

080012d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <HAL_TIM_MspPostInit+0x58>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d117      	bne.n	8001328 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_TIM_MspPostInit+0x5c>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_TIM_MspPostInit+0x5c>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_TIM_MspPostInit+0x5c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2302      	movs	r3, #2
 800131a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_TIM_MspPostInit+0x60>)
 8001324:	f000 fc26 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40000400 	.word	0x40000400
 8001334:	40021000 	.word	0x40021000
 8001338:	40010800 	.word	0x40010800

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_UART_MspInit+0x98>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d137      	bne.n	80013cc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_UART_MspInit+0x9c>)
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <HAL_UART_MspInit+0x9c>)
 8001362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001366:	61d3      	str	r3, [r2, #28]
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_UART_MspInit+0x9c>)
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_UART_MspInit+0x9c>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0x9c>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x9c>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800138c:	2304      	movs	r3, #4
 800138e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <HAL_UART_MspInit+0xa0>)
 80013a0:	f000 fbe8 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a4:	2308      	movs	r3, #8
 80013a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4619      	mov	r1, r3
 80013b6:	4809      	ldr	r0, [pc, #36]	; (80013dc <HAL_UART_MspInit+0xa0>)
 80013b8:	f000 fbdc 	bl	8001b74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	2026      	movs	r0, #38	; 0x26
 80013c2:	f000 faf0 	bl	80019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c6:	2026      	movs	r0, #38	; 0x26
 80013c8:	f000 fb09 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40004400 	.word	0x40004400
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010800 	.word	0x40010800

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001426:	f000 f9cb 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM2_IRQHandler+0x10>)
 8001436:	f001 fb07 	bl	8002a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000015c 	.word	0x2000015c

08001444 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <USART2_IRQHandler+0x10>)
 800144a:	f002 f99f 	bl	800378c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200001a4 	.word	0x200001a4

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d207      	bcs.n	8001498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001488:	f002 fd78 	bl	8003f7c <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20005000 	.word	0x20005000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	20000104 	.word	0x20000104
 80014c0:	20000220 	.word	0x20000220

080014c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <setTimer1>:
 */


#include "timer.h"

void setTimer1(int duration){             // first trafic light
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	timer1Counter = duration/TICK;
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <setTimer1+0x20>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
	timer1Flag = 0;
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <setTimer1+0x24>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200000e0 	.word	0x200000e0
 80014f4:	200000e4 	.word	0x200000e4

080014f8 <setTimer2>:
void setTimer2(int duration){            // second traffc light
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	timer2Counter = duration/TICK;
 8001500:	4a05      	ldr	r2, [pc, #20]	; (8001518 <setTimer2+0x20>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
	timer2Flag = 0;
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <setTimer2+0x24>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200000e8 	.word	0x200000e8
 800151c:	200000ec 	.word	0x200000ec

08001520 <setTimer3>:
void setTimer3(int duration){            // timer for pedestrian light
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	timer3Counter = duration/TICK;
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <setTimer3+0x20>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
	timer3Flag = 0;
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <setTimer3+0x24>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200000f0 	.word	0x200000f0
 8001544:	200000f4 	.word	0x200000f4

08001548 <setTimer4>:
void setTimer4(int duration){            // buzzer timer
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	timer4Counter = duration/TICK;
 8001550:	4a05      	ldr	r2, [pc, #20]	; (8001568 <setTimer4+0x20>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
	timer4Flag = 0;
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <setTimer4+0x24>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200000f8 	.word	0x200000f8
 800156c:	200000fc 	.word	0x200000fc

08001570 <timerRun>:
void setTimer5(int duration){            // extra timer
    timer5Counter = duration/TICK;
    timer5Flag = 0;
}
// Run all timer
void timerRun(){
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	if(timer1Counter > 0){
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <timerRun+0x8c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd0b      	ble.n	8001594 <timerRun+0x24>
		timer1Counter--;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <timerRun+0x8c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <timerRun+0x8c>)
 8001584:	6013      	str	r3, [r2, #0]
		if(timer1Counter <= 0){
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <timerRun+0x8c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	dc02      	bgt.n	8001594 <timerRun+0x24>
			timer1Flag = 1;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <timerRun+0x90>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2Counter > 0){
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <timerRun+0x94>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	dd0b      	ble.n	80015b4 <timerRun+0x44>
		timer2Counter--;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <timerRun+0x94>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <timerRun+0x94>)
 80015a4:	6013      	str	r3, [r2, #0]
		if(timer2Counter <= 0){
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <timerRun+0x94>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dc02      	bgt.n	80015b4 <timerRun+0x44>
			timer2Flag = 1;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <timerRun+0x98>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3Counter > 0){
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <timerRun+0x9c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	dd0b      	ble.n	80015d4 <timerRun+0x64>
		timer3Counter--;
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <timerRun+0x9c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <timerRun+0x9c>)
 80015c4:	6013      	str	r3, [r2, #0]
		if(timer3Counter <= 0){
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <timerRun+0x9c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dc02      	bgt.n	80015d4 <timerRun+0x64>
			timer3Flag = 1;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <timerRun+0xa0>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4Counter > 0){
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <timerRun+0xa4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dd0b      	ble.n	80015f4 <timerRun+0x84>
		timer4Counter--;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <timerRun+0xa4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <timerRun+0xa4>)
 80015e4:	6013      	str	r3, [r2, #0]
		if(timer4Counter <= 0){
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <timerRun+0xa4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dc02      	bgt.n	80015f4 <timerRun+0x84>
			timer4Flag = 1;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <timerRun+0xa8>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	200000e0 	.word	0x200000e0
 8001600:	200000e4 	.word	0x200000e4
 8001604:	200000e8 	.word	0x200000e8
 8001608:	200000ec 	.word	0x200000ec
 800160c:	200000f0 	.word	0x200000f0
 8001610:	200000f4 	.word	0x200000f4
 8001614:	200000f8 	.word	0x200000f8
 8001618:	200000fc 	.word	0x200000fc

0800161c <uart_transmit>:
 *      Author: Minh Duc Quach
 */

#include "uart.h"

void uart_transmit(){
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	switch(FSM_Traffic_Light_State_Row){
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <uart_transmit+0xb0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b05      	cmp	r3, #5
 8001626:	dc02      	bgt.n	800162e <uart_transmit+0x12>
 8001628:	2b00      	cmp	r3, #0
 800162a:	da04      	bge.n	8001636 <uart_transmit+0x1a>
		case SET_YEL:
			if (Set_TL_Time < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", Set_TL_Time), 1000);
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", Set_TL_Time), 1000);
			break;
		default:
			break;
 800162c:	e04b      	b.n	80016c6 <uart_transmit+0xaa>
 800162e:	3b07      	subs	r3, #7
	switch(FSM_Traffic_Light_State_Row){
 8001630:	2b02      	cmp	r3, #2
 8001632:	d848      	bhi.n	80016c6 <uart_transmit+0xaa>
 8001634:	e023      	b.n	800167e <uart_transmit+0x62>
			if (traffic_light_remain_time_row < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", traffic_light_remain_time_row), 1000);
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <uart_transmit+0xb4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b09      	cmp	r3, #9
 800163c:	dc0f      	bgt.n	800165e <uart_transmit+0x42>
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <uart_transmit+0xb4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	4923      	ldr	r1, [pc, #140]	; (80016d4 <uart_transmit+0xb8>)
 8001646:	4824      	ldr	r0, [pc, #144]	; (80016d8 <uart_transmit+0xbc>)
 8001648:	f002 fcca 	bl	8003fe0 <siprintf>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001654:	4920      	ldr	r1, [pc, #128]	; (80016d8 <uart_transmit+0xbc>)
 8001656:	4821      	ldr	r0, [pc, #132]	; (80016dc <uart_transmit+0xc0>)
 8001658:	f002 f805 	bl	8003666 <HAL_UART_Transmit>
			break;
 800165c:	e034      	b.n	80016c8 <uart_transmit+0xac>
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", traffic_light_remain_time_row), 1000);
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <uart_transmit+0xb4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	491e      	ldr	r1, [pc, #120]	; (80016e0 <uart_transmit+0xc4>)
 8001666:	481c      	ldr	r0, [pc, #112]	; (80016d8 <uart_transmit+0xbc>)
 8001668:	f002 fcba 	bl	8003fe0 <siprintf>
 800166c:	4603      	mov	r3, r0
 800166e:	b29a      	uxth	r2, r3
 8001670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001674:	4918      	ldr	r1, [pc, #96]	; (80016d8 <uart_transmit+0xbc>)
 8001676:	4819      	ldr	r0, [pc, #100]	; (80016dc <uart_transmit+0xc0>)
 8001678:	f001 fff5 	bl	8003666 <HAL_UART_Transmit>
			break;
 800167c:	e024      	b.n	80016c8 <uart_transmit+0xac>
			if (Set_TL_Time < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", Set_TL_Time), 1000);
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <uart_transmit+0xc8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b09      	cmp	r3, #9
 8001684:	dc0f      	bgt.n	80016a6 <uart_transmit+0x8a>
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <uart_transmit+0xc8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	4911      	ldr	r1, [pc, #68]	; (80016d4 <uart_transmit+0xb8>)
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <uart_transmit+0xbc>)
 8001690:	f002 fca6 	bl	8003fe0 <siprintf>
 8001694:	4603      	mov	r3, r0
 8001696:	b29a      	uxth	r2, r3
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <uart_transmit+0xbc>)
 800169e:	480f      	ldr	r0, [pc, #60]	; (80016dc <uart_transmit+0xc0>)
 80016a0:	f001 ffe1 	bl	8003666 <HAL_UART_Transmit>
			break;
 80016a4:	e010      	b.n	80016c8 <uart_transmit+0xac>
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", Set_TL_Time), 1000);
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <uart_transmit+0xc8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <uart_transmit+0xc4>)
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <uart_transmit+0xbc>)
 80016b0:	f002 fc96 	bl	8003fe0 <siprintf>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016bc:	4906      	ldr	r1, [pc, #24]	; (80016d8 <uart_transmit+0xbc>)
 80016be:	4807      	ldr	r0, [pc, #28]	; (80016dc <uart_transmit+0xc0>)
 80016c0:	f001 ffd1 	bl	8003666 <HAL_UART_Transmit>
			break;
 80016c4:	e000      	b.n	80016c8 <uart_transmit+0xac>
			break;
 80016c6:	bf00      	nop
	}
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200000d4 	.word	0x200000d4
 80016d0:	20000024 	.word	0x20000024
 80016d4:	0800486c 	.word	0x0800486c
 80016d8:	200001ec 	.word	0x200001ec
 80016dc:	200001a4 	.word	0x200001a4
 80016e0:	08004878 	.word	0x08004878
 80016e4:	20000100 	.word	0x20000100

080016e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ea:	490d      	ldr	r1, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001700:	4c0a      	ldr	r4, [pc, #40]	; (800172c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800170e:	f7ff fed9 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f002 fc39 	bl	8003f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001716:	f7ff fb9d 	bl	8000e54 <main>
  bx lr
 800171a:	4770      	bx	lr
  ldr r0, =_sdata
 800171c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001720:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001724:	080048e8 	.word	0x080048e8
  ldr r2, =_sbss
 8001728:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800172c:	20000220 	.word	0x20000220

08001730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC1_2_IRQHandler>
	...

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_Init+0x28>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_Init+0x28>)
 800173e:	f043 0310 	orr.w	r3, r3, #16
 8001742:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001744:	2003      	movs	r0, #3
 8001746:	f000 f923 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174a:	200f      	movs	r0, #15
 800174c:	f000 f808 	bl	8001760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001750:	f7ff fd58 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40022000 	.word	0x40022000

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x54>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_InitTick+0x58>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	fbb3 f3f1 	udiv	r3, r3, r1
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f93b 	bl	80019fa <HAL_SYSTICK_Config>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00e      	b.n	80017ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d80a      	bhi.n	80017aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 f903 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a0:	4a06      	ldr	r2, [pc, #24]	; (80017bc <HAL_InitTick+0x5c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000030 	.word	0x20000030
 80017b8:	20000038 	.word	0x20000038
 80017bc:	20000034 	.word	0x20000034

080017c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x1c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_IncTick+0x20>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <HAL_IncTick+0x20>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	20000038 	.word	0x20000038
 80017e0:	2000020c 	.word	0x2000020c

080017e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <HAL_GetTick+0x10>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	2000020c 	.word	0x2000020c

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4906      	ldr	r1, [pc, #24]	; (8001890 <__NVIC_EnableIRQ+0x34>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff90 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff2d 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff42 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff90 	bl	80018e8 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5f 	bl	8001894 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff35 	bl	800185c <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d008      	beq.n	8001a3a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e020      	b.n	8001a7c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 020e 	bic.w	r2, r2, #14
 8001a48:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0201 	bic.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d005      	beq.n	8001aaa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e051      	b.n	8001b4e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 020e 	bic.w	r2, r2, #14
 8001ab8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_DMA_Abort_IT+0xd0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d029      	beq.n	8001b28 <HAL_DMA_Abort_IT+0xa0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <HAL_DMA_Abort_IT+0xd4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d022      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x9c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_DMA_Abort_IT+0xd8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d01a      	beq.n	8001b1e <HAL_DMA_Abort_IT+0x96>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <HAL_DMA_Abort_IT+0xdc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d012      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x90>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_DMA_Abort_IT+0xe0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d00a      	beq.n	8001b12 <HAL_DMA_Abort_IT+0x8a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_DMA_Abort_IT+0xe4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d102      	bne.n	8001b0c <HAL_DMA_Abort_IT+0x84>
 8001b06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b0a:	e00e      	b.n	8001b2a <HAL_DMA_Abort_IT+0xa2>
 8001b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b10:	e00b      	b.n	8001b2a <HAL_DMA_Abort_IT+0xa2>
 8001b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b16:	e008      	b.n	8001b2a <HAL_DMA_Abort_IT+0xa2>
 8001b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1c:	e005      	b.n	8001b2a <HAL_DMA_Abort_IT+0xa2>
 8001b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b22:	e002      	b.n	8001b2a <HAL_DMA_Abort_IT+0xa2>
 8001b24:	2310      	movs	r3, #16
 8001b26:	e000      	b.n	8001b2a <HAL_DMA_Abort_IT+0xa2>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_DMA_Abort_IT+0xe8>)
 8001b2c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
    } 
  }
  return status;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40020008 	.word	0x40020008
 8001b5c:	4002001c 	.word	0x4002001c
 8001b60:	40020030 	.word	0x40020030
 8001b64:	40020044 	.word	0x40020044
 8001b68:	40020058 	.word	0x40020058
 8001b6c:	4002006c 	.word	0x4002006c
 8001b70:	40020000 	.word	0x40020000

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b08b      	sub	sp, #44	; 0x2c
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b86:	e169      	b.n	8001e5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f040 8158 	bne.w	8001e56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a9a      	ldr	r2, [pc, #616]	; (8001e14 <HAL_GPIO_Init+0x2a0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d05e      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bb0:	4a98      	ldr	r2, [pc, #608]	; (8001e14 <HAL_GPIO_Init+0x2a0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d875      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bb6:	4a98      	ldr	r2, [pc, #608]	; (8001e18 <HAL_GPIO_Init+0x2a4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d058      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bbc:	4a96      	ldr	r2, [pc, #600]	; (8001e18 <HAL_GPIO_Init+0x2a4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d86f      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bc2:	4a96      	ldr	r2, [pc, #600]	; (8001e1c <HAL_GPIO_Init+0x2a8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d052      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bc8:	4a94      	ldr	r2, [pc, #592]	; (8001e1c <HAL_GPIO_Init+0x2a8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d869      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bce:	4a94      	ldr	r2, [pc, #592]	; (8001e20 <HAL_GPIO_Init+0x2ac>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d04c      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bd4:	4a92      	ldr	r2, [pc, #584]	; (8001e20 <HAL_GPIO_Init+0x2ac>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d863      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bda:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <HAL_GPIO_Init+0x2b0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d046      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001be0:	4a90      	ldr	r2, [pc, #576]	; (8001e24 <HAL_GPIO_Init+0x2b0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d85d      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d82a      	bhi.n	8001c40 <HAL_GPIO_Init+0xcc>
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d859      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <HAL_GPIO_Init+0x80>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c6f 	.word	0x08001c6f
 8001bf8:	08001c49 	.word	0x08001c49
 8001bfc:	08001c5b 	.word	0x08001c5b
 8001c00:	08001c9d 	.word	0x08001c9d
 8001c04:	08001ca3 	.word	0x08001ca3
 8001c08:	08001ca3 	.word	0x08001ca3
 8001c0c:	08001ca3 	.word	0x08001ca3
 8001c10:	08001ca3 	.word	0x08001ca3
 8001c14:	08001ca3 	.word	0x08001ca3
 8001c18:	08001ca3 	.word	0x08001ca3
 8001c1c:	08001ca3 	.word	0x08001ca3
 8001c20:	08001ca3 	.word	0x08001ca3
 8001c24:	08001ca3 	.word	0x08001ca3
 8001c28:	08001ca3 	.word	0x08001ca3
 8001c2c:	08001ca3 	.word	0x08001ca3
 8001c30:	08001ca3 	.word	0x08001ca3
 8001c34:	08001ca3 	.word	0x08001ca3
 8001c38:	08001c51 	.word	0x08001c51
 8001c3c:	08001c65 	.word	0x08001c65
 8001c40:	4a79      	ldr	r2, [pc, #484]	; (8001e28 <HAL_GPIO_Init+0x2b4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c46:	e02c      	b.n	8001ca2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	623b      	str	r3, [r7, #32]
          break;
 8001c4e:	e029      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	3304      	adds	r3, #4
 8001c56:	623b      	str	r3, [r7, #32]
          break;
 8001c58:	e024      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	3308      	adds	r3, #8
 8001c60:	623b      	str	r3, [r7, #32]
          break;
 8001c62:	e01f      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	623b      	str	r3, [r7, #32]
          break;
 8001c6c:	e01a      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c76:	2304      	movs	r3, #4
 8001c78:	623b      	str	r3, [r7, #32]
          break;
 8001c7a:	e013      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c84:	2308      	movs	r3, #8
 8001c86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	611a      	str	r2, [r3, #16]
          break;
 8001c8e:	e009      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c90:	2308      	movs	r3, #8
 8001c92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	615a      	str	r2, [r3, #20]
          break;
 8001c9a:	e003      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          break;
 8001ca2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d801      	bhi.n	8001cae <HAL_GPIO_Init+0x13a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_Init+0x13e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2bff      	cmp	r3, #255	; 0xff
 8001cb8:	d802      	bhi.n	8001cc0 <HAL_GPIO_Init+0x14c>
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x152>
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	3b08      	subs	r3, #8
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	210f      	movs	r1, #15
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	6a39      	ldr	r1, [r7, #32]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80b1 	beq.w	8001e56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf4:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d0c:	4a48      	ldr	r2, [pc, #288]	; (8001e30 <HAL_GPIO_Init+0x2bc>)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a40      	ldr	r2, [pc, #256]	; (8001e34 <HAL_GPIO_Init+0x2c0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <HAL_GPIO_Init+0x1ec>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3f      	ldr	r2, [pc, #252]	; (8001e38 <HAL_GPIO_Init+0x2c4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00d      	beq.n	8001d5c <HAL_GPIO_Init+0x1e8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3e      	ldr	r2, [pc, #248]	; (8001e3c <HAL_GPIO_Init+0x2c8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <HAL_GPIO_Init+0x1e4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3d      	ldr	r2, [pc, #244]	; (8001e40 <HAL_GPIO_Init+0x2cc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_GPIO_Init+0x1e0>
 8001d50:	2303      	movs	r3, #3
 8001d52:	e006      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e004      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d60:	2300      	movs	r3, #0
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	f002 0203 	and.w	r2, r2, #3
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	4093      	lsls	r3, r2
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d72:	492f      	ldr	r1, [pc, #188]	; (8001e30 <HAL_GPIO_Init+0x2bc>)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	492c      	ldr	r1, [pc, #176]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4928      	ldr	r1, [pc, #160]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4922      	ldr	r1, [pc, #136]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	491e      	ldr	r1, [pc, #120]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4918      	ldr	r1, [pc, #96]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4914      	ldr	r1, [pc, #80]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d021      	beq.n	8001e48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	490e      	ldr	r1, [pc, #56]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60cb      	str	r3, [r1, #12]
 8001e10:	e021      	b.n	8001e56 <HAL_GPIO_Init+0x2e2>
 8001e12:	bf00      	nop
 8001e14:	10320000 	.word	0x10320000
 8001e18:	10310000 	.word	0x10310000
 8001e1c:	10220000 	.word	0x10220000
 8001e20:	10210000 	.word	0x10210000
 8001e24:	10120000 	.word	0x10120000
 8001e28:	10110000 	.word	0x10110000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40010800 	.word	0x40010800
 8001e38:	40010c00 	.word	0x40010c00
 8001e3c:	40011000 	.word	0x40011000
 8001e40:	40011400 	.word	0x40011400
 8001e44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_GPIO_Init+0x304>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	4909      	ldr	r1, [pc, #36]	; (8001e78 <HAL_GPIO_Init+0x304>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	3301      	adds	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f47f ae8e 	bne.w	8001b88 <HAL_GPIO_Init+0x14>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	372c      	adds	r7, #44	; 0x2c
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	807b      	strh	r3, [r7, #2]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eba:	787b      	ldrb	r3, [r7, #1]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec0:	887a      	ldrh	r2, [r7, #2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ec6:	e003      	b.n	8001ed0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	041a      	lsls	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e26c      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efc:	4b92      	ldr	r3, [pc, #584]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f08:	4b8f      	ldr	r3, [pc, #572]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d112      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
 8001f14:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4b89      	ldr	r3, [pc, #548]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06c      	beq.n	8002008 <HAL_RCC_OscConfig+0x12c>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d168      	bne.n	8002008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e246      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x76>
 8001f44:	4b80      	ldr	r3, [pc, #512]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a7f      	ldr	r2, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x98>
 8001f5a:	4b7b      	ldr	r3, [pc, #492]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7a      	ldr	r2, [pc, #488]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b78      	ldr	r3, [pc, #480]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a77      	ldr	r2, [pc, #476]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xbc>
 8001f7e:	4b72      	ldr	r3, [pc, #456]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a71      	ldr	r2, [pc, #452]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6a      	ldr	r2, [pc, #424]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a67      	ldr	r2, [pc, #412]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fc14 	bl	80017e4 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fc10 	bl	80017e4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1fa      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe4>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fc00 	bl	80017e4 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fbfc 	bl	80017e4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1e6      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x10c>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002022:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1ba      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4939      	ldr	r1, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_RCC_OscConfig+0x270>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff fbb5 	bl	80017e4 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fbb1 	bl	80017e4 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e19b      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4927      	ldr	r1, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_RCC_OscConfig+0x270>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb94 	bl	80017e4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff fb90 	bl	80017e4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e17a      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03a      	beq.n	8002160 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d019      	beq.n	8002126 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fb74 	bl	80017e4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fb70 	bl	80017e4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e15a      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800211e:	2001      	movs	r0, #1
 8002120:	f000 fad8 	bl	80026d4 <RCC_Delay>
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212c:	f7ff fb5a 	bl	80017e4 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002132:	e00f      	b.n	8002154 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002134:	f7ff fb56 	bl	80017e4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d908      	bls.n	8002154 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e140      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	42420000 	.word	0x42420000
 8002150:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	4b9e      	ldr	r3, [pc, #632]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e9      	bne.n	8002134 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a6 	beq.w	80022ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b97      	ldr	r3, [pc, #604]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b94      	ldr	r3, [pc, #592]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a93      	ldr	r2, [pc, #588]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]
 800218a:	4b91      	ldr	r3, [pc, #580]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b8e      	ldr	r3, [pc, #568]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a6:	4b8b      	ldr	r3, [pc, #556]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a8a      	ldr	r2, [pc, #552]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7ff fb17 	bl	80017e4 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7ff fb13 	bl	80017e4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0fd      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x312>
 80021e0:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a7a      	ldr	r2, [pc, #488]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	e02d      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x334>
 80021f6:	4b76      	ldr	r3, [pc, #472]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a75      	ldr	r2, [pc, #468]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a72      	ldr	r2, [pc, #456]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	e01c      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d10c      	bne.n	8002232 <HAL_RCC_OscConfig+0x356>
 8002218:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a6c      	ldr	r2, [pc, #432]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	e00b      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a66      	ldr	r2, [pc, #408]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4b64      	ldr	r3, [pc, #400]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a63      	ldr	r2, [pc, #396]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d015      	beq.n	800227e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7ff fac7 	bl	80017e4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff fac3 	bl	80017e4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0ab      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ee      	beq.n	800225a <HAL_RCC_OscConfig+0x37e>
 800227c:	e014      	b.n	80022a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7ff fab1 	bl	80017e4 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff faad 	bl	80017e4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e095      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ee      	bne.n	8002286 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d105      	bne.n	80022ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a47      	ldr	r2, [pc, #284]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8081 	beq.w	80023c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	4b42      	ldr	r3, [pc, #264]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d061      	beq.n	8002394 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d146      	bne.n	8002366 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff fa81 	bl	80017e4 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7ff fa7d 	bl	80017e4 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e067      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f8:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230c:	d108      	bne.n	8002320 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	492d      	ldr	r1, [pc, #180]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a19      	ldr	r1, [r3, #32]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	430b      	orrs	r3, r1
 8002332:	4927      	ldr	r1, [pc, #156]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff fa51 	bl	80017e4 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7ff fa4d 	bl	80017e4 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e037      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x46a>
 8002364:	e02f      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7ff fa3a 	bl	80017e4 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7ff fa36 	bl	80017e4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e020      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x498>
 8002392:	e018      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42420060 	.word	0x42420060

080023dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d0      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4965      	ldr	r1, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800245a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d040      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e073      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7ff f98a 	bl	80017e4 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7ff f986 	bl	80017e4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e053      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d210      	bcs.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4922      	ldr	r1, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f8e8 	bl	8001760 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40022000 	.word	0x40022000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08004894 	.word	0x08004894
 80025a8:	20000030 	.word	0x20000030
 80025ac:	20000034 	.word	0x20000034

080025b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b490      	push	{r4, r7}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025b8:	1d3c      	adds	r4, r7, #4
 80025ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025c0:	f240 2301 	movw	r3, #513	; 0x201
 80025c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x40>
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x46>
 80025ee:	e02d      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f2:	623b      	str	r3, [r7, #32]
      break;
 80025f4:	e02d      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002602:	4413      	add	r3, r2
 8002604:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002608:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0c5b      	lsrs	r3, r3, #17
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002622:	4413      	add	r3, r2
 8002624:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002628:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	fb02 f203 	mul.w	r2, r2, r3
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	e004      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	623b      	str	r3, [r7, #32]
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800264e:	623b      	str	r3, [r7, #32]
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	6a3b      	ldr	r3, [r7, #32]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bc90      	pop	{r4, r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	08004884 	.word	0x08004884
 8002664:	40021000 	.word	0x40021000
 8002668:	007a1200 	.word	0x007a1200
 800266c:	003d0900 	.word	0x003d0900

08002670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002674:	4b02      	ldr	r3, [pc, #8]	; (8002680 <HAL_RCC_GetHCLKFreq+0x10>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	20000030 	.word	0x20000030

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002688:	f7ff fff2 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4903      	ldr	r1, [pc, #12]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	080048a4 	.word	0x080048a4

080026ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026b0:	f7ff ffde 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	0adb      	lsrs	r3, r3, #11
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	; (80026d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	080048a4 	.word	0x080048a4

080026d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <RCC_Delay+0x34>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <RCC_Delay+0x38>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0a5b      	lsrs	r3, r3, #9
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026f0:	bf00      	nop
  }
  while (Delay --);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	60fa      	str	r2, [r7, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f9      	bne.n	80026f0 <RCC_Delay+0x1c>
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	20000030 	.word	0x20000030
 800270c:	10624dd3 	.word	0x10624dd3

08002710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e041      	b.n	80027a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fd96 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f000 fc28 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d001      	beq.n	80027c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e03a      	b.n	800283e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_TIM_Base_Start_IT+0x98>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00e      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x58>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f2:	d009      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x58>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_TIM_Base_Start_IT+0x9c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x58>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_TIM_Base_Start_IT+0xa0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d111      	bne.n	800282c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b06      	cmp	r3, #6
 8002818:	d010      	beq.n	800283c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282a:	e007      	b.n	800283c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800

08002854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e041      	b.n	80028ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f839 	bl	80028f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 fb86 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_TIM_PWM_Start+0x24>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e022      	b.n	800296e <HAL_TIM_PWM_Start+0x6a>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d109      	bne.n	8002942 <HAL_TIM_PWM_Start+0x3e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	e015      	b.n	800296e <HAL_TIM_PWM_Start+0x6a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d109      	bne.n	800295c <HAL_TIM_PWM_Start+0x58>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e008      	b.n	800296e <HAL_TIM_PWM_Start+0x6a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e05e      	b.n	8002a34 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <HAL_TIM_PWM_Start+0x82>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	e013      	b.n	80029ae <HAL_TIM_PWM_Start+0xaa>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d104      	bne.n	8002996 <HAL_TIM_PWM_Start+0x92>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	e00b      	b.n	80029ae <HAL_TIM_PWM_Start+0xaa>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_PWM_Start+0xa2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a4:	e003      	b.n	80029ae <HAL_TIM_PWM_Start+0xaa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	6839      	ldr	r1, [r7, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fd74 	bl	80034a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_TIM_PWM_Start+0x138>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d107      	bne.n	80029d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_TIM_PWM_Start+0x138>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00e      	beq.n	80029fe <HAL_TIM_PWM_Start+0xfa>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d009      	beq.n	80029fe <HAL_TIM_PWM_Start+0xfa>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_TIM_PWM_Start+0x13c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d004      	beq.n	80029fe <HAL_TIM_PWM_Start+0xfa>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_TIM_PWM_Start+0x140>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d111      	bne.n	8002a22 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d010      	beq.n	8002a32 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a20:	e007      	b.n	8002a32 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800

08002a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0202 	mvn.w	r2, #2
 8002a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa6f 	bl	8002f6e <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa62 	bl	8002f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fa71 	bl	8002f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0204 	mvn.w	r2, #4
 8002ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2202      	movs	r2, #2
 8002ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa45 	bl	8002f6e <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa38 	bl	8002f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa47 	bl	8002f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0208 	mvn.w	r2, #8
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2204      	movs	r2, #4
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa1b 	bl	8002f6e <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa0e 	bl	8002f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa1d 	bl	8002f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0210 	mvn.w	r2, #16
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2208      	movs	r2, #8
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9f1 	bl	8002f6e <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9e4 	bl	8002f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f9f3 	bl	8002f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10e      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d107      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0201 	mvn.w	r2, #1
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fb0a 	bl	80011e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd6:	2b80      	cmp	r3, #128	; 0x80
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d107      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fce1 	bl	80035ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d10e      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d107      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f9b7 	bl	8002f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0220 	mvn.w	r2, #32
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fcac 	bl	80035a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e0ac      	b.n	8002dcc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	f200 809f 	bhi.w	8002dc0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c82:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002cbd 	.word	0x08002cbd
 8002c8c:	08002dc1 	.word	0x08002dc1
 8002c90:	08002dc1 	.word	0x08002dc1
 8002c94:	08002dc1 	.word	0x08002dc1
 8002c98:	08002cfd 	.word	0x08002cfd
 8002c9c:	08002dc1 	.word	0x08002dc1
 8002ca0:	08002dc1 	.word	0x08002dc1
 8002ca4:	08002dc1 	.word	0x08002dc1
 8002ca8:	08002d3f 	.word	0x08002d3f
 8002cac:	08002dc1 	.word	0x08002dc1
 8002cb0:	08002dc1 	.word	0x08002dc1
 8002cb4:	08002dc1 	.word	0x08002dc1
 8002cb8:	08002d7f 	.word	0x08002d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f9d0 	bl	8003068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0204 	bic.w	r2, r2, #4
 8002ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6999      	ldr	r1, [r3, #24]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	619a      	str	r2, [r3, #24]
      break;
 8002cfa:	e062      	b.n	8002dc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fa16 	bl	8003134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	021a      	lsls	r2, r3, #8
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	619a      	str	r2, [r3, #24]
      break;
 8002d3c:	e041      	b.n	8002dc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fa5f 	bl	8003208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0208 	orr.w	r2, r2, #8
 8002d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0204 	bic.w	r2, r2, #4
 8002d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69d9      	ldr	r1, [r3, #28]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	61da      	str	r2, [r3, #28]
      break;
 8002d7c:	e021      	b.n	8002dc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 faa9 	bl	80032dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69d9      	ldr	r1, [r3, #28]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	021a      	lsls	r2, r3, #8
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	61da      	str	r2, [r3, #28]
      break;
 8002dbe:	e000      	b.n	8002dc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_TIM_ConfigClockSource+0x18>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e0b3      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x180>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e24:	d03e      	beq.n	8002ea4 <HAL_TIM_ConfigClockSource+0xd0>
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2a:	f200 8087 	bhi.w	8002f3c <HAL_TIM_ConfigClockSource+0x168>
 8002e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e32:	f000 8085 	beq.w	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d87f      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x168>
 8002e3c:	2b70      	cmp	r3, #112	; 0x70
 8002e3e:	d01a      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0xa2>
 8002e40:	2b70      	cmp	r3, #112	; 0x70
 8002e42:	d87b      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x168>
 8002e44:	2b60      	cmp	r3, #96	; 0x60
 8002e46:	d050      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x116>
 8002e48:	2b60      	cmp	r3, #96	; 0x60
 8002e4a:	d877      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x168>
 8002e4c:	2b50      	cmp	r3, #80	; 0x50
 8002e4e:	d03c      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0xf6>
 8002e50:	2b50      	cmp	r3, #80	; 0x50
 8002e52:	d873      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x168>
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d058      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x136>
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d86f      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x168>
 8002e5c:	2b30      	cmp	r3, #48	; 0x30
 8002e5e:	d064      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x156>
 8002e60:	2b30      	cmp	r3, #48	; 0x30
 8002e62:	d86b      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x168>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d060      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x156>
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d867      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x168>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05c      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x156>
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d05a      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e74:	e062      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6899      	ldr	r1, [r3, #8]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f000 faee 	bl	8003466 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	609a      	str	r2, [r3, #8]
      break;
 8002ea2:	e04e      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f000 fad7 	bl	8003466 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ec6:	609a      	str	r2, [r3, #8]
      break;
 8002ec8:	e03b      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f000 fa4e 	bl	8003378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2150      	movs	r1, #80	; 0x50
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 faa5 	bl	8003432 <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e02b      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 fa6c 	bl	80033d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2160      	movs	r1, #96	; 0x60
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fa95 	bl	8003432 <TIM_ITRx_SetConfig>
      break;
 8002f08:	e01b      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 fa2e 	bl	8003378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2140      	movs	r1, #64	; 0x40
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fa85 	bl	8003432 <TIM_ITRx_SetConfig>
      break;
 8002f28:	e00b      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f000 fa7c 	bl	8003432 <TIM_ITRx_SetConfig>
        break;
 8002f3a:	e002      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a29      	ldr	r2, [pc, #164]	; (800305c <TIM_Base_SetConfig+0xb8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <TIM_Base_SetConfig+0x30>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d007      	beq.n	8002fd4 <TIM_Base_SetConfig+0x30>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a26      	ldr	r2, [pc, #152]	; (8003060 <TIM_Base_SetConfig+0xbc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0x30>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a25      	ldr	r2, [pc, #148]	; (8003064 <TIM_Base_SetConfig+0xc0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d108      	bne.n	8002fe6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1c      	ldr	r2, [pc, #112]	; (800305c <TIM_Base_SetConfig+0xb8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00b      	beq.n	8003006 <TIM_Base_SetConfig+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d007      	beq.n	8003006 <TIM_Base_SetConfig+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a19      	ldr	r2, [pc, #100]	; (8003060 <TIM_Base_SetConfig+0xbc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d003      	beq.n	8003006 <TIM_Base_SetConfig+0x62>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <TIM_Base_SetConfig+0xc0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d108      	bne.n	8003018 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a07      	ldr	r2, [pc, #28]	; (800305c <TIM_Base_SetConfig+0xb8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d103      	bne.n	800304c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	615a      	str	r2, [r3, #20]
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800

08003068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 0302 	bic.w	r3, r3, #2
 80030b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <TIM_OC1_SetConfig+0xc8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10c      	bne.n	80030de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0308 	bic.w	r3, r3, #8
 80030ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a13      	ldr	r2, [pc, #76]	; (8003130 <TIM_OC1_SetConfig+0xc8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d111      	bne.n	800310a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40012c00 	.word	0x40012c00

08003134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f023 0210 	bic.w	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0320 	bic.w	r3, r3, #32
 800317e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <TIM_OC2_SetConfig+0xd0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d10d      	bne.n	80031b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800319a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a14      	ldr	r2, [pc, #80]	; (8003204 <TIM_OC2_SetConfig+0xd0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d113      	bne.n	80031e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40012c00 	.word	0x40012c00

08003208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <TIM_OC3_SetConfig+0xd0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10d      	bne.n	8003282 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800326c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <TIM_OC3_SetConfig+0xd0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d113      	bne.n	80032b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	621a      	str	r2, [r3, #32]
}
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00

080032dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	031b      	lsls	r3, r3, #12
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <TIM_OC4_SetConfig+0x98>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d109      	bne.n	8003350 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	019b      	lsls	r3, r3, #6
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00

08003378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f023 0201 	bic.w	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f023 030a 	bic.w	r3, r3, #10
 80033b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f023 0210 	bic.w	r2, r3, #16
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	031b      	lsls	r3, r3, #12
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003410:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	621a      	str	r2, [r3, #32]
}
 8003428:	bf00      	nop
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	f043 0307 	orr.w	r3, r3, #7
 8003454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003466:	b480      	push	{r7}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003480:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	021a      	lsls	r2, r3, #8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	431a      	orrs	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4313      	orrs	r3, r2
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	609a      	str	r2, [r3, #8]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2201      	movs	r2, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1a      	ldr	r2, [r3, #32]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	401a      	ands	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a1a      	ldr	r2, [r3, #32]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003500:	2302      	movs	r3, #2
 8003502:	e046      	b.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a16      	ldr	r2, [pc, #88]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00e      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d009      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d10c      	bne.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800356c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	4313      	orrs	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40000800 	.word	0x40000800

080035a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e03f      	b.n	800365e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd fea2 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800360e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fc25 	bl	8003e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b08a      	sub	sp, #40	; 0x28
 800366a:	af02      	add	r7, sp, #8
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b20      	cmp	r3, #32
 8003684:	d17c      	bne.n	8003780 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_UART_Transmit+0x2c>
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e075      	b.n	8003782 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit+0x3e>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e06e      	b.n	8003782 <HAL_UART_Transmit+0x11c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2221      	movs	r2, #33	; 0x21
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ba:	f7fe f893 	bl	80017e4 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d4:	d108      	bne.n	80036e8 <HAL_UART_Transmit+0x82>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	e003      	b.n	80036f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036f8:	e02a      	b.n	8003750 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fa11 	bl	8003b2c <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e036      	b.n	8003782 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	3302      	adds	r3, #2
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	e007      	b.n	8003742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	3301      	adds	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1cf      	bne.n	80036fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f9e1 	bl	8003b2c <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e006      	b.n	8003782 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_UART_IRQHandler+0x52>
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa99 	bl	8003d0e <UART_Receive_IT>
      return;
 80037dc:	e17b      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80b1 	beq.w	8003948 <HAL_UART_IRQHandler+0x1bc>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <HAL_UART_IRQHandler+0x70>
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80a6 	beq.w	8003948 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_UART_IRQHandler+0x90>
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f043 0201 	orr.w	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_UART_IRQHandler+0xb0>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f043 0202 	orr.w	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_UART_IRQHandler+0xd0>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00f      	beq.n	8003886 <HAL_UART_IRQHandler+0xfa>
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <HAL_UART_IRQHandler+0xee>
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f043 0208 	orr.w	r2, r3, #8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 811e 	beq.w	8003acc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_UART_IRQHandler+0x11e>
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fa32 	bl	8003d0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <HAL_UART_IRQHandler+0x146>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d031      	beq.n	8003936 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f974 	bl	8003bc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d023      	beq.n	800392e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d013      	beq.n	8003926 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	4a76      	ldr	r2, [pc, #472]	; (8003adc <HAL_UART_IRQHandler+0x350>)
 8003904:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe f8bc 	bl	8001a88 <HAL_DMA_Abort_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d016      	beq.n	8003944 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003920:	4610      	mov	r0, r2
 8003922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	e00e      	b.n	8003944 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8ec 	bl	8003b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e00a      	b.n	8003944 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8e8 	bl	8003b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	e006      	b.n	8003944 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8e4 	bl	8003b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003942:	e0c3      	b.n	8003acc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	bf00      	nop
    return;
 8003946:	e0c1      	b.n	8003acc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	2b01      	cmp	r3, #1
 800394e:	f040 80a1 	bne.w	8003a94 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 809b 	beq.w	8003a94 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8095 	beq.w	8003a94 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d04e      	beq.n	8003a2c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003998:	8a3b      	ldrh	r3, [r7, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8098 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039a4:	8a3a      	ldrh	r2, [r7, #16]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	f080 8092 	bcs.w	8003ad0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8a3a      	ldrh	r2, [r7, #16]
 80039b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d02b      	beq.n	8003a14 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0210 	bic.w	r2, r2, #16
 8003a08:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd ffff 	bl	8001a12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f876 	bl	8003b16 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a2a:	e051      	b.n	8003ad0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d047      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a44:	8a7b      	ldrh	r3, [r7, #18]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d044      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a58:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a88:	8a7b      	ldrh	r3, [r7, #18]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f842 	bl	8003b16 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a92:	e01f      	b.n	8003ad4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x324>
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f8c9 	bl	8003c40 <UART_Transmit_IT>
    return;
 8003aae:	e012      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f90a 	bl	8003cde <UART_EndTransmit_IT>
    return;
 8003aca:	e004      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003acc:	bf00      	nop
 8003ace:	e002      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ad4:	bf00      	nop
  }
}
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	08003c19 	.word	0x08003c19

08003ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3c:	e02c      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d028      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4c:	f7fd fe4a 	bl	80017e4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d21d      	bcs.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e00f      	b.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d0c3      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0210 	bic.w	r2, r2, #16
 8003bfe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff ff66 	bl	8003b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b21      	cmp	r3, #33	; 0x21
 8003c52:	d13e      	bne.n	8003cd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d114      	bne.n	8003c88 <UART_Transmit_IT+0x48>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d110      	bne.n	8003c88 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	1c9a      	adds	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]
 8003c86:	e008      	b.n	8003c9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	1c59      	adds	r1, r3, #1
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6211      	str	r1, [r2, #32]
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ccc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff feee 	bl	8003ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b22      	cmp	r3, #34	; 0x22
 8003d20:	f040 8099 	bne.w	8003e56 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2c:	d117      	bne.n	8003d5e <UART_Receive_IT+0x50>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d113      	bne.n	8003d5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	1c9a      	adds	r2, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d5c:	e026      	b.n	8003dac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d70:	d007      	beq.n	8003d82 <UART_Receive_IT+0x74>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <UART_Receive_IT+0x82>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e008      	b.n	8003da2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	4619      	mov	r1, r3
 8003dba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d148      	bne.n	8003e52 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0220 	bic.w	r2, r2, #32
 8003dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d123      	bne.n	8003e48 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0210 	bic.w	r2, r2, #16
 8003e14:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d10a      	bne.n	8003e3a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fe68 	bl	8003b16 <HAL_UARTEx_RxEventCallback>
 8003e46:	e002      	b.n	8003e4e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff fe52 	bl	8003af2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e002      	b.n	8003e58 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e9a:	f023 030c 	bic.w	r3, r3, #12
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2c      	ldr	r2, [pc, #176]	; (8003f74 <UART_SetConfig+0x114>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d103      	bne.n	8003ed0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7fe fbf0 	bl	80026ac <HAL_RCC_GetPCLK2Freq>
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	e002      	b.n	8003ed6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7fe fbd8 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003ed4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009a      	lsls	r2, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <UART_SetConfig+0x118>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	0119      	lsls	r1, r3, #4
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009a      	lsls	r2, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f0c:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <UART_SetConfig+0x118>)
 8003f0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2064      	movs	r0, #100	; 0x64
 8003f16:	fb00 f303 	mul.w	r3, r0, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	3332      	adds	r3, #50	; 0x32
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <UART_SetConfig+0x118>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2c:	4419      	add	r1, r3
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009a      	lsls	r2, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <UART_SetConfig+0x118>)
 8003f46:	fba3 0302 	umull	r0, r3, r3, r2
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2064      	movs	r0, #100	; 0x64
 8003f4e:	fb00 f303 	mul.w	r3, r0, r3
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	3332      	adds	r3, #50	; 0x32
 8003f58:	4a07      	ldr	r2, [pc, #28]	; (8003f78 <UART_SetConfig+0x118>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	440a      	add	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40013800 	.word	0x40013800
 8003f78:	51eb851f 	.word	0x51eb851f

08003f7c <__errno>:
 8003f7c:	4b01      	ldr	r3, [pc, #4]	; (8003f84 <__errno+0x8>)
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	2000003c 	.word	0x2000003c

08003f88 <__libc_init_array>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	2600      	movs	r6, #0
 8003f8c:	4d0c      	ldr	r5, [pc, #48]	; (8003fc0 <__libc_init_array+0x38>)
 8003f8e:	4c0d      	ldr	r4, [pc, #52]	; (8003fc4 <__libc_init_array+0x3c>)
 8003f90:	1b64      	subs	r4, r4, r5
 8003f92:	10a4      	asrs	r4, r4, #2
 8003f94:	42a6      	cmp	r6, r4
 8003f96:	d109      	bne.n	8003fac <__libc_init_array+0x24>
 8003f98:	f000 fc5c 	bl	8004854 <_init>
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	4d0a      	ldr	r5, [pc, #40]	; (8003fc8 <__libc_init_array+0x40>)
 8003fa0:	4c0a      	ldr	r4, [pc, #40]	; (8003fcc <__libc_init_array+0x44>)
 8003fa2:	1b64      	subs	r4, r4, r5
 8003fa4:	10a4      	asrs	r4, r4, #2
 8003fa6:	42a6      	cmp	r6, r4
 8003fa8:	d105      	bne.n	8003fb6 <__libc_init_array+0x2e>
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb0:	4798      	blx	r3
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7ee      	b.n	8003f94 <__libc_init_array+0xc>
 8003fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fba:	4798      	blx	r3
 8003fbc:	3601      	adds	r6, #1
 8003fbe:	e7f2      	b.n	8003fa6 <__libc_init_array+0x1e>
 8003fc0:	080048e0 	.word	0x080048e0
 8003fc4:	080048e0 	.word	0x080048e0
 8003fc8:	080048e0 	.word	0x080048e0
 8003fcc:	080048e4 	.word	0x080048e4

08003fd0 <memset>:
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4402      	add	r2, r0
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d100      	bne.n	8003fda <memset+0xa>
 8003fd8:	4770      	bx	lr
 8003fda:	f803 1b01 	strb.w	r1, [r3], #1
 8003fde:	e7f9      	b.n	8003fd4 <memset+0x4>

08003fe0 <siprintf>:
 8003fe0:	b40e      	push	{r1, r2, r3}
 8003fe2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fe6:	b500      	push	{lr}
 8003fe8:	b09c      	sub	sp, #112	; 0x70
 8003fea:	ab1d      	add	r3, sp, #116	; 0x74
 8003fec:	9002      	str	r0, [sp, #8]
 8003fee:	9006      	str	r0, [sp, #24]
 8003ff0:	9107      	str	r1, [sp, #28]
 8003ff2:	9104      	str	r1, [sp, #16]
 8003ff4:	4808      	ldr	r0, [pc, #32]	; (8004018 <siprintf+0x38>)
 8003ff6:	4909      	ldr	r1, [pc, #36]	; (800401c <siprintf+0x3c>)
 8003ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ffc:	9105      	str	r1, [sp, #20]
 8003ffe:	6800      	ldr	r0, [r0, #0]
 8004000:	a902      	add	r1, sp, #8
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	f000 f868 	bl	80040d8 <_svfiprintf_r>
 8004008:	2200      	movs	r2, #0
 800400a:	9b02      	ldr	r3, [sp, #8]
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	b01c      	add	sp, #112	; 0x70
 8004010:	f85d eb04 	ldr.w	lr, [sp], #4
 8004014:	b003      	add	sp, #12
 8004016:	4770      	bx	lr
 8004018:	2000003c 	.word	0x2000003c
 800401c:	ffff0208 	.word	0xffff0208

08004020 <__ssputs_r>:
 8004020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004024:	688e      	ldr	r6, [r1, #8]
 8004026:	4682      	mov	sl, r0
 8004028:	429e      	cmp	r6, r3
 800402a:	460c      	mov	r4, r1
 800402c:	4690      	mov	r8, r2
 800402e:	461f      	mov	r7, r3
 8004030:	d838      	bhi.n	80040a4 <__ssputs_r+0x84>
 8004032:	898a      	ldrh	r2, [r1, #12]
 8004034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004038:	d032      	beq.n	80040a0 <__ssputs_r+0x80>
 800403a:	6825      	ldr	r5, [r4, #0]
 800403c:	6909      	ldr	r1, [r1, #16]
 800403e:	3301      	adds	r3, #1
 8004040:	eba5 0901 	sub.w	r9, r5, r1
 8004044:	6965      	ldr	r5, [r4, #20]
 8004046:	444b      	add	r3, r9
 8004048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800404c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004050:	106d      	asrs	r5, r5, #1
 8004052:	429d      	cmp	r5, r3
 8004054:	bf38      	it	cc
 8004056:	461d      	movcc	r5, r3
 8004058:	0553      	lsls	r3, r2, #21
 800405a:	d531      	bpl.n	80040c0 <__ssputs_r+0xa0>
 800405c:	4629      	mov	r1, r5
 800405e:	f000 fb53 	bl	8004708 <_malloc_r>
 8004062:	4606      	mov	r6, r0
 8004064:	b950      	cbnz	r0, 800407c <__ssputs_r+0x5c>
 8004066:	230c      	movs	r3, #12
 8004068:	f04f 30ff 	mov.w	r0, #4294967295
 800406c:	f8ca 3000 	str.w	r3, [sl]
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407c:	464a      	mov	r2, r9
 800407e:	6921      	ldr	r1, [r4, #16]
 8004080:	f000 face 	bl	8004620 <memcpy>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800408a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	6126      	str	r6, [r4, #16]
 8004092:	444e      	add	r6, r9
 8004094:	6026      	str	r6, [r4, #0]
 8004096:	463e      	mov	r6, r7
 8004098:	6165      	str	r5, [r4, #20]
 800409a:	eba5 0509 	sub.w	r5, r5, r9
 800409e:	60a5      	str	r5, [r4, #8]
 80040a0:	42be      	cmp	r6, r7
 80040a2:	d900      	bls.n	80040a6 <__ssputs_r+0x86>
 80040a4:	463e      	mov	r6, r7
 80040a6:	4632      	mov	r2, r6
 80040a8:	4641      	mov	r1, r8
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	f000 fac6 	bl	800463c <memmove>
 80040b0:	68a3      	ldr	r3, [r4, #8]
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	1b9b      	subs	r3, r3, r6
 80040b6:	4432      	add	r2, r6
 80040b8:	2000      	movs	r0, #0
 80040ba:	60a3      	str	r3, [r4, #8]
 80040bc:	6022      	str	r2, [r4, #0]
 80040be:	e7db      	b.n	8004078 <__ssputs_r+0x58>
 80040c0:	462a      	mov	r2, r5
 80040c2:	f000 fb7b 	bl	80047bc <_realloc_r>
 80040c6:	4606      	mov	r6, r0
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d1e1      	bne.n	8004090 <__ssputs_r+0x70>
 80040cc:	4650      	mov	r0, sl
 80040ce:	6921      	ldr	r1, [r4, #16]
 80040d0:	f000 face 	bl	8004670 <_free_r>
 80040d4:	e7c7      	b.n	8004066 <__ssputs_r+0x46>
	...

080040d8 <_svfiprintf_r>:
 80040d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040dc:	4698      	mov	r8, r3
 80040de:	898b      	ldrh	r3, [r1, #12]
 80040e0:	4607      	mov	r7, r0
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	460d      	mov	r5, r1
 80040e6:	4614      	mov	r4, r2
 80040e8:	b09d      	sub	sp, #116	; 0x74
 80040ea:	d50e      	bpl.n	800410a <_svfiprintf_r+0x32>
 80040ec:	690b      	ldr	r3, [r1, #16]
 80040ee:	b963      	cbnz	r3, 800410a <_svfiprintf_r+0x32>
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	f000 fb09 	bl	8004708 <_malloc_r>
 80040f6:	6028      	str	r0, [r5, #0]
 80040f8:	6128      	str	r0, [r5, #16]
 80040fa:	b920      	cbnz	r0, 8004106 <_svfiprintf_r+0x2e>
 80040fc:	230c      	movs	r3, #12
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	e0d1      	b.n	80042aa <_svfiprintf_r+0x1d2>
 8004106:	2340      	movs	r3, #64	; 0x40
 8004108:	616b      	str	r3, [r5, #20]
 800410a:	2300      	movs	r3, #0
 800410c:	9309      	str	r3, [sp, #36]	; 0x24
 800410e:	2320      	movs	r3, #32
 8004110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004114:	2330      	movs	r3, #48	; 0x30
 8004116:	f04f 0901 	mov.w	r9, #1
 800411a:	f8cd 800c 	str.w	r8, [sp, #12]
 800411e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042c4 <_svfiprintf_r+0x1ec>
 8004122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004126:	4623      	mov	r3, r4
 8004128:	469a      	mov	sl, r3
 800412a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800412e:	b10a      	cbz	r2, 8004134 <_svfiprintf_r+0x5c>
 8004130:	2a25      	cmp	r2, #37	; 0x25
 8004132:	d1f9      	bne.n	8004128 <_svfiprintf_r+0x50>
 8004134:	ebba 0b04 	subs.w	fp, sl, r4
 8004138:	d00b      	beq.n	8004152 <_svfiprintf_r+0x7a>
 800413a:	465b      	mov	r3, fp
 800413c:	4622      	mov	r2, r4
 800413e:	4629      	mov	r1, r5
 8004140:	4638      	mov	r0, r7
 8004142:	f7ff ff6d 	bl	8004020 <__ssputs_r>
 8004146:	3001      	adds	r0, #1
 8004148:	f000 80aa 	beq.w	80042a0 <_svfiprintf_r+0x1c8>
 800414c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800414e:	445a      	add	r2, fp
 8004150:	9209      	str	r2, [sp, #36]	; 0x24
 8004152:	f89a 3000 	ldrb.w	r3, [sl]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80a2 	beq.w	80042a0 <_svfiprintf_r+0x1c8>
 800415c:	2300      	movs	r3, #0
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004166:	f10a 0a01 	add.w	sl, sl, #1
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	9307      	str	r3, [sp, #28]
 800416e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004172:	931a      	str	r3, [sp, #104]	; 0x68
 8004174:	4654      	mov	r4, sl
 8004176:	2205      	movs	r2, #5
 8004178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800417c:	4851      	ldr	r0, [pc, #324]	; (80042c4 <_svfiprintf_r+0x1ec>)
 800417e:	f000 fa41 	bl	8004604 <memchr>
 8004182:	9a04      	ldr	r2, [sp, #16]
 8004184:	b9d8      	cbnz	r0, 80041be <_svfiprintf_r+0xe6>
 8004186:	06d0      	lsls	r0, r2, #27
 8004188:	bf44      	itt	mi
 800418a:	2320      	movmi	r3, #32
 800418c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004190:	0711      	lsls	r1, r2, #28
 8004192:	bf44      	itt	mi
 8004194:	232b      	movmi	r3, #43	; 0x2b
 8004196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800419a:	f89a 3000 	ldrb.w	r3, [sl]
 800419e:	2b2a      	cmp	r3, #42	; 0x2a
 80041a0:	d015      	beq.n	80041ce <_svfiprintf_r+0xf6>
 80041a2:	4654      	mov	r4, sl
 80041a4:	2000      	movs	r0, #0
 80041a6:	f04f 0c0a 	mov.w	ip, #10
 80041aa:	9a07      	ldr	r2, [sp, #28]
 80041ac:	4621      	mov	r1, r4
 80041ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041b2:	3b30      	subs	r3, #48	; 0x30
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d94e      	bls.n	8004256 <_svfiprintf_r+0x17e>
 80041b8:	b1b0      	cbz	r0, 80041e8 <_svfiprintf_r+0x110>
 80041ba:	9207      	str	r2, [sp, #28]
 80041bc:	e014      	b.n	80041e8 <_svfiprintf_r+0x110>
 80041be:	eba0 0308 	sub.w	r3, r0, r8
 80041c2:	fa09 f303 	lsl.w	r3, r9, r3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	46a2      	mov	sl, r4
 80041ca:	9304      	str	r3, [sp, #16]
 80041cc:	e7d2      	b.n	8004174 <_svfiprintf_r+0x9c>
 80041ce:	9b03      	ldr	r3, [sp, #12]
 80041d0:	1d19      	adds	r1, r3, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	9103      	str	r1, [sp, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bfbb      	ittet	lt
 80041da:	425b      	neglt	r3, r3
 80041dc:	f042 0202 	orrlt.w	r2, r2, #2
 80041e0:	9307      	strge	r3, [sp, #28]
 80041e2:	9307      	strlt	r3, [sp, #28]
 80041e4:	bfb8      	it	lt
 80041e6:	9204      	strlt	r2, [sp, #16]
 80041e8:	7823      	ldrb	r3, [r4, #0]
 80041ea:	2b2e      	cmp	r3, #46	; 0x2e
 80041ec:	d10c      	bne.n	8004208 <_svfiprintf_r+0x130>
 80041ee:	7863      	ldrb	r3, [r4, #1]
 80041f0:	2b2a      	cmp	r3, #42	; 0x2a
 80041f2:	d135      	bne.n	8004260 <_svfiprintf_r+0x188>
 80041f4:	9b03      	ldr	r3, [sp, #12]
 80041f6:	3402      	adds	r4, #2
 80041f8:	1d1a      	adds	r2, r3, #4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	9203      	str	r2, [sp, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bfb8      	it	lt
 8004202:	f04f 33ff 	movlt.w	r3, #4294967295
 8004206:	9305      	str	r3, [sp, #20]
 8004208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042d4 <_svfiprintf_r+0x1fc>
 800420c:	2203      	movs	r2, #3
 800420e:	4650      	mov	r0, sl
 8004210:	7821      	ldrb	r1, [r4, #0]
 8004212:	f000 f9f7 	bl	8004604 <memchr>
 8004216:	b140      	cbz	r0, 800422a <_svfiprintf_r+0x152>
 8004218:	2340      	movs	r3, #64	; 0x40
 800421a:	eba0 000a 	sub.w	r0, r0, sl
 800421e:	fa03 f000 	lsl.w	r0, r3, r0
 8004222:	9b04      	ldr	r3, [sp, #16]
 8004224:	3401      	adds	r4, #1
 8004226:	4303      	orrs	r3, r0
 8004228:	9304      	str	r3, [sp, #16]
 800422a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800422e:	2206      	movs	r2, #6
 8004230:	4825      	ldr	r0, [pc, #148]	; (80042c8 <_svfiprintf_r+0x1f0>)
 8004232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004236:	f000 f9e5 	bl	8004604 <memchr>
 800423a:	2800      	cmp	r0, #0
 800423c:	d038      	beq.n	80042b0 <_svfiprintf_r+0x1d8>
 800423e:	4b23      	ldr	r3, [pc, #140]	; (80042cc <_svfiprintf_r+0x1f4>)
 8004240:	bb1b      	cbnz	r3, 800428a <_svfiprintf_r+0x1b2>
 8004242:	9b03      	ldr	r3, [sp, #12]
 8004244:	3307      	adds	r3, #7
 8004246:	f023 0307 	bic.w	r3, r3, #7
 800424a:	3308      	adds	r3, #8
 800424c:	9303      	str	r3, [sp, #12]
 800424e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004250:	4433      	add	r3, r6
 8004252:	9309      	str	r3, [sp, #36]	; 0x24
 8004254:	e767      	b.n	8004126 <_svfiprintf_r+0x4e>
 8004256:	460c      	mov	r4, r1
 8004258:	2001      	movs	r0, #1
 800425a:	fb0c 3202 	mla	r2, ip, r2, r3
 800425e:	e7a5      	b.n	80041ac <_svfiprintf_r+0xd4>
 8004260:	2300      	movs	r3, #0
 8004262:	f04f 0c0a 	mov.w	ip, #10
 8004266:	4619      	mov	r1, r3
 8004268:	3401      	adds	r4, #1
 800426a:	9305      	str	r3, [sp, #20]
 800426c:	4620      	mov	r0, r4
 800426e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004272:	3a30      	subs	r2, #48	; 0x30
 8004274:	2a09      	cmp	r2, #9
 8004276:	d903      	bls.n	8004280 <_svfiprintf_r+0x1a8>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0c5      	beq.n	8004208 <_svfiprintf_r+0x130>
 800427c:	9105      	str	r1, [sp, #20]
 800427e:	e7c3      	b.n	8004208 <_svfiprintf_r+0x130>
 8004280:	4604      	mov	r4, r0
 8004282:	2301      	movs	r3, #1
 8004284:	fb0c 2101 	mla	r1, ip, r1, r2
 8004288:	e7f0      	b.n	800426c <_svfiprintf_r+0x194>
 800428a:	ab03      	add	r3, sp, #12
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	462a      	mov	r2, r5
 8004290:	4638      	mov	r0, r7
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <_svfiprintf_r+0x1f8>)
 8004294:	a904      	add	r1, sp, #16
 8004296:	f3af 8000 	nop.w
 800429a:	1c42      	adds	r2, r0, #1
 800429c:	4606      	mov	r6, r0
 800429e:	d1d6      	bne.n	800424e <_svfiprintf_r+0x176>
 80042a0:	89ab      	ldrh	r3, [r5, #12]
 80042a2:	065b      	lsls	r3, r3, #25
 80042a4:	f53f af2c 	bmi.w	8004100 <_svfiprintf_r+0x28>
 80042a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042aa:	b01d      	add	sp, #116	; 0x74
 80042ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b0:	ab03      	add	r3, sp, #12
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	462a      	mov	r2, r5
 80042b6:	4638      	mov	r0, r7
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <_svfiprintf_r+0x1f8>)
 80042ba:	a904      	add	r1, sp, #16
 80042bc:	f000 f87c 	bl	80043b8 <_printf_i>
 80042c0:	e7eb      	b.n	800429a <_svfiprintf_r+0x1c2>
 80042c2:	bf00      	nop
 80042c4:	080048ac 	.word	0x080048ac
 80042c8:	080048b6 	.word	0x080048b6
 80042cc:	00000000 	.word	0x00000000
 80042d0:	08004021 	.word	0x08004021
 80042d4:	080048b2 	.word	0x080048b2

080042d8 <_printf_common>:
 80042d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042dc:	4616      	mov	r6, r2
 80042de:	4699      	mov	r9, r3
 80042e0:	688a      	ldr	r2, [r1, #8]
 80042e2:	690b      	ldr	r3, [r1, #16]
 80042e4:	4607      	mov	r7, r0
 80042e6:	4293      	cmp	r3, r2
 80042e8:	bfb8      	it	lt
 80042ea:	4613      	movlt	r3, r2
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042f2:	460c      	mov	r4, r1
 80042f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f8:	b10a      	cbz	r2, 80042fe <_printf_common+0x26>
 80042fa:	3301      	adds	r3, #1
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	0699      	lsls	r1, r3, #26
 8004302:	bf42      	ittt	mi
 8004304:	6833      	ldrmi	r3, [r6, #0]
 8004306:	3302      	addmi	r3, #2
 8004308:	6033      	strmi	r3, [r6, #0]
 800430a:	6825      	ldr	r5, [r4, #0]
 800430c:	f015 0506 	ands.w	r5, r5, #6
 8004310:	d106      	bne.n	8004320 <_printf_common+0x48>
 8004312:	f104 0a19 	add.w	sl, r4, #25
 8004316:	68e3      	ldr	r3, [r4, #12]
 8004318:	6832      	ldr	r2, [r6, #0]
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	42ab      	cmp	r3, r5
 800431e:	dc28      	bgt.n	8004372 <_printf_common+0x9a>
 8004320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004324:	1e13      	subs	r3, r2, #0
 8004326:	6822      	ldr	r2, [r4, #0]
 8004328:	bf18      	it	ne
 800432a:	2301      	movne	r3, #1
 800432c:	0692      	lsls	r2, r2, #26
 800432e:	d42d      	bmi.n	800438c <_printf_common+0xb4>
 8004330:	4649      	mov	r1, r9
 8004332:	4638      	mov	r0, r7
 8004334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004338:	47c0      	blx	r8
 800433a:	3001      	adds	r0, #1
 800433c:	d020      	beq.n	8004380 <_printf_common+0xa8>
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	68e5      	ldr	r5, [r4, #12]
 8004342:	f003 0306 	and.w	r3, r3, #6
 8004346:	2b04      	cmp	r3, #4
 8004348:	bf18      	it	ne
 800434a:	2500      	movne	r5, #0
 800434c:	6832      	ldr	r2, [r6, #0]
 800434e:	f04f 0600 	mov.w	r6, #0
 8004352:	68a3      	ldr	r3, [r4, #8]
 8004354:	bf08      	it	eq
 8004356:	1aad      	subeq	r5, r5, r2
 8004358:	6922      	ldr	r2, [r4, #16]
 800435a:	bf08      	it	eq
 800435c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004360:	4293      	cmp	r3, r2
 8004362:	bfc4      	itt	gt
 8004364:	1a9b      	subgt	r3, r3, r2
 8004366:	18ed      	addgt	r5, r5, r3
 8004368:	341a      	adds	r4, #26
 800436a:	42b5      	cmp	r5, r6
 800436c:	d11a      	bne.n	80043a4 <_printf_common+0xcc>
 800436e:	2000      	movs	r0, #0
 8004370:	e008      	b.n	8004384 <_printf_common+0xac>
 8004372:	2301      	movs	r3, #1
 8004374:	4652      	mov	r2, sl
 8004376:	4649      	mov	r1, r9
 8004378:	4638      	mov	r0, r7
 800437a:	47c0      	blx	r8
 800437c:	3001      	adds	r0, #1
 800437e:	d103      	bne.n	8004388 <_printf_common+0xb0>
 8004380:	f04f 30ff 	mov.w	r0, #4294967295
 8004384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004388:	3501      	adds	r5, #1
 800438a:	e7c4      	b.n	8004316 <_printf_common+0x3e>
 800438c:	2030      	movs	r0, #48	; 0x30
 800438e:	18e1      	adds	r1, r4, r3
 8004390:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800439a:	4422      	add	r2, r4
 800439c:	3302      	adds	r3, #2
 800439e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043a2:	e7c5      	b.n	8004330 <_printf_common+0x58>
 80043a4:	2301      	movs	r3, #1
 80043a6:	4622      	mov	r2, r4
 80043a8:	4649      	mov	r1, r9
 80043aa:	4638      	mov	r0, r7
 80043ac:	47c0      	blx	r8
 80043ae:	3001      	adds	r0, #1
 80043b0:	d0e6      	beq.n	8004380 <_printf_common+0xa8>
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7d9      	b.n	800436a <_printf_common+0x92>
	...

080043b8 <_printf_i>:
 80043b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	460c      	mov	r4, r1
 80043be:	7e27      	ldrb	r7, [r4, #24]
 80043c0:	4691      	mov	r9, r2
 80043c2:	2f78      	cmp	r7, #120	; 0x78
 80043c4:	4680      	mov	r8, r0
 80043c6:	469a      	mov	sl, r3
 80043c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ce:	d807      	bhi.n	80043e0 <_printf_i+0x28>
 80043d0:	2f62      	cmp	r7, #98	; 0x62
 80043d2:	d80a      	bhi.n	80043ea <_printf_i+0x32>
 80043d4:	2f00      	cmp	r7, #0
 80043d6:	f000 80d9 	beq.w	800458c <_printf_i+0x1d4>
 80043da:	2f58      	cmp	r7, #88	; 0x58
 80043dc:	f000 80a4 	beq.w	8004528 <_printf_i+0x170>
 80043e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e8:	e03a      	b.n	8004460 <_printf_i+0xa8>
 80043ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ee:	2b15      	cmp	r3, #21
 80043f0:	d8f6      	bhi.n	80043e0 <_printf_i+0x28>
 80043f2:	a001      	add	r0, pc, #4	; (adr r0, 80043f8 <_printf_i+0x40>)
 80043f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043f8:	08004451 	.word	0x08004451
 80043fc:	08004465 	.word	0x08004465
 8004400:	080043e1 	.word	0x080043e1
 8004404:	080043e1 	.word	0x080043e1
 8004408:	080043e1 	.word	0x080043e1
 800440c:	080043e1 	.word	0x080043e1
 8004410:	08004465 	.word	0x08004465
 8004414:	080043e1 	.word	0x080043e1
 8004418:	080043e1 	.word	0x080043e1
 800441c:	080043e1 	.word	0x080043e1
 8004420:	080043e1 	.word	0x080043e1
 8004424:	08004573 	.word	0x08004573
 8004428:	08004495 	.word	0x08004495
 800442c:	08004555 	.word	0x08004555
 8004430:	080043e1 	.word	0x080043e1
 8004434:	080043e1 	.word	0x080043e1
 8004438:	08004595 	.word	0x08004595
 800443c:	080043e1 	.word	0x080043e1
 8004440:	08004495 	.word	0x08004495
 8004444:	080043e1 	.word	0x080043e1
 8004448:	080043e1 	.word	0x080043e1
 800444c:	0800455d 	.word	0x0800455d
 8004450:	680b      	ldr	r3, [r1, #0]
 8004452:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004456:	1d1a      	adds	r2, r3, #4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	600a      	str	r2, [r1, #0]
 800445c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004460:	2301      	movs	r3, #1
 8004462:	e0a4      	b.n	80045ae <_printf_i+0x1f6>
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	6808      	ldr	r0, [r1, #0]
 8004468:	062e      	lsls	r6, r5, #24
 800446a:	f100 0304 	add.w	r3, r0, #4
 800446e:	d50a      	bpl.n	8004486 <_printf_i+0xce>
 8004470:	6805      	ldr	r5, [r0, #0]
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	2d00      	cmp	r5, #0
 8004476:	da03      	bge.n	8004480 <_printf_i+0xc8>
 8004478:	232d      	movs	r3, #45	; 0x2d
 800447a:	426d      	negs	r5, r5
 800447c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004480:	230a      	movs	r3, #10
 8004482:	485e      	ldr	r0, [pc, #376]	; (80045fc <_printf_i+0x244>)
 8004484:	e019      	b.n	80044ba <_printf_i+0x102>
 8004486:	f015 0f40 	tst.w	r5, #64	; 0x40
 800448a:	6805      	ldr	r5, [r0, #0]
 800448c:	600b      	str	r3, [r1, #0]
 800448e:	bf18      	it	ne
 8004490:	b22d      	sxthne	r5, r5
 8004492:	e7ef      	b.n	8004474 <_printf_i+0xbc>
 8004494:	680b      	ldr	r3, [r1, #0]
 8004496:	6825      	ldr	r5, [r4, #0]
 8004498:	1d18      	adds	r0, r3, #4
 800449a:	6008      	str	r0, [r1, #0]
 800449c:	0628      	lsls	r0, r5, #24
 800449e:	d501      	bpl.n	80044a4 <_printf_i+0xec>
 80044a0:	681d      	ldr	r5, [r3, #0]
 80044a2:	e002      	b.n	80044aa <_printf_i+0xf2>
 80044a4:	0669      	lsls	r1, r5, #25
 80044a6:	d5fb      	bpl.n	80044a0 <_printf_i+0xe8>
 80044a8:	881d      	ldrh	r5, [r3, #0]
 80044aa:	2f6f      	cmp	r7, #111	; 0x6f
 80044ac:	bf0c      	ite	eq
 80044ae:	2308      	moveq	r3, #8
 80044b0:	230a      	movne	r3, #10
 80044b2:	4852      	ldr	r0, [pc, #328]	; (80045fc <_printf_i+0x244>)
 80044b4:	2100      	movs	r1, #0
 80044b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044ba:	6866      	ldr	r6, [r4, #4]
 80044bc:	2e00      	cmp	r6, #0
 80044be:	bfa8      	it	ge
 80044c0:	6821      	ldrge	r1, [r4, #0]
 80044c2:	60a6      	str	r6, [r4, #8]
 80044c4:	bfa4      	itt	ge
 80044c6:	f021 0104 	bicge.w	r1, r1, #4
 80044ca:	6021      	strge	r1, [r4, #0]
 80044cc:	b90d      	cbnz	r5, 80044d2 <_printf_i+0x11a>
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	d04d      	beq.n	800456e <_printf_i+0x1b6>
 80044d2:	4616      	mov	r6, r2
 80044d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80044d8:	fb03 5711 	mls	r7, r3, r1, r5
 80044dc:	5dc7      	ldrb	r7, [r0, r7]
 80044de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044e2:	462f      	mov	r7, r5
 80044e4:	42bb      	cmp	r3, r7
 80044e6:	460d      	mov	r5, r1
 80044e8:	d9f4      	bls.n	80044d4 <_printf_i+0x11c>
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d10b      	bne.n	8004506 <_printf_i+0x14e>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	07df      	lsls	r7, r3, #31
 80044f2:	d508      	bpl.n	8004506 <_printf_i+0x14e>
 80044f4:	6923      	ldr	r3, [r4, #16]
 80044f6:	6861      	ldr	r1, [r4, #4]
 80044f8:	4299      	cmp	r1, r3
 80044fa:	bfde      	ittt	le
 80044fc:	2330      	movle	r3, #48	; 0x30
 80044fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004502:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004506:	1b92      	subs	r2, r2, r6
 8004508:	6122      	str	r2, [r4, #16]
 800450a:	464b      	mov	r3, r9
 800450c:	4621      	mov	r1, r4
 800450e:	4640      	mov	r0, r8
 8004510:	f8cd a000 	str.w	sl, [sp]
 8004514:	aa03      	add	r2, sp, #12
 8004516:	f7ff fedf 	bl	80042d8 <_printf_common>
 800451a:	3001      	adds	r0, #1
 800451c:	d14c      	bne.n	80045b8 <_printf_i+0x200>
 800451e:	f04f 30ff 	mov.w	r0, #4294967295
 8004522:	b004      	add	sp, #16
 8004524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004528:	4834      	ldr	r0, [pc, #208]	; (80045fc <_printf_i+0x244>)
 800452a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800452e:	680e      	ldr	r6, [r1, #0]
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	f856 5b04 	ldr.w	r5, [r6], #4
 8004536:	061f      	lsls	r7, r3, #24
 8004538:	600e      	str	r6, [r1, #0]
 800453a:	d514      	bpl.n	8004566 <_printf_i+0x1ae>
 800453c:	07d9      	lsls	r1, r3, #31
 800453e:	bf44      	itt	mi
 8004540:	f043 0320 	orrmi.w	r3, r3, #32
 8004544:	6023      	strmi	r3, [r4, #0]
 8004546:	b91d      	cbnz	r5, 8004550 <_printf_i+0x198>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	f023 0320 	bic.w	r3, r3, #32
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	2310      	movs	r3, #16
 8004552:	e7af      	b.n	80044b4 <_printf_i+0xfc>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	f043 0320 	orr.w	r3, r3, #32
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	2378      	movs	r3, #120	; 0x78
 800455e:	4828      	ldr	r0, [pc, #160]	; (8004600 <_printf_i+0x248>)
 8004560:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004564:	e7e3      	b.n	800452e <_printf_i+0x176>
 8004566:	065e      	lsls	r6, r3, #25
 8004568:	bf48      	it	mi
 800456a:	b2ad      	uxthmi	r5, r5
 800456c:	e7e6      	b.n	800453c <_printf_i+0x184>
 800456e:	4616      	mov	r6, r2
 8004570:	e7bb      	b.n	80044ea <_printf_i+0x132>
 8004572:	680b      	ldr	r3, [r1, #0]
 8004574:	6826      	ldr	r6, [r4, #0]
 8004576:	1d1d      	adds	r5, r3, #4
 8004578:	6960      	ldr	r0, [r4, #20]
 800457a:	600d      	str	r5, [r1, #0]
 800457c:	0635      	lsls	r5, r6, #24
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	d501      	bpl.n	8004586 <_printf_i+0x1ce>
 8004582:	6018      	str	r0, [r3, #0]
 8004584:	e002      	b.n	800458c <_printf_i+0x1d4>
 8004586:	0671      	lsls	r1, r6, #25
 8004588:	d5fb      	bpl.n	8004582 <_printf_i+0x1ca>
 800458a:	8018      	strh	r0, [r3, #0]
 800458c:	2300      	movs	r3, #0
 800458e:	4616      	mov	r6, r2
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	e7ba      	b.n	800450a <_printf_i+0x152>
 8004594:	680b      	ldr	r3, [r1, #0]
 8004596:	1d1a      	adds	r2, r3, #4
 8004598:	600a      	str	r2, [r1, #0]
 800459a:	681e      	ldr	r6, [r3, #0]
 800459c:	2100      	movs	r1, #0
 800459e:	4630      	mov	r0, r6
 80045a0:	6862      	ldr	r2, [r4, #4]
 80045a2:	f000 f82f 	bl	8004604 <memchr>
 80045a6:	b108      	cbz	r0, 80045ac <_printf_i+0x1f4>
 80045a8:	1b80      	subs	r0, r0, r6
 80045aa:	6060      	str	r0, [r4, #4]
 80045ac:	6863      	ldr	r3, [r4, #4]
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	2300      	movs	r3, #0
 80045b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b6:	e7a8      	b.n	800450a <_printf_i+0x152>
 80045b8:	4632      	mov	r2, r6
 80045ba:	4649      	mov	r1, r9
 80045bc:	4640      	mov	r0, r8
 80045be:	6923      	ldr	r3, [r4, #16]
 80045c0:	47d0      	blx	sl
 80045c2:	3001      	adds	r0, #1
 80045c4:	d0ab      	beq.n	800451e <_printf_i+0x166>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	079b      	lsls	r3, r3, #30
 80045ca:	d413      	bmi.n	80045f4 <_printf_i+0x23c>
 80045cc:	68e0      	ldr	r0, [r4, #12]
 80045ce:	9b03      	ldr	r3, [sp, #12]
 80045d0:	4298      	cmp	r0, r3
 80045d2:	bfb8      	it	lt
 80045d4:	4618      	movlt	r0, r3
 80045d6:	e7a4      	b.n	8004522 <_printf_i+0x16a>
 80045d8:	2301      	movs	r3, #1
 80045da:	4632      	mov	r2, r6
 80045dc:	4649      	mov	r1, r9
 80045de:	4640      	mov	r0, r8
 80045e0:	47d0      	blx	sl
 80045e2:	3001      	adds	r0, #1
 80045e4:	d09b      	beq.n	800451e <_printf_i+0x166>
 80045e6:	3501      	adds	r5, #1
 80045e8:	68e3      	ldr	r3, [r4, #12]
 80045ea:	9903      	ldr	r1, [sp, #12]
 80045ec:	1a5b      	subs	r3, r3, r1
 80045ee:	42ab      	cmp	r3, r5
 80045f0:	dcf2      	bgt.n	80045d8 <_printf_i+0x220>
 80045f2:	e7eb      	b.n	80045cc <_printf_i+0x214>
 80045f4:	2500      	movs	r5, #0
 80045f6:	f104 0619 	add.w	r6, r4, #25
 80045fa:	e7f5      	b.n	80045e8 <_printf_i+0x230>
 80045fc:	080048bd 	.word	0x080048bd
 8004600:	080048ce 	.word	0x080048ce

08004604 <memchr>:
 8004604:	4603      	mov	r3, r0
 8004606:	b510      	push	{r4, lr}
 8004608:	b2c9      	uxtb	r1, r1
 800460a:	4402      	add	r2, r0
 800460c:	4293      	cmp	r3, r2
 800460e:	4618      	mov	r0, r3
 8004610:	d101      	bne.n	8004616 <memchr+0x12>
 8004612:	2000      	movs	r0, #0
 8004614:	e003      	b.n	800461e <memchr+0x1a>
 8004616:	7804      	ldrb	r4, [r0, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	428c      	cmp	r4, r1
 800461c:	d1f6      	bne.n	800460c <memchr+0x8>
 800461e:	bd10      	pop	{r4, pc}

08004620 <memcpy>:
 8004620:	440a      	add	r2, r1
 8004622:	4291      	cmp	r1, r2
 8004624:	f100 33ff 	add.w	r3, r0, #4294967295
 8004628:	d100      	bne.n	800462c <memcpy+0xc>
 800462a:	4770      	bx	lr
 800462c:	b510      	push	{r4, lr}
 800462e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004632:	4291      	cmp	r1, r2
 8004634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004638:	d1f9      	bne.n	800462e <memcpy+0xe>
 800463a:	bd10      	pop	{r4, pc}

0800463c <memmove>:
 800463c:	4288      	cmp	r0, r1
 800463e:	b510      	push	{r4, lr}
 8004640:	eb01 0402 	add.w	r4, r1, r2
 8004644:	d902      	bls.n	800464c <memmove+0x10>
 8004646:	4284      	cmp	r4, r0
 8004648:	4623      	mov	r3, r4
 800464a:	d807      	bhi.n	800465c <memmove+0x20>
 800464c:	1e43      	subs	r3, r0, #1
 800464e:	42a1      	cmp	r1, r4
 8004650:	d008      	beq.n	8004664 <memmove+0x28>
 8004652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800465a:	e7f8      	b.n	800464e <memmove+0x12>
 800465c:	4601      	mov	r1, r0
 800465e:	4402      	add	r2, r0
 8004660:	428a      	cmp	r2, r1
 8004662:	d100      	bne.n	8004666 <memmove+0x2a>
 8004664:	bd10      	pop	{r4, pc}
 8004666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800466a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800466e:	e7f7      	b.n	8004660 <memmove+0x24>

08004670 <_free_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4605      	mov	r5, r0
 8004674:	2900      	cmp	r1, #0
 8004676:	d043      	beq.n	8004700 <_free_r+0x90>
 8004678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800467c:	1f0c      	subs	r4, r1, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	bfb8      	it	lt
 8004682:	18e4      	addlt	r4, r4, r3
 8004684:	f000 f8d0 	bl	8004828 <__malloc_lock>
 8004688:	4a1e      	ldr	r2, [pc, #120]	; (8004704 <_free_r+0x94>)
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	4610      	mov	r0, r2
 800468e:	b933      	cbnz	r3, 800469e <_free_r+0x2e>
 8004690:	6063      	str	r3, [r4, #4]
 8004692:	6014      	str	r4, [r2, #0]
 8004694:	4628      	mov	r0, r5
 8004696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800469a:	f000 b8cb 	b.w	8004834 <__malloc_unlock>
 800469e:	42a3      	cmp	r3, r4
 80046a0:	d90a      	bls.n	80046b8 <_free_r+0x48>
 80046a2:	6821      	ldr	r1, [r4, #0]
 80046a4:	1862      	adds	r2, r4, r1
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf01      	itttt	eq
 80046aa:	681a      	ldreq	r2, [r3, #0]
 80046ac:	685b      	ldreq	r3, [r3, #4]
 80046ae:	1852      	addeq	r2, r2, r1
 80046b0:	6022      	streq	r2, [r4, #0]
 80046b2:	6063      	str	r3, [r4, #4]
 80046b4:	6004      	str	r4, [r0, #0]
 80046b6:	e7ed      	b.n	8004694 <_free_r+0x24>
 80046b8:	461a      	mov	r2, r3
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	b10b      	cbz	r3, 80046c2 <_free_r+0x52>
 80046be:	42a3      	cmp	r3, r4
 80046c0:	d9fa      	bls.n	80046b8 <_free_r+0x48>
 80046c2:	6811      	ldr	r1, [r2, #0]
 80046c4:	1850      	adds	r0, r2, r1
 80046c6:	42a0      	cmp	r0, r4
 80046c8:	d10b      	bne.n	80046e2 <_free_r+0x72>
 80046ca:	6820      	ldr	r0, [r4, #0]
 80046cc:	4401      	add	r1, r0
 80046ce:	1850      	adds	r0, r2, r1
 80046d0:	4283      	cmp	r3, r0
 80046d2:	6011      	str	r1, [r2, #0]
 80046d4:	d1de      	bne.n	8004694 <_free_r+0x24>
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4401      	add	r1, r0
 80046dc:	6011      	str	r1, [r2, #0]
 80046de:	6053      	str	r3, [r2, #4]
 80046e0:	e7d8      	b.n	8004694 <_free_r+0x24>
 80046e2:	d902      	bls.n	80046ea <_free_r+0x7a>
 80046e4:	230c      	movs	r3, #12
 80046e6:	602b      	str	r3, [r5, #0]
 80046e8:	e7d4      	b.n	8004694 <_free_r+0x24>
 80046ea:	6820      	ldr	r0, [r4, #0]
 80046ec:	1821      	adds	r1, r4, r0
 80046ee:	428b      	cmp	r3, r1
 80046f0:	bf01      	itttt	eq
 80046f2:	6819      	ldreq	r1, [r3, #0]
 80046f4:	685b      	ldreq	r3, [r3, #4]
 80046f6:	1809      	addeq	r1, r1, r0
 80046f8:	6021      	streq	r1, [r4, #0]
 80046fa:	6063      	str	r3, [r4, #4]
 80046fc:	6054      	str	r4, [r2, #4]
 80046fe:	e7c9      	b.n	8004694 <_free_r+0x24>
 8004700:	bd38      	pop	{r3, r4, r5, pc}
 8004702:	bf00      	nop
 8004704:	20000108 	.word	0x20000108

08004708 <_malloc_r>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	1ccd      	adds	r5, r1, #3
 800470c:	f025 0503 	bic.w	r5, r5, #3
 8004710:	3508      	adds	r5, #8
 8004712:	2d0c      	cmp	r5, #12
 8004714:	bf38      	it	cc
 8004716:	250c      	movcc	r5, #12
 8004718:	2d00      	cmp	r5, #0
 800471a:	4606      	mov	r6, r0
 800471c:	db01      	blt.n	8004722 <_malloc_r+0x1a>
 800471e:	42a9      	cmp	r1, r5
 8004720:	d903      	bls.n	800472a <_malloc_r+0x22>
 8004722:	230c      	movs	r3, #12
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	2000      	movs	r0, #0
 8004728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472a:	f000 f87d 	bl	8004828 <__malloc_lock>
 800472e:	4921      	ldr	r1, [pc, #132]	; (80047b4 <_malloc_r+0xac>)
 8004730:	680a      	ldr	r2, [r1, #0]
 8004732:	4614      	mov	r4, r2
 8004734:	b99c      	cbnz	r4, 800475e <_malloc_r+0x56>
 8004736:	4f20      	ldr	r7, [pc, #128]	; (80047b8 <_malloc_r+0xb0>)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	b923      	cbnz	r3, 8004746 <_malloc_r+0x3e>
 800473c:	4621      	mov	r1, r4
 800473e:	4630      	mov	r0, r6
 8004740:	f000 f862 	bl	8004808 <_sbrk_r>
 8004744:	6038      	str	r0, [r7, #0]
 8004746:	4629      	mov	r1, r5
 8004748:	4630      	mov	r0, r6
 800474a:	f000 f85d 	bl	8004808 <_sbrk_r>
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	d123      	bne.n	800479a <_malloc_r+0x92>
 8004752:	230c      	movs	r3, #12
 8004754:	4630      	mov	r0, r6
 8004756:	6033      	str	r3, [r6, #0]
 8004758:	f000 f86c 	bl	8004834 <__malloc_unlock>
 800475c:	e7e3      	b.n	8004726 <_malloc_r+0x1e>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	1b5b      	subs	r3, r3, r5
 8004762:	d417      	bmi.n	8004794 <_malloc_r+0x8c>
 8004764:	2b0b      	cmp	r3, #11
 8004766:	d903      	bls.n	8004770 <_malloc_r+0x68>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	441c      	add	r4, r3
 800476c:	6025      	str	r5, [r4, #0]
 800476e:	e004      	b.n	800477a <_malloc_r+0x72>
 8004770:	6863      	ldr	r3, [r4, #4]
 8004772:	42a2      	cmp	r2, r4
 8004774:	bf0c      	ite	eq
 8004776:	600b      	streq	r3, [r1, #0]
 8004778:	6053      	strne	r3, [r2, #4]
 800477a:	4630      	mov	r0, r6
 800477c:	f000 f85a 	bl	8004834 <__malloc_unlock>
 8004780:	f104 000b 	add.w	r0, r4, #11
 8004784:	1d23      	adds	r3, r4, #4
 8004786:	f020 0007 	bic.w	r0, r0, #7
 800478a:	1ac2      	subs	r2, r0, r3
 800478c:	d0cc      	beq.n	8004728 <_malloc_r+0x20>
 800478e:	1a1b      	subs	r3, r3, r0
 8004790:	50a3      	str	r3, [r4, r2]
 8004792:	e7c9      	b.n	8004728 <_malloc_r+0x20>
 8004794:	4622      	mov	r2, r4
 8004796:	6864      	ldr	r4, [r4, #4]
 8004798:	e7cc      	b.n	8004734 <_malloc_r+0x2c>
 800479a:	1cc4      	adds	r4, r0, #3
 800479c:	f024 0403 	bic.w	r4, r4, #3
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	d0e3      	beq.n	800476c <_malloc_r+0x64>
 80047a4:	1a21      	subs	r1, r4, r0
 80047a6:	4630      	mov	r0, r6
 80047a8:	f000 f82e 	bl	8004808 <_sbrk_r>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d1dd      	bne.n	800476c <_malloc_r+0x64>
 80047b0:	e7cf      	b.n	8004752 <_malloc_r+0x4a>
 80047b2:	bf00      	nop
 80047b4:	20000108 	.word	0x20000108
 80047b8:	2000010c 	.word	0x2000010c

080047bc <_realloc_r>:
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	4607      	mov	r7, r0
 80047c0:	4614      	mov	r4, r2
 80047c2:	460e      	mov	r6, r1
 80047c4:	b921      	cbnz	r1, 80047d0 <_realloc_r+0x14>
 80047c6:	4611      	mov	r1, r2
 80047c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047cc:	f7ff bf9c 	b.w	8004708 <_malloc_r>
 80047d0:	b922      	cbnz	r2, 80047dc <_realloc_r+0x20>
 80047d2:	f7ff ff4d 	bl	8004670 <_free_r>
 80047d6:	4625      	mov	r5, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047dc:	f000 f830 	bl	8004840 <_malloc_usable_size_r>
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d20f      	bcs.n	8004804 <_realloc_r+0x48>
 80047e4:	4621      	mov	r1, r4
 80047e6:	4638      	mov	r0, r7
 80047e8:	f7ff ff8e 	bl	8004708 <_malloc_r>
 80047ec:	4605      	mov	r5, r0
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d0f2      	beq.n	80047d8 <_realloc_r+0x1c>
 80047f2:	4631      	mov	r1, r6
 80047f4:	4622      	mov	r2, r4
 80047f6:	f7ff ff13 	bl	8004620 <memcpy>
 80047fa:	4631      	mov	r1, r6
 80047fc:	4638      	mov	r0, r7
 80047fe:	f7ff ff37 	bl	8004670 <_free_r>
 8004802:	e7e9      	b.n	80047d8 <_realloc_r+0x1c>
 8004804:	4635      	mov	r5, r6
 8004806:	e7e7      	b.n	80047d8 <_realloc_r+0x1c>

08004808 <_sbrk_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	2300      	movs	r3, #0
 800480c:	4d05      	ldr	r5, [pc, #20]	; (8004824 <_sbrk_r+0x1c>)
 800480e:	4604      	mov	r4, r0
 8004810:	4608      	mov	r0, r1
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	f7fc fe20 	bl	8001458 <_sbrk>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d102      	bne.n	8004822 <_sbrk_r+0x1a>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	b103      	cbz	r3, 8004822 <_sbrk_r+0x1a>
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	20000210 	.word	0x20000210

08004828 <__malloc_lock>:
 8004828:	4801      	ldr	r0, [pc, #4]	; (8004830 <__malloc_lock+0x8>)
 800482a:	f000 b811 	b.w	8004850 <__retarget_lock_acquire_recursive>
 800482e:	bf00      	nop
 8004830:	20000218 	.word	0x20000218

08004834 <__malloc_unlock>:
 8004834:	4801      	ldr	r0, [pc, #4]	; (800483c <__malloc_unlock+0x8>)
 8004836:	f000 b80c 	b.w	8004852 <__retarget_lock_release_recursive>
 800483a:	bf00      	nop
 800483c:	20000218 	.word	0x20000218

08004840 <_malloc_usable_size_r>:
 8004840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004844:	1f18      	subs	r0, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfbc      	itt	lt
 800484a:	580b      	ldrlt	r3, [r1, r0]
 800484c:	18c0      	addlt	r0, r0, r3
 800484e:	4770      	bx	lr

08004850 <__retarget_lock_acquire_recursive>:
 8004850:	4770      	bx	lr

08004852 <__retarget_lock_release_recursive>:
 8004852:	4770      	bx	lr

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr
