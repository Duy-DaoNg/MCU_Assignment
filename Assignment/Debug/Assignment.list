
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003efc  08003efc  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08003efc  08003efc  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003efc  08003efc  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08003f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000038  08003f3c  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003f3c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3c8  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204c  00000000  00000000  0002c429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  0002f158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001787f  00000000  00000000  0002fd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe09  00000000  00000000  000475b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b8d  00000000  00000000  000573c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ddf4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033dc  00000000  00000000  000ddfa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ebc 	.word	0x08003ebc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08003ebc 	.word	0x08003ebc

0800014c <button_reading>:
static GPIO_PinState Reg1[NO_OF_BUTTONS];
static GPIO_PinState Reg2[NO_OF_BUTTONS];
/* Set time out */
int TimerForKeyPress = 300;
/* Read input then set button flag */
void button_reading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0a6      	b.n	80002a6 <button_reading+0x15a>
		Reg2[i] = Reg1[i];
 8000158:	4a57      	ldr	r2, [pc, #348]	; (80002b8 <button_reading+0x16c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a56      	ldr	r2, [pc, #344]	; (80002bc <button_reading+0x170>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		Reg1[i] = Reg0[i];
 800016a:	4a55      	ldr	r2, [pc, #340]	; (80002c0 <button_reading+0x174>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a51      	ldr	r2, [pc, #324]	; (80002b8 <button_reading+0x16c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 800017c:	4a51      	ldr	r2, [pc, #324]	; (80002c4 <button_reading+0x178>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000184:	4619      	mov	r1, r3
 8000186:	4850      	ldr	r0, [pc, #320]	; (80002c8 <button_reading+0x17c>)
 8000188:	f001 fd8c 	bl	8001ca4 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	4619      	mov	r1, r3
 8000190:	4a4b      	ldr	r2, [pc, #300]	; (80002c0 <button_reading+0x174>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	460a      	mov	r2, r1
 8000198:	701a      	strb	r2, [r3, #0]
		if(i <= 1){
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	dc0f      	bgt.n	80001c0 <button_reading+0x74>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001a0:	4a48      	ldr	r2, [pc, #288]	; (80002c4 <button_reading+0x178>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001a8:	4619      	mov	r1, r3
 80001aa:	4847      	ldr	r0, [pc, #284]	; (80002c8 <button_reading+0x17c>)
 80001ac:	f001 fd7a 	bl	8001ca4 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a42      	ldr	r2, [pc, #264]	; (80002c0 <button_reading+0x174>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4413      	add	r3, r2
 80001ba:	460a      	mov	r2, r1
 80001bc:	701a      	strb	r2, [r3, #0]
 80001be:	e021      	b.n	8000204 <button_reading+0xb8>
		}
		else if(i == 2){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d10f      	bne.n	80001e6 <button_reading+0x9a>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOB, INPUT_BUTTON[i]);
 80001c6:	4a3f      	ldr	r2, [pc, #252]	; (80002c4 <button_reading+0x178>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ce:	4619      	mov	r1, r3
 80001d0:	483e      	ldr	r0, [pc, #248]	; (80002cc <button_reading+0x180>)
 80001d2:	f001 fd67 	bl	8001ca4 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a39      	ldr	r2, [pc, #228]	; (80002c0 <button_reading+0x174>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	460a      	mov	r2, r1
 80001e2:	701a      	strb	r2, [r3, #0]
 80001e4:	e00e      	b.n	8000204 <button_reading+0xb8>
		}
		else{
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001e6:	4a37      	ldr	r2, [pc, #220]	; (80002c4 <button_reading+0x178>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ee:	4619      	mov	r1, r3
 80001f0:	4835      	ldr	r0, [pc, #212]	; (80002c8 <button_reading+0x17c>)
 80001f2:	f001 fd57 	bl	8001ca4 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a31      	ldr	r2, [pc, #196]	; (80002c0 <button_reading+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	460a      	mov	r2, r1
 8000202:	701a      	strb	r2, [r3, #0]
		}
		/* Check stable state */
		if((Reg0[i] == Reg1[i]) && (Reg1[i] == Reg2[i])){
 8000204:	4a2e      	ldr	r2, [pc, #184]	; (80002c0 <button_reading+0x174>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	781a      	ldrb	r2, [r3, #0]
 800020c:	492a      	ldr	r1, [pc, #168]	; (80002b8 <button_reading+0x16c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	440b      	add	r3, r1
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d143      	bne.n	80002a0 <button_reading+0x154>
 8000218:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <button_reading+0x16c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	781a      	ldrb	r2, [r3, #0]
 8000220:	4926      	ldr	r1, [pc, #152]	; (80002bc <button_reading+0x170>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	440b      	add	r3, r1
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	429a      	cmp	r2, r3
 800022a:	d139      	bne.n	80002a0 <button_reading+0x154>
			if(Reg3[i] != Reg2[i]){
 800022c:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <button_reading+0x184>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4413      	add	r3, r2
 8000232:	781a      	ldrb	r2, [r3, #0]
 8000234:	4921      	ldr	r1, [pc, #132]	; (80002bc <button_reading+0x170>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	440b      	add	r3, r1
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d018      	beq.n	8000272 <button_reading+0x126>
				Reg3[i] = Reg2[i];
 8000240:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <button_reading+0x170>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4413      	add	r3, r2
 8000246:	7819      	ldrb	r1, [r3, #0]
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <button_reading+0x184>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4413      	add	r3, r2
 800024e:	460a      	mov	r2, r1
 8000250:	701a      	strb	r2, [r3, #0]
				if(Reg2[i] == PRESSED){
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <button_reading+0x170>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d120      	bne.n	80002a0 <button_reading+0x154>
					/* Button is pressed set flag */
					buttonPressed_flag[i] = 1;
 800025e:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <button_reading+0x188>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
					TimerForKeyPress = 300;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <button_reading+0x18c>)
 800026a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	e016      	b.n	80002a0 <button_reading+0x154>
				}
			}
			else{
				/* Long-press handle*/
				if(Reg2[i] == PRESSED){
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <button_reading+0x170>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d110      	bne.n	80002a0 <button_reading+0x154>
					TimerForKeyPress--;
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <button_reading+0x18c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3b01      	subs	r3, #1
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <button_reading+0x18c>)
 8000286:	6013      	str	r3, [r2, #0]
					if(TimerForKeyPress == 0){
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <button_reading+0x18c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d107      	bne.n	80002a0 <button_reading+0x154>
						buttonPressed_flag[i] = 1;
 8000290:	4a10      	ldr	r2, [pc, #64]	; (80002d4 <button_reading+0x188>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4413      	add	r3, r2
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
						TimerForKeyPress = 100;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <button_reading+0x18c>)
 800029c:	2264      	movs	r2, #100	; 0x64
 800029e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	f77f af55 	ble.w	8000158 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	2000005c 	.word	0x2000005c
 80002bc:	20000060 	.word	0x20000060
 80002c0:	20000058 	.word	0x20000058
 80002c4:	20000004 	.word	0x20000004
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	20000054 	.word	0x20000054
 80002d4:	20000068 	.word	0x20000068
 80002d8:	20000000 	.word	0x20000000

080002dc <display_traffic_light>:
 *      Author: LENOVO
 */

#include "display_traffic_light.h"

void display_traffic_light(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row){
 80002e0:	4b88      	ldr	r3, [pc, #544]	; (8000504 <display_traffic_light+0x228>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b09      	cmp	r3, #9
 80002e6:	f200 80a1 	bhi.w	800042c <display_traffic_light+0x150>
 80002ea:	a201      	add	r2, pc, #4	; (adr r2, 80002f0 <display_traffic_light+0x14>)
 80002ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f0:	08000319 	.word	0x08000319
 80002f4:	08000375 	.word	0x08000375
 80002f8:	080003d1 	.word	0x080003d1
 80002fc:	08000349 	.word	0x08000349
 8000300:	080003a5 	.word	0x080003a5
 8000304:	08000401 	.word	0x08000401
 8000308:	0800042d 	.word	0x0800042d
 800030c:	08000331 	.word	0x08000331
 8000310:	0800038d 	.word	0x0800038d
 8000314:	080003e9 	.word	0x080003e9
	case AUTO_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000318:	2201      	movs	r2, #1
 800031a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031e:	487a      	ldr	r0, [pc, #488]	; (8000508 <display_traffic_light+0x22c>)
 8000320:	f001 fcd7 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2108      	movs	r1, #8
 8000328:	4878      	ldr	r0, [pc, #480]	; (800050c <display_traffic_light+0x230>)
 800032a:	f001 fcd2 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 800032e:	e088      	b.n	8000442 <display_traffic_light+0x166>
	case HAND_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000336:	4874      	ldr	r0, [pc, #464]	; (8000508 <display_traffic_light+0x22c>)
 8000338:	f001 fccb 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2108      	movs	r1, #8
 8000340:	4872      	ldr	r0, [pc, #456]	; (800050c <display_traffic_light+0x230>)
 8000342:	f001 fcc6 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 8000346:	e07c      	b.n	8000442 <display_traffic_light+0x166>
	case MANUAL_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034e:	486e      	ldr	r0, [pc, #440]	; (8000508 <display_traffic_light+0x22c>)
 8000350:	f001 fcbf 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2108      	movs	r1, #8
 8000358:	486c      	ldr	r0, [pc, #432]	; (800050c <display_traffic_light+0x230>)
 800035a:	f001 fcba 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2120      	movs	r1, #32
 8000362:	486a      	ldr	r0, [pc, #424]	; (800050c <display_traffic_light+0x230>)
 8000364:	f001 fcb5 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2110      	movs	r1, #16
 800036c:	4867      	ldr	r0, [pc, #412]	; (800050c <display_traffic_light+0x230>)
 800036e:	f001 fcb0 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 8000372:	e066      	b.n	8000442 <display_traffic_light+0x166>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800037a:	4863      	ldr	r0, [pc, #396]	; (8000508 <display_traffic_light+0x22c>)
 800037c:	f001 fca9 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000380:	2201      	movs	r2, #1
 8000382:	2108      	movs	r1, #8
 8000384:	4861      	ldr	r0, [pc, #388]	; (800050c <display_traffic_light+0x230>)
 8000386:	f001 fca4 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 800038a:	e05a      	b.n	8000442 <display_traffic_light+0x166>
	case HAND_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000392:	485d      	ldr	r0, [pc, #372]	; (8000508 <display_traffic_light+0x22c>)
 8000394:	f001 fc9d 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000398:	2201      	movs	r2, #1
 800039a:	2108      	movs	r1, #8
 800039c:	485b      	ldr	r0, [pc, #364]	; (800050c <display_traffic_light+0x230>)
 800039e:	f001 fc98 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 80003a2:	e04e      	b.n	8000442 <display_traffic_light+0x166>
	case MANUAL_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003aa:	4857      	ldr	r0, [pc, #348]	; (8000508 <display_traffic_light+0x22c>)
 80003ac:	f001 fc91 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2108      	movs	r1, #8
 80003b4:	4855      	ldr	r0, [pc, #340]	; (800050c <display_traffic_light+0x230>)
 80003b6:	f001 fc8c 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2120      	movs	r1, #32
 80003be:	4853      	ldr	r0, [pc, #332]	; (800050c <display_traffic_light+0x230>)
 80003c0:	f001 fc87 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2110      	movs	r1, #16
 80003c8:	4850      	ldr	r0, [pc, #320]	; (800050c <display_traffic_light+0x230>)
 80003ca:	f001 fc82 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 80003ce:	e038      	b.n	8000442 <display_traffic_light+0x166>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d6:	484c      	ldr	r0, [pc, #304]	; (8000508 <display_traffic_light+0x22c>)
 80003d8:	f001 fc7b 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2108      	movs	r1, #8
 80003e0:	484a      	ldr	r0, [pc, #296]	; (800050c <display_traffic_light+0x230>)
 80003e2:	f001 fc76 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 80003e6:	e02c      	b.n	8000442 <display_traffic_light+0x166>
	case HAND_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ee:	4846      	ldr	r0, [pc, #280]	; (8000508 <display_traffic_light+0x22c>)
 80003f0:	f001 fc6f 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2108      	movs	r1, #8
 80003f8:	4844      	ldr	r0, [pc, #272]	; (800050c <display_traffic_light+0x230>)
 80003fa:	f001 fc6a 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 80003fe:	e020      	b.n	8000442 <display_traffic_light+0x166>
	case MANUAL_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000406:	4840      	ldr	r0, [pc, #256]	; (8000508 <display_traffic_light+0x22c>)
 8000408:	f001 fc63 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2108      	movs	r1, #8
 8000410:	483e      	ldr	r0, [pc, #248]	; (800050c <display_traffic_light+0x230>)
 8000412:	f001 fc5e 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 8000416:	2201      	movs	r2, #1
 8000418:	2120      	movs	r1, #32
 800041a:	483c      	ldr	r0, [pc, #240]	; (800050c <display_traffic_light+0x230>)
 800041c:	f001 fc59 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2110      	movs	r1, #16
 8000424:	4839      	ldr	r0, [pc, #228]	; (800050c <display_traffic_light+0x230>)
 8000426:	f001 fc54 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 800042a:	e00a      	b.n	8000442 <display_traffic_light+0x166>
	default:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000432:	4835      	ldr	r0, [pc, #212]	; (8000508 <display_traffic_light+0x22c>)
 8000434:	f001 fc4d 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2108      	movs	r1, #8
 800043c:	4833      	ldr	r0, [pc, #204]	; (800050c <display_traffic_light+0x230>)
 800043e:	f001 fc48 	bl	8001cd2 <HAL_GPIO_WritePin>
	}
	switch (FSM_Traffic_Light_State_Col){
 8000442:	4b33      	ldr	r3, [pc, #204]	; (8000510 <display_traffic_light+0x234>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b09      	cmp	r3, #9
 8000448:	d858      	bhi.n	80004fc <display_traffic_light+0x220>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <display_traffic_light+0x174>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000479 	.word	0x08000479
 8000454:	080004a5 	.word	0x080004a5
 8000458:	080004d1 	.word	0x080004d1
 800045c:	080004fd 	.word	0x080004fd
 8000460:	080004fd 	.word	0x080004fd
 8000464:	080004fd 	.word	0x080004fd
 8000468:	080004fd 	.word	0x080004fd
 800046c:	0800048f 	.word	0x0800048f
 8000470:	080004bb 	.word	0x080004bb
 8000474:	080004e7 	.word	0x080004e7
	case AUTO_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2120      	movs	r1, #32
 800047c:	4823      	ldr	r0, [pc, #140]	; (800050c <display_traffic_light+0x230>)
 800047e:	f001 fc28 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2110      	movs	r1, #16
 8000486:	4821      	ldr	r0, [pc, #132]	; (800050c <display_traffic_light+0x230>)
 8000488:	f001 fc23 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 800048c:	e037      	b.n	80004fe <display_traffic_light+0x222>
	case HAND_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2120      	movs	r1, #32
 8000492:	481e      	ldr	r0, [pc, #120]	; (800050c <display_traffic_light+0x230>)
 8000494:	f001 fc1d 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2110      	movs	r1, #16
 800049c:	481b      	ldr	r0, [pc, #108]	; (800050c <display_traffic_light+0x230>)
 800049e:	f001 fc18 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 80004a2:	e02c      	b.n	80004fe <display_traffic_light+0x222>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2120      	movs	r1, #32
 80004a8:	4818      	ldr	r0, [pc, #96]	; (800050c <display_traffic_light+0x230>)
 80004aa:	f001 fc12 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2110      	movs	r1, #16
 80004b2:	4816      	ldr	r0, [pc, #88]	; (800050c <display_traffic_light+0x230>)
 80004b4:	f001 fc0d 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 80004b8:	e021      	b.n	80004fe <display_traffic_light+0x222>
	case HAND_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2120      	movs	r1, #32
 80004be:	4813      	ldr	r0, [pc, #76]	; (800050c <display_traffic_light+0x230>)
 80004c0:	f001 fc07 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2110      	movs	r1, #16
 80004c8:	4810      	ldr	r0, [pc, #64]	; (800050c <display_traffic_light+0x230>)
 80004ca:	f001 fc02 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 80004ce:	e016      	b.n	80004fe <display_traffic_light+0x222>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2120      	movs	r1, #32
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <display_traffic_light+0x230>)
 80004d6:	f001 fbfc 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	2110      	movs	r1, #16
 80004de:	480b      	ldr	r0, [pc, #44]	; (800050c <display_traffic_light+0x230>)
 80004e0:	f001 fbf7 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 80004e4:	e00b      	b.n	80004fe <display_traffic_light+0x222>
	case HAND_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2120      	movs	r1, #32
 80004ea:	4808      	ldr	r0, [pc, #32]	; (800050c <display_traffic_light+0x230>)
 80004ec:	f001 fbf1 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2110      	movs	r1, #16
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <display_traffic_light+0x230>)
 80004f6:	f001 fbec 	bl	8001cd2 <HAL_GPIO_WritePin>
		break;
 80004fa:	e000      	b.n	80004fe <display_traffic_light+0x222>
	default:
		break;
 80004fc:	bf00      	nop
	}
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000006c 	.word	0x2000006c
 8000508:	40010800 	.word	0x40010800
 800050c:	40010c00 	.word	0x40010c00
 8000510:	2000000c 	.word	0x2000000c

08000514 <FSM_Pedestrian>:
 *  Created on: Dec 8, 2022
 *      Author: LENOVO
 */
#include "fsm_pedestrian.h"

void FSM_Pedestrian(){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	switch(FSM_Pedestrian_State){
 8000518:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <FSM_Pedestrian+0xe4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <FSM_Pedestrian+0x12>
 8000520:	2b01      	cmp	r3, #1
 8000522:	d021      	beq.n	8000568 <FSM_Pedestrian+0x54>
		default:
			break;
		}
		break;
	default:
		break;
 8000524:	e065      	b.n	80005f2 <FSM_Pedestrian+0xde>
		HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	4833      	ldr	r0, [pc, #204]	; (80005fc <FSM_Pedestrian+0xe8>)
 800052e:	f001 fbd0 	bl	8001cd2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000538:	4831      	ldr	r0, [pc, #196]	; (8000600 <FSM_Pedestrian+0xec>)
 800053a:	f001 fbca 	bl	8001cd2 <HAL_GPIO_WritePin>
		if(buttonPressed_flag[3]){
 800053e:	4b31      	ldr	r3, [pc, #196]	; (8000604 <FSM_Pedestrian+0xf0>)
 8000540:	78db      	ldrb	r3, [r3, #3]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d054      	beq.n	80005f0 <FSM_Pedestrian+0xdc>
			buttonPressed_flag[3] = 0;
 8000546:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <FSM_Pedestrian+0xf0>)
 8000548:	2200      	movs	r2, #0
 800054a:	70da      	strb	r2, [r3, #3]
			FSM_Pedestrian_State = WORK;
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <FSM_Pedestrian+0xe4>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
			FSM_Buzzer_State = ON;
 8000552:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <FSM_Pedestrian+0xf4>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
			setTimer4(1*TICK);
 8000558:	2001      	movs	r0, #1
 800055a:	f000 ff6f 	bl	800143c <setTimer4>
			setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);
 800055e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000562:	f000 ff57 	bl	8001414 <setTimer3>
		break;
 8000566:	e043      	b.n	80005f0 <FSM_Pedestrian+0xdc>
		if(timer3Flag == 1){
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <FSM_Pedestrian+0xf8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d103      	bne.n	8000578 <FSM_Pedestrian+0x64>
			FSM_Pedestrian_State = IDLE;
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <FSM_Pedestrian+0xe4>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
			break;
 8000576:	e03c      	b.n	80005f2 <FSM_Pedestrian+0xde>
		if(buttonPressed_flag[3]){
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <FSM_Pedestrian+0xf0>)
 800057a:	78db      	ldrb	r3, [r3, #3]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d003      	beq.n	8000588 <FSM_Pedestrian+0x74>
			setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);
 8000580:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000584:	f000 ff46 	bl	8001414 <setTimer3>
		switch (FSM_Traffic_Light_State_Col){
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <FSM_Pedestrian+0xfc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d020      	beq.n	80005d2 <FSM_Pedestrian+0xbe>
 8000590:	2b02      	cmp	r3, #2
 8000592:	dc2b      	bgt.n	80005ec <FSM_Pedestrian+0xd8>
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <FSM_Pedestrian+0x8a>
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00d      	beq.n	80005b8 <FSM_Pedestrian+0xa4>
			break;
 800059c:	e026      	b.n	80005ec <FSM_Pedestrian+0xd8>
			HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	4815      	ldr	r0, [pc, #84]	; (80005fc <FSM_Pedestrian+0xe8>)
 80005a6:	f001 fb94 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <FSM_Pedestrian+0xec>)
 80005b2:	f001 fb8e 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 80005b6:	e01a      	b.n	80005ee <FSM_Pedestrian+0xda>
			HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <FSM_Pedestrian+0xe8>)
 80005c0:	f001 fb87 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <FSM_Pedestrian+0xec>)
 80005cc:	f001 fb81 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 80005d0:	e00d      	b.n	80005ee <FSM_Pedestrian+0xda>
			HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d8:	4808      	ldr	r0, [pc, #32]	; (80005fc <FSM_Pedestrian+0xe8>)
 80005da:	f001 fb7a 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <FSM_Pedestrian+0xec>)
 80005e6:	f001 fb74 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 80005ea:	e000      	b.n	80005ee <FSM_Pedestrian+0xda>
			break;
 80005ec:	bf00      	nop
		break;
 80005ee:	e000      	b.n	80005f2 <FSM_Pedestrian+0xde>
		break;
 80005f0:	bf00      	nop
	}
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000070 	.word	0x20000070
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	40010800 	.word	0x40010800
 8000604:	20000068 	.word	0x20000068
 8000608:	20000074 	.word	0x20000074
 800060c:	2000008c 	.word	0x2000008c
 8000610:	2000000c 	.word	0x2000000c

08000614 <resetAllButtonState>:


#include "fsm_traffic_light.h"

int To_Default_State = 0;
void resetAllButtonState(){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	e007      	b.n	8000630 <resetAllButtonState+0x1c>
		buttonPressed_flag[i] = 0;
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <resetAllButtonState+0x30>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3301      	adds	r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b03      	cmp	r3, #3
 8000634:	ddf4      	ble.n	8000620 <resetAllButtonState+0xc>
	}
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000068 	.word	0x20000068

08000648 <changeTime>:

void changeTime(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	Set_TL_Time++;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <changeTime+0x24>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a06      	ldr	r2, [pc, #24]	; (800066c <changeTime+0x24>)
 8000654:	6013      	str	r3, [r2, #0]
	if(Set_TL_Time >= 100){
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <changeTime+0x24>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b63      	cmp	r3, #99	; 0x63
 800065c:	dd02      	ble.n	8000664 <changeTime+0x1c>
		Set_TL_Time = 1;
 800065e:	4b03      	ldr	r3, [pc, #12]	; (800066c <changeTime+0x24>)
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
	}
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	20000098 	.word	0x20000098

08000670 <FSM_Traffic_Light_Row>:
void FSM_Traffic_Light_Row(){
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row) {
 8000674:	4b96      	ldr	r3, [pc, #600]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b09      	cmp	r3, #9
 800067a:	f200 8236 	bhi.w	8000aea <FSM_Traffic_Light_Row+0x47a>
 800067e:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <FSM_Traffic_Light_Row+0x14>)
 8000680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000684:	080006ad 	.word	0x080006ad
 8000688:	0800072b 	.word	0x0800072b
 800068c:	080007a9 	.word	0x080007a9
 8000690:	08000827 	.word	0x08000827
 8000694:	080008ab 	.word	0x080008ab
 8000698:	08000959 	.word	0x08000959
 800069c:	08000aeb 	.word	0x08000aeb
 80006a0:	080009e9 	.word	0x080009e9
 80006a4:	08000a3f 	.word	0x08000a3f
 80006a8:	08000a95 	.word	0x08000a95
	case AUTO_RED:
		if(timer1Flag == 1){
 80006ac:	4b89      	ldr	r3, [pc, #548]	; (80008d4 <FSM_Traffic_Light_Row+0x264>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d112      	bne.n	80006da <FSM_Traffic_Light_Row+0x6a>
			/* Count down time */
			traffic_light_remain_time_row--;
 80006b4:	4b88      	ldr	r3, [pc, #544]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	4a87      	ldr	r2, [pc, #540]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 80006bc:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 80006be:	4b86      	ldr	r3, [pc, #536]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d106      	bne.n	80006d4 <FSM_Traffic_Light_Row+0x64>
				/* Move to next state*/
				FSM_Traffic_Light_State_Row = AUTO_GREEN;
 80006c6:	4b82      	ldr	r3, [pc, #520]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = green_time;
 80006cc:	4b83      	ldr	r3, [pc, #524]	; (80008dc <FSM_Traffic_Light_Row+0x26c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a81      	ldr	r2, [pc, #516]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 80006d2:	6013      	str	r3, [r2, #0]
			}

			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80006d4:	2064      	movs	r0, #100	; 0x64
 80006d6:	f000 fe75 	bl	80013c4 <setTimer1>
		}
		/* Check if button1 is pressed --> move to MANUAL_MOD*/
		if(buttonPressed_flag[0]){
 80006da:	4b81      	ldr	r3, [pc, #516]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d012      	beq.n	8000708 <FSM_Traffic_Light_Row+0x98>
			/* If button is pressed --> move to MANUAL state */
			buttonPressed_flag[0] = 0;
 80006e2:	4b7f      	ldr	r3, [pc, #508]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 80006e8:	4b7e      	ldr	r3, [pc, #504]	; (80008e4 <FSM_Traffic_Light_Row+0x274>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a7e      	ldr	r2, [pc, #504]	; (80008e8 <FSM_Traffic_Light_Row+0x278>)
 80006ee:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 80006f0:	4b77      	ldr	r3, [pc, #476]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 80006f2:	2203      	movs	r2, #3
 80006f4:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 80006f6:	4b7d      	ldr	r3, [pc, #500]	; (80008ec <FSM_Traffic_Light_Row+0x27c>)
 80006f8:	2206      	movs	r2, #6
 80006fa:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f000 fe60 	bl	80013c4 <setTimer1>
			resetAllButtonState();
 8000704:	f7ff ff86 	bl	8000614 <resetAllButtonState>
		}
		/* Check if button2 is pressed --> move to HAND_RED */
		if(buttonPressed_flag[1]){
 8000708:	4b75      	ldr	r3, [pc, #468]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	2b00      	cmp	r3, #0
 800070e:	f000 81ee 	beq.w	8000aee <FSM_Traffic_Light_Row+0x47e>
			buttonPressed_flag[1] = 0;
 8000712:	4b73      	ldr	r3, [pc, #460]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000714:	2200      	movs	r2, #0
 8000716:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = HAND_RED;
 8000718:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 800071a:	2207      	movs	r2, #7
 800071c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = HAND_GREEN;
 800071e:	4b73      	ldr	r3, [pc, #460]	; (80008ec <FSM_Traffic_Light_Row+0x27c>)
 8000720:	2208      	movs	r2, #8
 8000722:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000724:	f7ff ff76 	bl	8000614 <resetAllButtonState>
		}
		break;
 8000728:	e1e1      	b.n	8000aee <FSM_Traffic_Light_Row+0x47e>
	case AUTO_GREEN:
		if(timer1Flag == 1){
 800072a:	4b6a      	ldr	r3, [pc, #424]	; (80008d4 <FSM_Traffic_Light_Row+0x264>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d112      	bne.n	8000758 <FSM_Traffic_Light_Row+0xe8>
			/* Count down time */
			traffic_light_remain_time_row--;
 8000732:	4b69      	ldr	r3, [pc, #420]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3b01      	subs	r3, #1
 8000738:	4a67      	ldr	r2, [pc, #412]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 800073a:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 800073c:	4b66      	ldr	r3, [pc, #408]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d106      	bne.n	8000752 <FSM_Traffic_Light_Row+0xe2>
				/* Move to next state*/
				FSM_Traffic_Light_State_Row = AUTO_YEL;
 8000744:	4b62      	ldr	r3, [pc, #392]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 8000746:	2202      	movs	r2, #2
 8000748:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = yellow_time;
 800074a:	4b69      	ldr	r3, [pc, #420]	; (80008f0 <FSM_Traffic_Light_Row+0x280>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a62      	ldr	r2, [pc, #392]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 8000750:	6013      	str	r3, [r2, #0]
			}
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f000 fe36 	bl	80013c4 <setTimer1>
		}
		/* Check if button state is pressed */
		if(buttonPressed_flag[0]){
 8000758:	4b61      	ldr	r3, [pc, #388]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d012      	beq.n	8000786 <FSM_Traffic_Light_Row+0x116>
			/* If button is pressed --> move to MANUAL state */
			buttonPressed_flag[0] = 0;
 8000760:	4b5f      	ldr	r3, [pc, #380]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000766:	4b5f      	ldr	r3, [pc, #380]	; (80008e4 <FSM_Traffic_Light_Row+0x274>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a5f      	ldr	r2, [pc, #380]	; (80008e8 <FSM_Traffic_Light_Row+0x278>)
 800076c:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 800076e:	4b58      	ldr	r3, [pc, #352]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 8000770:	2203      	movs	r2, #3
 8000772:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000774:	4b5d      	ldr	r3, [pc, #372]	; (80008ec <FSM_Traffic_Light_Row+0x27c>)
 8000776:	2206      	movs	r2, #6
 8000778:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 800077a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077e:	f000 fe21 	bl	80013c4 <setTimer1>
			resetAllButtonState();
 8000782:	f7ff ff47 	bl	8000614 <resetAllButtonState>
		}
		if(buttonPressed_flag[1]){
 8000786:	4b56      	ldr	r3, [pc, #344]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000788:	785b      	ldrb	r3, [r3, #1]
 800078a:	2b00      	cmp	r3, #0
 800078c:	f000 81b1 	beq.w	8000af2 <FSM_Traffic_Light_Row+0x482>
			buttonPressed_flag[1] = 0;
 8000790:	4b53      	ldr	r3, [pc, #332]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000792:	2200      	movs	r2, #0
 8000794:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = HAND_RED;
 8000796:	4b4e      	ldr	r3, [pc, #312]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = HAND_GREEN;
 800079c:	4b53      	ldr	r3, [pc, #332]	; (80008ec <FSM_Traffic_Light_Row+0x27c>)
 800079e:	2208      	movs	r2, #8
 80007a0:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 80007a2:	f7ff ff37 	bl	8000614 <resetAllButtonState>
		}
		break;
 80007a6:	e1a4      	b.n	8000af2 <FSM_Traffic_Light_Row+0x482>
	case AUTO_YEL:
		if(timer1Flag == 1){
 80007a8:	4b4a      	ldr	r3, [pc, #296]	; (80008d4 <FSM_Traffic_Light_Row+0x264>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d112      	bne.n	80007d6 <FSM_Traffic_Light_Row+0x166>
			/* Count down time */
			traffic_light_remain_time_row--;
 80007b0:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	4a48      	ldr	r2, [pc, #288]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 80007b8:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 80007ba:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d106      	bne.n	80007d0 <FSM_Traffic_Light_Row+0x160>
				/* Move to next state*/
				FSM_Traffic_Light_State_Row = AUTO_RED;
 80007c2:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = red_time;
 80007c8:	4b46      	ldr	r3, [pc, #280]	; (80008e4 <FSM_Traffic_Light_Row+0x274>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a42      	ldr	r2, [pc, #264]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 80007ce:	6013      	str	r3, [r2, #0]
			}
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80007d0:	2064      	movs	r0, #100	; 0x64
 80007d2:	f000 fdf7 	bl	80013c4 <setTimer1>
		}
		/* Check if button state is pressed */
		if(buttonPressed_flag[0]){
 80007d6:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d012      	beq.n	8000804 <FSM_Traffic_Light_Row+0x194>
			/* If button is pressed --> move to MANUAL state */
			buttonPressed_flag[0] = 0;
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 80007e4:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <FSM_Traffic_Light_Row+0x274>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a3f      	ldr	r2, [pc, #252]	; (80008e8 <FSM_Traffic_Light_Row+0x278>)
 80007ea:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 80007ec:	4b38      	ldr	r3, [pc, #224]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 80007f2:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <FSM_Traffic_Light_Row+0x27c>)
 80007f4:	2206      	movs	r2, #6
 80007f6:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80007f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fc:	f000 fde2 	bl	80013c4 <setTimer1>
			resetAllButtonState();
 8000800:	f7ff ff08 	bl	8000614 <resetAllButtonState>
		}
		if(buttonPressed_flag[1]){
 8000804:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000806:	785b      	ldrb	r3, [r3, #1]
 8000808:	2b00      	cmp	r3, #0
 800080a:	f000 8174 	beq.w	8000af6 <FSM_Traffic_Light_Row+0x486>
			buttonPressed_flag[1] = 0;
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000810:	2200      	movs	r2, #0
 8000812:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = HAND_RED;
 8000814:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 8000816:	2207      	movs	r2, #7
 8000818:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = HAND_GREEN;
 800081a:	4b34      	ldr	r3, [pc, #208]	; (80008ec <FSM_Traffic_Light_Row+0x27c>)
 800081c:	2208      	movs	r2, #8
 800081e:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000820:	f7ff fef8 	bl	8000614 <resetAllButtonState>
		}
		break;
 8000824:	e167      	b.n	8000af6 <FSM_Traffic_Light_Row+0x486>
	case MANUAL_RED:
		if(timer1Flag == 1){
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <FSM_Traffic_Light_Row+0x264>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d10d      	bne.n	800084a <FSM_Traffic_Light_Row+0x1da>
			/* Back to default state */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <FSM_Traffic_Light_Row+0x274>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a27      	ldr	r2, [pc, #156]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 800083a:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 800083c:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <FSM_Traffic_Light_Row+0x284>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000842:	2064      	movs	r0, #100	; 0x64
 8000844:	f000 fdbe 	bl	80013c4 <setTimer1>
			break;
 8000848:	e162      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		}
		if(buttonPressed_flag[0]){
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00d      	beq.n	800086e <FSM_Traffic_Light_Row+0x1fe>
			/* Move to next state */
			buttonPressed_flag[0] = 0;
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = green_time;
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <FSM_Traffic_Light_Row+0x26c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <FSM_Traffic_Light_Row+0x278>)
 800085e:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = MANUAL_GREEN;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 8000862:	2204      	movs	r2, #4
 8000864:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086a:	f000 fdab 	bl	80013c4 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000870:	785b      	ldrb	r3, [r3, #1]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d008      	beq.n	8000888 <FSM_Traffic_Light_Row+0x218>
			/* INC. time */
			buttonPressed_flag[1] = 0;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000878:	2200      	movs	r2, #0
 800087a:	705a      	strb	r2, [r3, #1]
			changeTime();
 800087c:	f7ff fee4 	bl	8000648 <changeTime>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f000 fd9e 	bl	80013c4 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 800088a:	789b      	ldrb	r3, [r3, #2]
 800088c:	2b00      	cmp	r3, #0
 800088e:	f000 8134 	beq.w	8000afa <FSM_Traffic_Light_Row+0x48a>
			/* Save value */
			buttonPressed_flag[2] = 0;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <FSM_Traffic_Light_Row+0x270>)
 8000894:	2200      	movs	r2, #0
 8000896:	709a      	strb	r2, [r3, #2]
			red_time = Set_TL_Time;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <FSM_Traffic_Light_Row+0x278>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <FSM_Traffic_Light_Row+0x274>)
 800089e:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80008a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a4:	f000 fd8e 	bl	80013c4 <setTimer1>
		}
		break;
 80008a8:	e127      	b.n	8000afa <FSM_Traffic_Light_Row+0x48a>
	case MANUAL_GREEN:
		if(timer1Flag == 1){
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <FSM_Traffic_Light_Row+0x264>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d122      	bne.n	80008f8 <FSM_Traffic_Light_Row+0x288>
			/* Back to default state */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <FSM_Traffic_Light_Row+0x260>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <FSM_Traffic_Light_Row+0x284>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <FSM_Traffic_Light_Row+0x274>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <FSM_Traffic_Light_Row+0x268>)
 80008c4:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80008c6:	2064      	movs	r0, #100	; 0x64
 80008c8:	f000 fd7c 	bl	80013c4 <setTimer1>
			break;
 80008cc:	e120      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
 80008ce:	bf00      	nop
 80008d0:	2000006c 	.word	0x2000006c
 80008d4:	2000007c 	.word	0x2000007c
 80008d8:	20000024 	.word	0x20000024
 80008dc:	2000001c 	.word	0x2000001c
 80008e0:	20000068 	.word	0x20000068
 80008e4:	20000018 	.word	0x20000018
 80008e8:	20000098 	.word	0x20000098
 80008ec:	2000000c 	.word	0x2000000c
 80008f0:	20000020 	.word	0x20000020
 80008f4:	20000064 	.word	0x20000064
		}
		if(buttonPressed_flag[0]){
 80008f8:	4b86      	ldr	r3, [pc, #536]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00d      	beq.n	800091c <FSM_Traffic_Light_Row+0x2ac>
			/* Move to next state */
			buttonPressed_flag[0] = 0;
 8000900:	4b84      	ldr	r3, [pc, #528]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = yellow_time;
 8000906:	4b84      	ldr	r3, [pc, #528]	; (8000b18 <FSM_Traffic_Light_Row+0x4a8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a84      	ldr	r2, [pc, #528]	; (8000b1c <FSM_Traffic_Light_Row+0x4ac>)
 800090c:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = MANUAL_YEL;
 800090e:	4b84      	ldr	r3, [pc, #528]	; (8000b20 <FSM_Traffic_Light_Row+0x4b0>)
 8000910:	2205      	movs	r2, #5
 8000912:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000918:	f000 fd54 	bl	80013c4 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 800091c:	4b7d      	ldr	r3, [pc, #500]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d008      	beq.n	8000936 <FSM_Traffic_Light_Row+0x2c6>
			/* INC. time */
			buttonPressed_flag[1] = 0;
 8000924:	4b7b      	ldr	r3, [pc, #492]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000926:	2200      	movs	r2, #0
 8000928:	705a      	strb	r2, [r3, #1]
			changeTime();
 800092a:	f7ff fe8d 	bl	8000648 <changeTime>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 800092e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000932:	f000 fd47 	bl	80013c4 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000936:	4b77      	ldr	r3, [pc, #476]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000938:	789b      	ldrb	r3, [r3, #2]
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 80df 	beq.w	8000afe <FSM_Traffic_Light_Row+0x48e>
			/* Save value */
			buttonPressed_flag[2] = 0;
 8000940:	4b74      	ldr	r3, [pc, #464]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000942:	2200      	movs	r2, #0
 8000944:	709a      	strb	r2, [r3, #2]
			green_time = Set_TL_Time;
 8000946:	4b75      	ldr	r3, [pc, #468]	; (8000b1c <FSM_Traffic_Light_Row+0x4ac>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a76      	ldr	r2, [pc, #472]	; (8000b24 <FSM_Traffic_Light_Row+0x4b4>)
 800094c:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 800094e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000952:	f000 fd37 	bl	80013c4 <setTimer1>
		}
		break;
 8000956:	e0d2      	b.n	8000afe <FSM_Traffic_Light_Row+0x48e>
	case MANUAL_YEL:
		if(timer1Flag == 1){
 8000958:	4b73      	ldr	r3, [pc, #460]	; (8000b28 <FSM_Traffic_Light_Row+0x4b8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d10d      	bne.n	800097c <FSM_Traffic_Light_Row+0x30c>
			/* Back to default state */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000960:	4b6f      	ldr	r3, [pc, #444]	; (8000b20 <FSM_Traffic_Light_Row+0x4b0>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 8000966:	4b71      	ldr	r3, [pc, #452]	; (8000b2c <FSM_Traffic_Light_Row+0x4bc>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 800096c:	4b70      	ldr	r3, [pc, #448]	; (8000b30 <FSM_Traffic_Light_Row+0x4c0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a70      	ldr	r2, [pc, #448]	; (8000b34 <FSM_Traffic_Light_Row+0x4c4>)
 8000972:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000974:	2064      	movs	r0, #100	; 0x64
 8000976:	f000 fd25 	bl	80013c4 <setTimer1>
			break;
 800097a:	e0c9      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		}
		if(buttonPressed_flag[0]){
 800097c:	4b65      	ldr	r3, [pc, #404]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d013      	beq.n	80009ac <FSM_Traffic_Light_Row+0x33c>
			/* Move to next state */
			buttonPressed_flag[0] = 0;
 8000984:	4b63      	ldr	r3, [pc, #396]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 800098a:	4b69      	ldr	r3, [pc, #420]	; (8000b30 <FSM_Traffic_Light_Row+0x4c0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a63      	ldr	r2, [pc, #396]	; (8000b1c <FSM_Traffic_Light_Row+0x4ac>)
 8000990:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000992:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <FSM_Traffic_Light_Row+0x4c0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a67      	ldr	r2, [pc, #412]	; (8000b34 <FSM_Traffic_Light_Row+0x4c4>)
 8000998:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 800099a:	4b64      	ldr	r3, [pc, #400]	; (8000b2c <FSM_Traffic_Light_Row+0x4bc>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 80009a0:	4b5f      	ldr	r3, [pc, #380]	; (8000b20 <FSM_Traffic_Light_Row+0x4b0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f000 fd0c 	bl	80013c4 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 80009ac:	4b59      	ldr	r3, [pc, #356]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d008      	beq.n	80009c6 <FSM_Traffic_Light_Row+0x356>
			/* INC. time */
			buttonPressed_flag[1] = 0;
 80009b4:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	705a      	strb	r2, [r3, #1]
			changeTime();
 80009ba:	f7ff fe45 	bl	8000648 <changeTime>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80009be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c2:	f000 fcff 	bl	80013c4 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 80009c6:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 8099 	beq.w	8000b02 <FSM_Traffic_Light_Row+0x492>
			/* Save value */
			buttonPressed_flag[2] = 0;
 80009d0:	4b50      	ldr	r3, [pc, #320]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	709a      	strb	r2, [r3, #2]
			yellow_time = Set_TL_Time;
 80009d6:	4b51      	ldr	r3, [pc, #324]	; (8000b1c <FSM_Traffic_Light_Row+0x4ac>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <FSM_Traffic_Light_Row+0x4a8>)
 80009dc:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80009de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e2:	f000 fcef 	bl	80013c4 <setTimer1>
		}
		break;
 80009e6:	e08c      	b.n	8000b02 <FSM_Traffic_Light_Row+0x492>
	case HAND_RED:
		if(buttonPressed_flag[1]){
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 80009ea:	785b      	ldrb	r3, [r3, #1]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d00a      	beq.n	8000a06 <FSM_Traffic_Light_Row+0x396>
			/* Move to next state of HAND MODE */
			buttonPressed_flag[1] = 0;
 80009f0:	4b48      	ldr	r3, [pc, #288]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = HAND_GREEN;
 80009f6:	4b4a      	ldr	r3, [pc, #296]	; (8000b20 <FSM_Traffic_Light_Row+0x4b0>)
 80009f8:	2208      	movs	r2, #8
 80009fa:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = HAND_RED;
 80009fc:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <FSM_Traffic_Light_Row+0x4c8>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000a02:	f7ff fe07 	bl	8000614 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000a06:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d07b      	beq.n	8000b06 <FSM_Traffic_Light_Row+0x496>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000a0e:	4b41      	ldr	r3, [pc, #260]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000a14:	4b46      	ldr	r3, [pc, #280]	; (8000b30 <FSM_Traffic_Light_Row+0x4c0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a40      	ldr	r2, [pc, #256]	; (8000b1c <FSM_Traffic_Light_Row+0x4ac>)
 8000a1a:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000a1c:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <FSM_Traffic_Light_Row+0x4c0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a44      	ldr	r2, [pc, #272]	; (8000b34 <FSM_Traffic_Light_Row+0x4c4>)
 8000a22:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000a24:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <FSM_Traffic_Light_Row+0x4bc>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000a2a:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <FSM_Traffic_Light_Row+0x4b0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000a30:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <FSM_Traffic_Light_Row+0x4c8>)
 8000a32:	2206      	movs	r2, #6
 8000a34:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000a36:	2064      	movs	r0, #100	; 0x64
 8000a38:	f000 fcc4 	bl	80013c4 <setTimer1>
		}
		break;
 8000a3c:	e063      	b.n	8000b06 <FSM_Traffic_Light_Row+0x496>
	case HAND_GREEN:
		if(buttonPressed_flag[1]){
 8000a3e:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000a40:	785b      	ldrb	r3, [r3, #1]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00a      	beq.n	8000a5c <FSM_Traffic_Light_Row+0x3ec>
			/* Move to next state of HAND MODE */
			buttonPressed_flag[1] = 0;
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = HAND_YEL;
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <FSM_Traffic_Light_Row+0x4b0>)
 8000a4e:	2209      	movs	r2, #9
 8000a50:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = HAND_YEL;
 8000a52:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <FSM_Traffic_Light_Row+0x4c8>)
 8000a54:	2209      	movs	r2, #9
 8000a56:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000a58:	f7ff fddc 	bl	8000614 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d052      	beq.n	8000b0a <FSM_Traffic_Light_Row+0x49a>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <FSM_Traffic_Light_Row+0x4c0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <FSM_Traffic_Light_Row+0x4ac>)
 8000a70:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <FSM_Traffic_Light_Row+0x4c0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <FSM_Traffic_Light_Row+0x4c4>)
 8000a78:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <FSM_Traffic_Light_Row+0x4bc>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <FSM_Traffic_Light_Row+0x4b0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <FSM_Traffic_Light_Row+0x4c8>)
 8000a88:	2206      	movs	r2, #6
 8000a8a:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f000 fc99 	bl	80013c4 <setTimer1>
		}
		break;
 8000a92:	e03a      	b.n	8000b0a <FSM_Traffic_Light_Row+0x49a>
	case HAND_YEL:
		if(buttonPressed_flag[1]){
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00a      	beq.n	8000ab2 <FSM_Traffic_Light_Row+0x442>
			/* Move to next state of HAND MODE */
			buttonPressed_flag[1] = 0;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = HAND_RED;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <FSM_Traffic_Light_Row+0x4b0>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = HAND_GREEN;
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <FSM_Traffic_Light_Row+0x4c8>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000aae:	f7ff fdb1 	bl	8000614 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d029      	beq.n	8000b0e <FSM_Traffic_Light_Row+0x49e>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <FSM_Traffic_Light_Row+0x4a4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <FSM_Traffic_Light_Row+0x4c0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <FSM_Traffic_Light_Row+0x4ac>)
 8000ac6:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <FSM_Traffic_Light_Row+0x4c0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <FSM_Traffic_Light_Row+0x4c4>)
 8000ace:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <FSM_Traffic_Light_Row+0x4bc>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <FSM_Traffic_Light_Row+0x4b0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <FSM_Traffic_Light_Row+0x4c8>)
 8000ade:	2206      	movs	r2, #6
 8000ae0:	601a      	str	r2, [r3, #0]
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000ae2:	2064      	movs	r0, #100	; 0x64
 8000ae4:	f000 fc6e 	bl	80013c4 <setTimer1>
		}
		break;
 8000ae8:	e011      	b.n	8000b0e <FSM_Traffic_Light_Row+0x49e>
	default:
		break;
 8000aea:	bf00      	nop
 8000aec:	e010      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		break;
 8000aee:	bf00      	nop
 8000af0:	e00e      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		break;
 8000af2:	bf00      	nop
 8000af4:	e00c      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		break;
 8000af6:	bf00      	nop
 8000af8:	e00a      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		break;
 8000afa:	bf00      	nop
 8000afc:	e008      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		break;
 8000afe:	bf00      	nop
 8000b00:	e006      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		break;
 8000b02:	bf00      	nop
 8000b04:	e004      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		break;
 8000b06:	bf00      	nop
 8000b08:	e002      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e000      	b.n	8000b10 <FSM_Traffic_Light_Row+0x4a0>
		break;
 8000b0e:	bf00      	nop
	}
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000068 	.word	0x20000068
 8000b18:	20000020 	.word	0x20000020
 8000b1c:	20000098 	.word	0x20000098
 8000b20:	2000006c 	.word	0x2000006c
 8000b24:	2000001c 	.word	0x2000001c
 8000b28:	2000007c 	.word	0x2000007c
 8000b2c:	20000064 	.word	0x20000064
 8000b30:	20000018 	.word	0x20000018
 8000b34:	20000024 	.word	0x20000024
 8000b38:	2000000c 	.word	0x2000000c

08000b3c <FSM_Traffic_Light_Col>:
void FSM_Traffic_Light_Col(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Col) {
 8000b40:	4b3d      	ldr	r3, [pc, #244]	; (8000c38 <FSM_Traffic_Light_Col+0xfc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b06      	cmp	r3, #6
 8000b46:	d86b      	bhi.n	8000c20 <FSM_Traffic_Light_Col+0xe4>
 8000b48:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <FSM_Traffic_Light_Col+0x14>)
 8000b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4e:	bf00      	nop
 8000b50:	08000b6d 	.word	0x08000b6d
 8000b54:	08000b9d 	.word	0x08000b9d
 8000b58:	08000bcd 	.word	0x08000bcd
 8000b5c:	08000c21 	.word	0x08000c21
 8000b60:	08000c21 	.word	0x08000c21
 8000b64:	08000c21 	.word	0x08000c21
 8000b68:	08000bfd 	.word	0x08000bfd
	case AUTO_RED:
		if(timer2Flag == 1){
 8000b6c:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <FSM_Traffic_Light_Col+0x100>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d157      	bne.n	8000c24 <FSM_Traffic_Light_Col+0xe8>
			traffic_light_remain_time_col--;
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000b7c:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d106      	bne.n	8000b94 <FSM_Traffic_Light_Col+0x58>
				FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <FSM_Traffic_Light_Col+0xfc>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = green_time;
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <FSM_Traffic_Light_Col+0x108>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000b92:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000b94:	2064      	movs	r0, #100	; 0x64
 8000b96:	f000 fc29 	bl	80013ec <setTimer2>
		}
		break;
 8000b9a:	e043      	b.n	8000c24 <FSM_Traffic_Light_Col+0xe8>
	case AUTO_GREEN:
		if(timer2Flag == 1){
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <FSM_Traffic_Light_Col+0x100>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d141      	bne.n	8000c28 <FSM_Traffic_Light_Col+0xec>
			traffic_light_remain_time_col--;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000bac:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d106      	bne.n	8000bc4 <FSM_Traffic_Light_Col+0x88>
				FSM_Traffic_Light_State_Col = AUTO_YEL;
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <FSM_Traffic_Light_Col+0xfc>)
 8000bb8:	2202      	movs	r2, #2
 8000bba:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = yellow_time;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <FSM_Traffic_Light_Col+0x10c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000bc2:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f000 fc11 	bl	80013ec <setTimer2>
		}
		break;
 8000bca:	e02d      	b.n	8000c28 <FSM_Traffic_Light_Col+0xec>
	case AUTO_YEL:
		if(timer2Flag == 1){
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <FSM_Traffic_Light_Col+0x100>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d12b      	bne.n	8000c2c <FSM_Traffic_Light_Col+0xf0>
			traffic_light_remain_time_col--;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000bdc:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d106      	bne.n	8000bf4 <FSM_Traffic_Light_Col+0xb8>
				FSM_Traffic_Light_State_Col = AUTO_RED;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <FSM_Traffic_Light_Col+0xfc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = red_time;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <FSM_Traffic_Light_Col+0x110>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000bf2:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000bf4:	2064      	movs	r0, #100	; 0x64
 8000bf6:	f000 fbf9 	bl	80013ec <setTimer2>
		}
		break;
 8000bfa:	e017      	b.n	8000c2c <FSM_Traffic_Light_Col+0xf0>
	case BLACK_HOLE:
		/* This is trap state to force Col stop */
		if(To_Default_State == 1){
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <FSM_Traffic_Light_Col+0x114>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d115      	bne.n	8000c30 <FSM_Traffic_Light_Col+0xf4>
			To_Default_State = 0;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <FSM_Traffic_Light_Col+0x114>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <FSM_Traffic_Light_Col+0xfc>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_col = green_time;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <FSM_Traffic_Light_Col+0x108>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <FSM_Traffic_Light_Col+0x104>)
 8000c16:	6013      	str	r3, [r2, #0]
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000c18:	2064      	movs	r0, #100	; 0x64
 8000c1a:	f000 fbe7 	bl	80013ec <setTimer2>
		}
		break;
 8000c1e:	e007      	b.n	8000c30 <FSM_Traffic_Light_Col+0xf4>
	default:
		break;
 8000c20:	bf00      	nop
 8000c22:	e006      	b.n	8000c32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000c24:	bf00      	nop
 8000c26:	e004      	b.n	8000c32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000c28:	bf00      	nop
 8000c2a:	e002      	b.n	8000c32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000c30:	bf00      	nop
	}
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000000c 	.word	0x2000000c
 8000c3c:	20000084 	.word	0x20000084
 8000c40:	20000028 	.word	0x20000028
 8000c44:	2000001c 	.word	0x2000001c
 8000c48:	20000020 	.word	0x20000020
 8000c4c:	20000018 	.word	0x20000018
 8000c50:	20000064 	.word	0x20000064

08000c54 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_UART_RxCpltCallback+0x30>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d10a      	bne.n	8000c7c <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 8000c66:	2332      	movs	r3, #50	; 0x32
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4907      	ldr	r1, [pc, #28]	; (8000c88 <HAL_UART_RxCpltCallback+0x34>)
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <HAL_UART_RxCpltCallback+0x38>)
 8000c6e:	f002 fc0e 	bl	800348e <HAL_UART_Transmit>
		HAL_UART_Receive_IT (&huart2, &temp, 1) ;
 8000c72:	2201      	movs	r2, #1
 8000c74:	4904      	ldr	r1, [pc, #16]	; (8000c88 <HAL_UART_RxCpltCallback+0x34>)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_UART_RxCpltCallback+0x38>)
 8000c78:	f002 fc9b 	bl	80035b2 <HAL_UART_Receive_IT>

	}
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40004400 	.word	0x40004400
 8000c88:	2000009c 	.word	0x2000009c
 8000c8c:	20000130 	.word	0x20000130

08000c90 <FSM_Buzzer>:

void FSM_Buzzer(){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	/* If Pedestrian button is pressed */
	if(FSM_Pedestrian_State == WORK && FSM_Traffic_Light_State_Row == AUTO_RED){
 8000c94:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <FSM_Buzzer+0x104>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d158      	bne.n	8000d4e <FSM_Buzzer+0xbe>
 8000c9c:	4b3e      	ldr	r3, [pc, #248]	; (8000d98 <FSM_Buzzer+0x108>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d154      	bne.n	8000d4e <FSM_Buzzer+0xbe>
		switch (FSM_Buzzer_State){
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <FSM_Buzzer+0x10c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d020      	beq.n	8000cee <FSM_Buzzer+0x5e>
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d148      	bne.n	8000d42 <FSM_Buzzer+0xb2>
		case ON:
			/* Turn on Buzzer */
			if(timer4Flag == 1){
 8000cb0:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <FSM_Buzzer+0x110>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d146      	bne.n	8000d46 <FSM_Buzzer+0xb6>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Increase_Duty_Cycle);
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <FSM_Buzzer+0x114>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <FSM_Buzzer+0x118>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
				Increase_Duty_Cycle += 50;
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <FSM_Buzzer+0x114>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3332      	adds	r3, #50	; 0x32
 8000cc8:	4a36      	ldr	r2, [pc, #216]	; (8000da4 <FSM_Buzzer+0x114>)
 8000cca:	6013      	str	r3, [r2, #0]
				if(Increase_Duty_Cycle >= 999){
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <FSM_Buzzer+0x114>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	dd03      	ble.n	8000ce0 <FSM_Buzzer+0x50>
					Increase_Duty_Cycle = 989;
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <FSM_Buzzer+0x114>)
 8000cda:	f240 32dd 	movw	r2, #989	; 0x3dd
 8000cde:	601a      	str	r2, [r3, #0]
				}
				FSM_Buzzer_State = OFF;
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <FSM_Buzzer+0x10c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
				/* Set time on */
				setTimer4(DURATION_ON_TIME * TICK);
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f000 fba8 	bl	800143c <setTimer4>
			}
			break;
 8000cec:	e02b      	b.n	8000d46 <FSM_Buzzer+0xb6>
		case OFF:
			/* Turn off Buzzer */
			if(timer4Flag == 1){
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <FSM_Buzzer+0x110>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d129      	bne.n	8000d4a <FSM_Buzzer+0xba>
				FSM_Buzzer_State = ON;
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <FSM_Buzzer+0x10c>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <FSM_Buzzer+0x118>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2200      	movs	r2, #0
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
				if(red_time*TICK*100 <= Increase_Speed){
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <FSM_Buzzer+0x11c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2264      	movs	r2, #100	; 0x64
 8000d0a:	fb02 f203 	mul.w	r2, r2, r3
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <FSM_Buzzer+0x120>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dc03      	bgt.n	8000d1e <FSM_Buzzer+0x8e>
					setTimer4(1*TICK);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f000 fb90 	bl	800143c <setTimer4>
					break;
 8000d1c:	e016      	b.n	8000d4c <FSM_Buzzer+0xbc>
				}
				Increase_Speed += 4;
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <FSM_Buzzer+0x120>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3304      	adds	r3, #4
 8000d24:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <FSM_Buzzer+0x120>)
 8000d26:	6013      	str	r3, [r2, #0]
				/* Set time off */
				setTimer4(red_time*TICK*100/Increase_Speed);
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <FSM_Buzzer+0x11c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2264      	movs	r2, #100	; 0x64
 8000d2e:	fb02 f203 	mul.w	r2, r2, r3
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <FSM_Buzzer+0x120>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fb7e 	bl	800143c <setTimer4>
			}
			break;
 8000d40:	e003      	b.n	8000d4a <FSM_Buzzer+0xba>
		default:
			break;
 8000d42:	bf00      	nop
 8000d44:	e023      	b.n	8000d8e <FSM_Buzzer+0xfe>
			break;
 8000d46:	bf00      	nop
 8000d48:	e021      	b.n	8000d8e <FSM_Buzzer+0xfe>
			break;
 8000d4a:	bf00      	nop
		switch (FSM_Buzzer_State){
 8000d4c:	e01f      	b.n	8000d8e <FSM_Buzzer+0xfe>
		}
	}
	else if(FSM_Pedestrian_State == WORK && FSM_Traffic_Light_State_Row != AUTO_RED){
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <FSM_Buzzer+0x104>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10f      	bne.n	8000d76 <FSM_Buzzer+0xe6>
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <FSM_Buzzer+0x108>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00b      	beq.n	8000d76 <FSM_Buzzer+0xe6>
		/* Reset all */
		Increase_Duty_Cycle = 99;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <FSM_Buzzer+0x114>)
 8000d60:	2263      	movs	r2, #99	; 0x63
 8000d62:	601a      	str	r2, [r3, #0]
		Increase_Speed = red_time;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <FSM_Buzzer+0x11c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <FSM_Buzzer+0x120>)
 8000d6a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <FSM_Buzzer+0x118>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
 8000d74:	e00b      	b.n	8000d8e <FSM_Buzzer+0xfe>
	}
	else{
		Increase_Duty_Cycle = 99;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <FSM_Buzzer+0x114>)
 8000d78:	2263      	movs	r2, #99	; 0x63
 8000d7a:	601a      	str	r2, [r3, #0]
		Increase_Speed = red_time;
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <FSM_Buzzer+0x11c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <FSM_Buzzer+0x120>)
 8000d82:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <FSM_Buzzer+0x118>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000070 	.word	0x20000070
 8000d98:	2000006c 	.word	0x2000006c
 8000d9c:	20000074 	.word	0x20000074
 8000da0:	20000094 	.word	0x20000094
 8000da4:	20000010 	.word	0x20000010
 8000da8:	200000a0 	.word	0x200000a0
 8000dac:	20000018 	.word	0x20000018
 8000db0:	20000014 	.word	0x20000014

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db8:	f000 fbd0 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbc:	f000 f824 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f000 f950 	bl	8001064 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dc4:	f000 f862 	bl	8000e8c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000dc8:	f000 f922 	bl	8001010 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000dcc:	f000 f8aa 	bl	8000f24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <main+0x4c>)
 8000dd2:	f001 fc01 	bl	80025d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <main+0x50>)
 8000dda:	f001 fca7 	bl	800272c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8000dde:	2064      	movs	r0, #100	; 0x64
 8000de0:	f000 faf0 	bl	80013c4 <setTimer1>
  setTimer2(100);
 8000de4:	2064      	movs	r0, #100	; 0x64
 8000de6:	f000 fb01 	bl	80013ec <setTimer2>
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
  while (1)
  {
	  FSM_Traffic_Light_Row();
 8000dea:	f7ff fc41 	bl	8000670 <FSM_Traffic_Light_Row>
	  FSM_Traffic_Light_Col();
 8000dee:	f7ff fea5 	bl	8000b3c <FSM_Traffic_Light_Col>
	  FSM_Pedestrian();
 8000df2:	f7ff fb8f 	bl	8000514 <FSM_Pedestrian>
	  display_traffic_light();
 8000df6:	f7ff fa71 	bl	80002dc <display_traffic_light>
	  FSM_Buzzer();
 8000dfa:	f7ff ff49 	bl	8000c90 <FSM_Buzzer>
	  FSM_Traffic_Light_Row();
 8000dfe:	e7f4      	b.n	8000dea <main+0x36>
 8000e00:	200000e8 	.word	0x200000e8
 8000e04:	200000a0 	.word	0x200000a0

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b090      	sub	sp, #64	; 0x40
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	2228      	movs	r2, #40	; 0x28
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 f848 	bl	8003eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e32:	2310      	movs	r3, #16
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e36:	2302      	movs	r3, #2
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e3e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 ff5b 	bl	8001d04 <HAL_RCC_OscConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e54:	f000 f980 	bl	8001158 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e58:	230f      	movs	r3, #15
 8000e5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 f9c6 	bl	8002204 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e7e:	f000 f96b 	bl	8001158 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3740      	adds	r7, #64	; 0x40
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ec0:	223f      	movs	r2, #63	; 0x3f
 8000ec2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ed2:	f001 fb31 	bl	8002538 <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000edc:	f000 f93c 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4619      	mov	r1, r3
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eee:	f001 fe85 	bl	8002bfc <HAL_TIM_ConfigClockSource>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ef8:	f000 f92e 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000f0a:	f002 fa03 	bl	8003314 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f14:	f000 f920 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200000e8 	.word	0x200000e8

08000f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <MX_TIM3_Init+0xe8>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f5c:	224f      	movs	r2, #79	; 0x4f
 8000f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f7a:	4823      	ldr	r0, [pc, #140]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f7c:	f001 fadc 	bl	8002538 <HAL_TIM_Base_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f86:	f000 f8e7 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f94:	4619      	mov	r1, r3
 8000f96:	481c      	ldr	r0, [pc, #112]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f98:	f001 fe30 	bl	8002bfc <HAL_TIM_ConfigClockSource>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fa2:	f000 f8d9 	bl	8001158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fa6:	4818      	ldr	r0, [pc, #96]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000fa8:	f001 fb68 	bl	800267c <HAL_TIM_PWM_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fb2:	f000 f8d1 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000fc6:	f002 f9a5 	bl	8003314 <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fd0:	f000 f8c2 	bl	8001158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd4:	2360      	movs	r3, #96	; 0x60
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 199;
 8000fd8:	23c7      	movs	r3, #199	; 0xc7
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000fec:	f001 fd48 	bl	8002a80 <HAL_TIM_PWM_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ff6:	f000 f8af 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000ffc:	f000 f91c 	bl	8001238 <HAL_TIM_MspPostInit>

}
 8001000:	bf00      	nop
 8001002:	3738      	adds	r7, #56	; 0x38
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200000a0 	.word	0x200000a0
 800100c:	40000400 	.word	0x40000400

08001010 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_USART2_UART_Init+0x50>)
 8001018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USART2_UART_Init+0x4c>)
 800101c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART2_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001048:	f002 f9d4 	bl	80033f4 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001052:	f000 f881 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000130 	.word	0x20000130
 8001060:	40004400 	.word	0x40004400

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <MX_GPIO_Init+0xd0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a2d      	ldr	r2, [pc, #180]	; (8001134 <MX_GPIO_Init+0xd0>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <MX_GPIO_Init+0xd0>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <MX_GPIO_Init+0xd0>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <MX_GPIO_Init+0xd0>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <MX_GPIO_Init+0xd0>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80010ae:	4822      	ldr	r0, [pc, #136]	; (8001138 <MX_GPIO_Init+0xd4>)
 80010b0:	f000 fe0f 	bl	8001cd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80010ba:	4820      	ldr	r0, [pc, #128]	; (800113c <MX_GPIO_Init+0xd8>)
 80010bc:	f000 fe09 	bl	8001cd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDE_Pin BUTTON_MOD_Pin BUTTON_IC_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDE_Pin|BUTTON_MOD_Pin|BUTTON_IC_Pin;
 80010c0:	2313      	movs	r3, #19
 80010c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	4619      	mov	r1, r3
 80010d2:	481a      	ldr	r0, [pc, #104]	; (800113c <MX_GPIO_Init+0xd8>)
 80010d4:	f000 fc62 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_SET_Pin;
 80010d8:	2301      	movs	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_SET_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4619      	mov	r1, r3
 80010ea:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_GPIO_Init+0xd4>)
 80010ec:	f000 fc56 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL1_Pin TL1_SIGNAL2_Pin TL2_SIGNAL2_Pin TL2_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin;
 80010f0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80010f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2302      	movs	r3, #2
 8001100:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	4619      	mov	r1, r3
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <MX_GPIO_Init+0xd4>)
 800110a:	f000 fc47 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL2_Pin TL1_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin;
 800110e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001112:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2302      	movs	r3, #2
 800111e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_GPIO_Init+0xd8>)
 8001128:	f000 fc38 	bl	800199c <HAL_GPIO_Init>

}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021000 	.word	0x40021000
 8001138:	40010c00 	.word	0x40010c00
 800113c:	40010800 	.word	0x40010800

08001140 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	timerRun();
 8001148:	f000 f98c 	bl	8001464 <timerRun>
	button_reading();
 800114c:	f7fe fffe 	bl	800014c <button_reading>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_MspInit+0x5c>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_MspInit+0x5c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x5c>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x5c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_MspInit+0x60>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_MspInit+0x60>)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000

080011c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d8:	d114      	bne.n	8001204 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_TIM_Base_MspInit+0x68>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <HAL_TIM_Base_MspInit+0x68>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_TIM_Base_MspInit+0x68>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	201c      	movs	r0, #28
 80011f8:	f000 fae9 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011fc:	201c      	movs	r0, #28
 80011fe:	f000 fb02 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001202:	e010      	b.n	8001226 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_TIM_Base_MspInit+0x6c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10b      	bne.n	8001226 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_TIM_Base_MspInit+0x68>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_TIM_Base_MspInit+0x68>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_TIM_Base_MspInit+0x68>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	40000400 	.word	0x40000400

08001238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_TIM_MspPostInit+0x58>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d117      	bne.n	8001288 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_TIM_MspPostInit+0x5c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_TIM_MspPostInit+0x5c>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_TIM_MspPostInit+0x5c>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001270:	2340      	movs	r3, #64	; 0x40
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2302      	movs	r3, #2
 800127a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_TIM_MspPostInit+0x60>)
 8001284:	f000 fb8a 	bl	800199c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40000400 	.word	0x40000400
 8001294:	40021000 	.word	0x40021000
 8001298:	40010800 	.word	0x40010800

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d137      	bne.n	800132c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_UART_MspInit+0x9c>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_UART_MspInit+0x9c>)
 80012c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c6:	61d3      	str	r3, [r2, #28]
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_UART_MspInit+0x9c>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_UART_MspInit+0x9c>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_UART_MspInit+0x9c>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_UART_MspInit+0x9c>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ec:	2304      	movs	r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	4619      	mov	r1, r3
 80012fe:	480f      	ldr	r0, [pc, #60]	; (800133c <HAL_UART_MspInit+0xa0>)
 8001300:	f000 fb4c 	bl	800199c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001304:	2308      	movs	r3, #8
 8001306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <HAL_UART_MspInit+0xa0>)
 8001318:	f000 fb40 	bl	800199c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	2026      	movs	r0, #38	; 0x26
 8001322:	f000 fa54 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001326:	2026      	movs	r0, #38	; 0x26
 8001328:	f000 fa6d 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40004400 	.word	0x40004400
 8001338:	40021000 	.word	0x40021000
 800133c:	40010800 	.word	0x40010800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f92f 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <TIM2_IRQHandler+0x10>)
 8001396:	f001 fa6b 	bl	8002870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200000e8 	.word	0x200000e8

080013a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <USART2_IRQHandler+0x10>)
 80013aa:	f002 f933 	bl	8003614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000130 	.word	0x20000130

080013b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <setTimer1>:
 */


#include "timer.h"

void setTimer1(int duration){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	timer1Counter = duration/TICK;
 80013cc:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <setTimer1+0x20>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
	timer1Flag = 0;
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <setTimer1+0x24>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000078 	.word	0x20000078
 80013e8:	2000007c 	.word	0x2000007c

080013ec <setTimer2>:
void setTimer2(int duration){
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	timer2Counter = duration/TICK;
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <setTimer2+0x20>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
	timer2Flag = 0;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <setTimer2+0x24>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000080 	.word	0x20000080
 8001410:	20000084 	.word	0x20000084

08001414 <setTimer3>:
void setTimer3(int duration){
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	timer3Counter = duration/TICK;
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <setTimer3+0x20>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
	timer3Flag = 0;
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <setTimer3+0x24>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000088 	.word	0x20000088
 8001438:	2000008c 	.word	0x2000008c

0800143c <setTimer4>:
void setTimer4(int duration){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	timer4Counter = duration/TICK;
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <setTimer4+0x20>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
	timer4Flag = 0;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <setTimer4+0x24>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000090 	.word	0x20000090
 8001460:	20000094 	.word	0x20000094

08001464 <timerRun>:
void timerRun(){
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	if(timer1Counter > 0){
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <timerRun+0x8c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd0b      	ble.n	8001488 <timerRun+0x24>
		timer1Counter--;
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <timerRun+0x8c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3b01      	subs	r3, #1
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <timerRun+0x8c>)
 8001478:	6013      	str	r3, [r2, #0]
		if(timer1Counter <= 0){
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <timerRun+0x8c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	dc02      	bgt.n	8001488 <timerRun+0x24>
			timer1Flag = 1;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <timerRun+0x90>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2Counter > 0){
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <timerRun+0x94>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	dd0b      	ble.n	80014a8 <timerRun+0x44>
		timer2Counter--;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <timerRun+0x94>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <timerRun+0x94>)
 8001498:	6013      	str	r3, [r2, #0]
		if(timer2Counter <= 0){
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <timerRun+0x94>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	dc02      	bgt.n	80014a8 <timerRun+0x44>
			timer2Flag = 1;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <timerRun+0x98>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3Counter > 0){
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <timerRun+0x9c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	dd0b      	ble.n	80014c8 <timerRun+0x64>
		timer3Counter--;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <timerRun+0x9c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <timerRun+0x9c>)
 80014b8:	6013      	str	r3, [r2, #0]
		if(timer3Counter <= 0){
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <timerRun+0x9c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	dc02      	bgt.n	80014c8 <timerRun+0x64>
			timer3Flag = 1;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <timerRun+0xa0>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4Counter > 0){
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <timerRun+0xa4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dd0b      	ble.n	80014e8 <timerRun+0x84>
		timer4Counter--;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <timerRun+0xa4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <timerRun+0xa4>)
 80014d8:	6013      	str	r3, [r2, #0]
		if(timer4Counter <= 0){
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <timerRun+0xa4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	dc02      	bgt.n	80014e8 <timerRun+0x84>
			timer4Flag = 1;
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <timerRun+0xa8>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000078 	.word	0x20000078
 80014f4:	2000007c 	.word	0x2000007c
 80014f8:	20000080 	.word	0x20000080
 80014fc:	20000084 	.word	0x20000084
 8001500:	20000088 	.word	0x20000088
 8001504:	2000008c 	.word	0x2000008c
 8001508:	20000090 	.word	0x20000090
 800150c:	20000094 	.word	0x20000094

08001510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	; (8001554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001536:	f7ff ff3f 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f002 fc93 	bl	8003e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153e:	f7ff fc39 	bl	8000db4 <main>
  bx lr
 8001542:	4770      	bx	lr
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800154c:	08003f04 	.word	0x08003f04
  ldr r2, =_sbss
 8001550:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001554:	20000178 	.word	0x20000178

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x28>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x28>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f923 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fdf4 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022000 	.word	0x40022000

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f93b 	bl	8001822 <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f903 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000002c 	.word	0x2000002c
 80015e0:	20000034 	.word	0x20000034
 80015e4:	20000030 	.word	0x20000030

080015e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x1c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x20>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x20>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000034 	.word	0x20000034
 8001608:	20000174 	.word	0x20000174

0800160c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_GetTick+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	20000174 	.word	0x20000174

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4906      	ldr	r1, [pc, #24]	; (80016b8 <__NVIC_EnableIRQ+0x34>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff90 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff2d 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff42 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff90 	bl	8001710 <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5f 	bl	80016bc <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff35 	bl	8001684 <__NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffa2 	bl	8001774 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800184c:	2b02      	cmp	r3, #2
 800184e:	d008      	beq.n	8001862 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2204      	movs	r2, #4
 8001854:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e020      	b.n	80018a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 020e 	bic.w	r2, r2, #14
 8001870:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d005      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2204      	movs	r2, #4
 80018ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e051      	b.n	8001976 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 020e 	bic.w	r2, r2, #14
 80018e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a22      	ldr	r2, [pc, #136]	; (8001980 <HAL_DMA_Abort_IT+0xd0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d029      	beq.n	8001950 <HAL_DMA_Abort_IT+0xa0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a20      	ldr	r2, [pc, #128]	; (8001984 <HAL_DMA_Abort_IT+0xd4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d022      	beq.n	800194c <HAL_DMA_Abort_IT+0x9c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <HAL_DMA_Abort_IT+0xd8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d01a      	beq.n	8001946 <HAL_DMA_Abort_IT+0x96>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <HAL_DMA_Abort_IT+0xdc>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d012      	beq.n	8001940 <HAL_DMA_Abort_IT+0x90>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <HAL_DMA_Abort_IT+0xe0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d00a      	beq.n	800193a <HAL_DMA_Abort_IT+0x8a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <HAL_DMA_Abort_IT+0xe4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d102      	bne.n	8001934 <HAL_DMA_Abort_IT+0x84>
 800192e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001932:	e00e      	b.n	8001952 <HAL_DMA_Abort_IT+0xa2>
 8001934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001938:	e00b      	b.n	8001952 <HAL_DMA_Abort_IT+0xa2>
 800193a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193e:	e008      	b.n	8001952 <HAL_DMA_Abort_IT+0xa2>
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	e005      	b.n	8001952 <HAL_DMA_Abort_IT+0xa2>
 8001946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194a:	e002      	b.n	8001952 <HAL_DMA_Abort_IT+0xa2>
 800194c:	2310      	movs	r3, #16
 800194e:	e000      	b.n	8001952 <HAL_DMA_Abort_IT+0xa2>
 8001950:	2301      	movs	r3, #1
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_DMA_Abort_IT+0xe8>)
 8001954:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
    } 
  }
  return status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40020008 	.word	0x40020008
 8001984:	4002001c 	.word	0x4002001c
 8001988:	40020030 	.word	0x40020030
 800198c:	40020044 	.word	0x40020044
 8001990:	40020058 	.word	0x40020058
 8001994:	4002006c 	.word	0x4002006c
 8001998:	40020000 	.word	0x40020000

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b08b      	sub	sp, #44	; 0x2c
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ae:	e169      	b.n	8001c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019b0:	2201      	movs	r2, #1
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f040 8158 	bne.w	8001c7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a9a      	ldr	r2, [pc, #616]	; (8001c3c <HAL_GPIO_Init+0x2a0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d05e      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 80019d8:	4a98      	ldr	r2, [pc, #608]	; (8001c3c <HAL_GPIO_Init+0x2a0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d875      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 80019de:	4a98      	ldr	r2, [pc, #608]	; (8001c40 <HAL_GPIO_Init+0x2a4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d058      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 80019e4:	4a96      	ldr	r2, [pc, #600]	; (8001c40 <HAL_GPIO_Init+0x2a4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d86f      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 80019ea:	4a96      	ldr	r2, [pc, #600]	; (8001c44 <HAL_GPIO_Init+0x2a8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d052      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 80019f0:	4a94      	ldr	r2, [pc, #592]	; (8001c44 <HAL_GPIO_Init+0x2a8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d869      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 80019f6:	4a94      	ldr	r2, [pc, #592]	; (8001c48 <HAL_GPIO_Init+0x2ac>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d04c      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 80019fc:	4a92      	ldr	r2, [pc, #584]	; (8001c48 <HAL_GPIO_Init+0x2ac>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d863      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 8001a02:	4a92      	ldr	r2, [pc, #584]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d046      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 8001a08:	4a90      	ldr	r2, [pc, #576]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d85d      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 8001a0e:	2b12      	cmp	r3, #18
 8001a10:	d82a      	bhi.n	8001a68 <HAL_GPIO_Init+0xcc>
 8001a12:	2b12      	cmp	r3, #18
 8001a14:	d859      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <HAL_GPIO_Init+0x80>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a97 	.word	0x08001a97
 8001a20:	08001a71 	.word	0x08001a71
 8001a24:	08001a83 	.word	0x08001a83
 8001a28:	08001ac5 	.word	0x08001ac5
 8001a2c:	08001acb 	.word	0x08001acb
 8001a30:	08001acb 	.word	0x08001acb
 8001a34:	08001acb 	.word	0x08001acb
 8001a38:	08001acb 	.word	0x08001acb
 8001a3c:	08001acb 	.word	0x08001acb
 8001a40:	08001acb 	.word	0x08001acb
 8001a44:	08001acb 	.word	0x08001acb
 8001a48:	08001acb 	.word	0x08001acb
 8001a4c:	08001acb 	.word	0x08001acb
 8001a50:	08001acb 	.word	0x08001acb
 8001a54:	08001acb 	.word	0x08001acb
 8001a58:	08001acb 	.word	0x08001acb
 8001a5c:	08001acb 	.word	0x08001acb
 8001a60:	08001a79 	.word	0x08001a79
 8001a64:	08001a8d 	.word	0x08001a8d
 8001a68:	4a79      	ldr	r2, [pc, #484]	; (8001c50 <HAL_GPIO_Init+0x2b4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a6e:	e02c      	b.n	8001aca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	623b      	str	r3, [r7, #32]
          break;
 8001a76:	e029      	b.n	8001acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	623b      	str	r3, [r7, #32]
          break;
 8001a80:	e024      	b.n	8001acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	3308      	adds	r3, #8
 8001a88:	623b      	str	r3, [r7, #32]
          break;
 8001a8a:	e01f      	b.n	8001acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	330c      	adds	r3, #12
 8001a92:	623b      	str	r3, [r7, #32]
          break;
 8001a94:	e01a      	b.n	8001acc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	623b      	str	r3, [r7, #32]
          break;
 8001aa2:	e013      	b.n	8001acc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aac:	2308      	movs	r3, #8
 8001aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	611a      	str	r2, [r3, #16]
          break;
 8001ab6:	e009      	b.n	8001acc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	615a      	str	r2, [r3, #20]
          break;
 8001ac2:	e003      	b.n	8001acc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
          break;
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x130>
          break;
 8001aca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2bff      	cmp	r3, #255	; 0xff
 8001ad0:	d801      	bhi.n	8001ad6 <HAL_GPIO_Init+0x13a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	e001      	b.n	8001ada <HAL_GPIO_Init+0x13e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2bff      	cmp	r3, #255	; 0xff
 8001ae0:	d802      	bhi.n	8001ae8 <HAL_GPIO_Init+0x14c>
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x152>
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	3b08      	subs	r3, #8
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	210f      	movs	r1, #15
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	401a      	ands	r2, r3
 8001b00:	6a39      	ldr	r1, [r7, #32]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80b1 	beq.w	8001c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b1c:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <HAL_GPIO_Init+0x2b8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a4c      	ldr	r2, [pc, #304]	; (8001c54 <HAL_GPIO_Init+0x2b8>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <HAL_GPIO_Init+0x2b8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b34:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <HAL_GPIO_Init+0x2bc>)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a40      	ldr	r2, [pc, #256]	; (8001c5c <HAL_GPIO_Init+0x2c0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d013      	beq.n	8001b88 <HAL_GPIO_Init+0x1ec>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a3f      	ldr	r2, [pc, #252]	; (8001c60 <HAL_GPIO_Init+0x2c4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00d      	beq.n	8001b84 <HAL_GPIO_Init+0x1e8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a3e      	ldr	r2, [pc, #248]	; (8001c64 <HAL_GPIO_Init+0x2c8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d007      	beq.n	8001b80 <HAL_GPIO_Init+0x1e4>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a3d      	ldr	r2, [pc, #244]	; (8001c68 <HAL_GPIO_Init+0x2cc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d101      	bne.n	8001b7c <HAL_GPIO_Init+0x1e0>
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e006      	b.n	8001b8a <HAL_GPIO_Init+0x1ee>
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	e004      	b.n	8001b8a <HAL_GPIO_Init+0x1ee>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e002      	b.n	8001b8a <HAL_GPIO_Init+0x1ee>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_GPIO_Init+0x1ee>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8c:	f002 0203 	and.w	r2, r2, #3
 8001b90:	0092      	lsls	r2, r2, #2
 8001b92:	4093      	lsls	r3, r2
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b9a:	492f      	ldr	r1, [pc, #188]	; (8001c58 <HAL_GPIO_Init+0x2bc>)
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	492c      	ldr	r1, [pc, #176]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4928      	ldr	r1, [pc, #160]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4922      	ldr	r1, [pc, #136]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	491e      	ldr	r1, [pc, #120]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4918      	ldr	r1, [pc, #96]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	608b      	str	r3, [r1, #8]
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	4914      	ldr	r1, [pc, #80]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d021      	beq.n	8001c70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60cb      	str	r3, [r1, #12]
 8001c38:	e021      	b.n	8001c7e <HAL_GPIO_Init+0x2e2>
 8001c3a:	bf00      	nop
 8001c3c:	10320000 	.word	0x10320000
 8001c40:	10310000 	.word	0x10310000
 8001c44:	10220000 	.word	0x10220000
 8001c48:	10210000 	.word	0x10210000
 8001c4c:	10120000 	.word	0x10120000
 8001c50:	10110000 	.word	0x10110000
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40010800 	.word	0x40010800
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	40011000 	.word	0x40011000
 8001c68:	40011400 	.word	0x40011400
 8001c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4909      	ldr	r1, [pc, #36]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	3301      	adds	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f47f ae8e 	bne.w	80019b0 <HAL_GPIO_Init+0x14>
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	372c      	adds	r7, #44	; 0x2c
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	40010400 	.word	0x40010400

08001ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	e001      	b.n	8001cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	807b      	strh	r3, [r7, #2]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce2:	787b      	ldrb	r3, [r7, #1]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce8:	887a      	ldrh	r2, [r7, #2]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	041a      	lsls	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	611a      	str	r2, [r3, #16]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e26c      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8087 	beq.w	8001e32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d24:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d00c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d30:	4b8f      	ldr	r3, [pc, #572]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d112      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
 8001d3c:	4b8c      	ldr	r3, [pc, #560]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d06c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x12c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d168      	bne.n	8001e30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e246      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x76>
 8001d6c:	4b80      	ldr	r3, [pc, #512]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a7f      	ldr	r2, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e02e      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x98>
 8001d82:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7a      	ldr	r2, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a77      	ldr	r2, [pc, #476]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xbc>
 8001da6:	4b72      	ldr	r3, [pc, #456]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a71      	ldr	r2, [pc, #452]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001dc0:	4b6b      	ldr	r3, [pc, #428]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a67      	ldr	r2, [pc, #412]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fc14 	bl	800160c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fc10 	bl	800160c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1fa      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe4>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fc00 	bl	800160c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fbfc 	bl	800160c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1e6      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x10c>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d063      	beq.n	8001f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3e:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d11c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x18c>
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d116      	bne.n	8001e90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x176>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1ba      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4939      	ldr	r1, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	e03a      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fbb5 	bl	800160c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fbb1 	bl	800160c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e19b      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4927      	ldr	r1, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fb94 	bl	800160c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fb90 	bl	800160c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e17a      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d03a      	beq.n	8001f88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d019      	beq.n	8001f4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fb74 	bl	800160c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff fb70 	bl	800160c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e15a      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f000 fad8 	bl	80024fc <RCC_Delay>
 8001f4c:	e01c      	b.n	8001f88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCC_OscConfig+0x274>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7ff fb5a 	bl	800160c <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5a:	e00f      	b.n	8001f7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fb56 	bl	800160c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d908      	bls.n	8001f7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e140      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	42420000 	.word	0x42420000
 8001f78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	4b9e      	ldr	r3, [pc, #632]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e9      	bne.n	8001f5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a6 	beq.w	80020e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b97      	ldr	r3, [pc, #604]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b94      	ldr	r3, [pc, #592]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a93      	ldr	r2, [pc, #588]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d118      	bne.n	8002000 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a8a      	ldr	r2, [pc, #552]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fda:	f7ff fb17 	bl	800160c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7ff fb13 	bl	800160c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b64      	cmp	r3, #100	; 0x64
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0fd      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	4b81      	ldr	r3, [pc, #516]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x312>
 8002008:	4b7b      	ldr	r3, [pc, #492]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a7a      	ldr	r2, [pc, #488]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	e02d      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x334>
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a72      	ldr	r2, [pc, #456]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	e01c      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b05      	cmp	r3, #5
 800203e:	d10c      	bne.n	800205a <HAL_RCC_OscConfig+0x356>
 8002040:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a6c      	ldr	r2, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a69      	ldr	r2, [pc, #420]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e00b      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d015      	beq.n	80020a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff fac7 	bl	800160c <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff fac3 	bl	800160c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0ab      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ee      	beq.n	8002082 <HAL_RCC_OscConfig+0x37e>
 80020a4:	e014      	b.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fab1 	bl	800160c <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff faad 	bl	800160c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e095      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ee      	bne.n	80020ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d105      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a47      	ldr	r2, [pc, #284]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8081 	beq.w	80021ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ec:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d061      	beq.n	80021bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d146      	bne.n	800218e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002100:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCC_OscConfig+0x4fc>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fa81 	bl	800160c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210e:	f7ff fa7d 	bl	800160c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e067      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002134:	d108      	bne.n	8002148 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002136:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	492d      	ldr	r1, [pc, #180]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a19      	ldr	r1, [r3, #32]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	430b      	orrs	r3, r1
 800215a:	4927      	ldr	r1, [pc, #156]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x4fc>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fa51 	bl	800160c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fa4d 	bl	800160c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e037      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x46a>
 800218c:	e02f      	b.n	80021ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_RCC_OscConfig+0x4fc>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fa3a 	bl	800160c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fa36 	bl	800160c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e020      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x498>
 80021ba:	e018      	b.n	80021ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e013      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40007000 	.word	0x40007000
 8002200:	42420060 	.word	0x42420060

08002204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0d0      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d910      	bls.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0207 	bic.w	r2, r3, #7
 800222e:	4965      	ldr	r1, [pc, #404]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0b8      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800226a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002282:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	494d      	ldr	r1, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d040      	beq.n	8002324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d115      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e07f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e073      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06b      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4936      	ldr	r1, [pc, #216]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f4:	f7ff f98a 	bl	800160c <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7ff f986 	bl	800160c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e053      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 020c 	and.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d1eb      	bne.n	80022fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d210      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 0207 	bic.w	r2, r3, #7
 800233a:	4922      	ldr	r1, [pc, #136]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e032      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4916      	ldr	r1, [pc, #88]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002392:	f000 f821 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002396:	4602      	mov	r2, r0
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	490a      	ldr	r1, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	5ccb      	ldrb	r3, [r1, r3]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1cc>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f8e8 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08003ee4 	.word	0x08003ee4
 80023d0:	2000002c 	.word	0x2000002c
 80023d4:	20000030 	.word	0x20000030

080023d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b490      	push	{r4, r7}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023de:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023e0:	1d3c      	adds	r4, r7, #4
 80023e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023e8:	f240 2301 	movw	r3, #513	; 0x201
 80023ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b04      	cmp	r3, #4
 8002410:	d002      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x40>
 8002412:	2b08      	cmp	r3, #8
 8002414:	d003      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x46>
 8002416:	e02d      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241a:	623b      	str	r3, [r7, #32]
      break;
 800241c:	e02d      	b.n	800247a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	0c9b      	lsrs	r3, r3, #18
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800242a:	4413      	add	r3, r2
 800242c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002430:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_GetSysClockFreq+0xb4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0c5b      	lsrs	r3, r3, #17
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800244a:	4413      	add	r3, r2
 800244c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002450:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002456:	fb02 f203 	mul.w	r2, r2, r3
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	e004      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	623b      	str	r3, [r7, #32]
      break;
 8002472:	e002      	b.n	800247a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002476:	623b      	str	r3, [r7, #32]
      break;
 8002478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247a:	6a3b      	ldr	r3, [r7, #32]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bc90      	pop	{r4, r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	08003ed4 	.word	0x08003ed4
 800248c:	40021000 	.word	0x40021000
 8002490:	007a1200 	.word	0x007a1200
 8002494:	003d0900 	.word	0x003d0900

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	2000002c 	.word	0x2000002c

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff2 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	08003ef4 	.word	0x08003ef4

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffde 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0adb      	lsrs	r3, r3, #11
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08003ef4 	.word	0x08003ef4

080024fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <RCC_Delay+0x34>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <RCC_Delay+0x38>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a5b      	lsrs	r3, r3, #9
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002518:	bf00      	nop
  }
  while (Delay --);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	60fa      	str	r2, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f9      	bne.n	8002518 <RCC_Delay+0x1c>
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	2000002c 	.word	0x2000002c
 8002534:	10624dd3 	.word	0x10624dd3

08002538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e041      	b.n	80025ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe fe32 	bl	80011c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 fc28 	bl	8002dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d001      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e03a      	b.n	8002666 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_TIM_Base_Start_IT+0x98>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00e      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x58>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261a:	d009      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x58>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <HAL_TIM_Base_Start_IT+0x9c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x58>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a13      	ldr	r2, [pc, #76]	; (8002678 <HAL_TIM_Base_Start_IT+0xa0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d111      	bne.n	8002654 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b06      	cmp	r3, #6
 8002640:	d010      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002652:	e007      	b.n	8002664 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40000400 	.word	0x40000400
 8002678:	40000800 	.word	0x40000800

0800267c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e041      	b.n	8002712 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f839 	bl	800271a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f000 fb86 	bl	8002dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <HAL_TIM_PWM_Start+0x24>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	e022      	b.n	8002796 <HAL_TIM_PWM_Start+0x6a>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b04      	cmp	r3, #4
 8002754:	d109      	bne.n	800276a <HAL_TIM_PWM_Start+0x3e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	bf14      	ite	ne
 8002762:	2301      	movne	r3, #1
 8002764:	2300      	moveq	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	e015      	b.n	8002796 <HAL_TIM_PWM_Start+0x6a>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d109      	bne.n	8002784 <HAL_TIM_PWM_Start+0x58>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e008      	b.n	8002796 <HAL_TIM_PWM_Start+0x6a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e05e      	b.n	800285c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_PWM_Start+0x82>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027ac:	e013      	b.n	80027d6 <HAL_TIM_PWM_Start+0xaa>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d104      	bne.n	80027be <HAL_TIM_PWM_Start+0x92>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027bc:	e00b      	b.n	80027d6 <HAL_TIM_PWM_Start+0xaa>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_PWM_Start+0xa2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027cc:	e003      	b.n	80027d6 <HAL_TIM_PWM_Start+0xaa>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2201      	movs	r2, #1
 80027dc:	6839      	ldr	r1, [r7, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fd74 	bl	80032cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <HAL_TIM_PWM_Start+0x138>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d107      	bne.n	80027fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_TIM_PWM_Start+0x138>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_TIM_PWM_Start+0xfa>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d009      	beq.n	8002826 <HAL_TIM_PWM_Start+0xfa>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_TIM_PWM_Start+0x13c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_TIM_PWM_Start+0xfa>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_TIM_PWM_Start+0x140>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d111      	bne.n	800284a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d010      	beq.n	800285a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002848:	e007      	b.n	800285a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800

08002870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d122      	bne.n	80028cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b02      	cmp	r3, #2
 8002892:	d11b      	bne.n	80028cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0202 	mvn.w	r2, #2
 800289c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fa6f 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa62 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fa71 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d122      	bne.n	8002920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d11b      	bne.n	8002920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0204 	mvn.w	r2, #4
 80028f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa45 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 800290c:	e005      	b.n	800291a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fa38 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fa47 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b08      	cmp	r3, #8
 800292c:	d122      	bne.n	8002974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b08      	cmp	r3, #8
 800293a:	d11b      	bne.n	8002974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0208 	mvn.w	r2, #8
 8002944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2204      	movs	r2, #4
 800294a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa1b 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 8002960:	e005      	b.n	800296e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fa0e 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fa1d 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b10      	cmp	r3, #16
 8002980:	d122      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b10      	cmp	r3, #16
 800298e:	d11b      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0210 	mvn.w	r2, #16
 8002998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2208      	movs	r2, #8
 800299e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f9f1 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 80029b4:	e005      	b.n	80029c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f9e4 	bl	8002d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f9f3 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d107      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0201 	mvn.w	r2, #1
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fba6 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	2b80      	cmp	r3, #128	; 0x80
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b80      	cmp	r3, #128	; 0x80
 8002a0e:	d107      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fce1 	bl	80033e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d10e      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d107      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f9b7 	bl	8002dba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d10e      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d107      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0220 	mvn.w	r2, #32
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fcac 	bl	80033d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e0ac      	b.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	f200 809f 	bhi.w	8002be8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002aaa:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002ae5 	.word	0x08002ae5
 8002ab4:	08002be9 	.word	0x08002be9
 8002ab8:	08002be9 	.word	0x08002be9
 8002abc:	08002be9 	.word	0x08002be9
 8002ac0:	08002b25 	.word	0x08002b25
 8002ac4:	08002be9 	.word	0x08002be9
 8002ac8:	08002be9 	.word	0x08002be9
 8002acc:	08002be9 	.word	0x08002be9
 8002ad0:	08002b67 	.word	0x08002b67
 8002ad4:	08002be9 	.word	0x08002be9
 8002ad8:	08002be9 	.word	0x08002be9
 8002adc:	08002be9 	.word	0x08002be9
 8002ae0:	08002ba7 	.word	0x08002ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f9d0 	bl	8002e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0208 	orr.w	r2, r2, #8
 8002afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0204 	bic.w	r2, r2, #4
 8002b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6999      	ldr	r1, [r3, #24]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	619a      	str	r2, [r3, #24]
      break;
 8002b22:	e062      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fa16 	bl	8002f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6999      	ldr	r1, [r3, #24]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	021a      	lsls	r2, r3, #8
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	619a      	str	r2, [r3, #24]
      break;
 8002b64:	e041      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fa5f 	bl	8003030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0208 	orr.w	r2, r2, #8
 8002b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0204 	bic.w	r2, r2, #4
 8002b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69d9      	ldr	r1, [r3, #28]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	61da      	str	r2, [r3, #28]
      break;
 8002ba4:	e021      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 faa9 	bl	8003104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69d9      	ldr	r1, [r3, #28]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	021a      	lsls	r2, r3, #8
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	61da      	str	r2, [r3, #28]
      break;
 8002be6:	e000      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIM_ConfigClockSource+0x18>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e0b3      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x180>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4c:	d03e      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0xd0>
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	f200 8087 	bhi.w	8002d64 <HAL_TIM_ConfigClockSource+0x168>
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5a:	f000 8085 	beq.w	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c62:	d87f      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x168>
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d01a      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0xa2>
 8002c68:	2b70      	cmp	r3, #112	; 0x70
 8002c6a:	d87b      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x168>
 8002c6c:	2b60      	cmp	r3, #96	; 0x60
 8002c6e:	d050      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x116>
 8002c70:	2b60      	cmp	r3, #96	; 0x60
 8002c72:	d877      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x168>
 8002c74:	2b50      	cmp	r3, #80	; 0x50
 8002c76:	d03c      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0xf6>
 8002c78:	2b50      	cmp	r3, #80	; 0x50
 8002c7a:	d873      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x168>
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d058      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x136>
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d86f      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x168>
 8002c84:	2b30      	cmp	r3, #48	; 0x30
 8002c86:	d064      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x156>
 8002c88:	2b30      	cmp	r3, #48	; 0x30
 8002c8a:	d86b      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x168>
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d060      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x156>
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d867      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x168>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d05c      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x156>
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d05a      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c9c:	e062      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f000 faee 	bl	800328e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
      break;
 8002cca:	e04e      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f000 fad7 	bl	800328e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cee:	609a      	str	r2, [r3, #8]
      break;
 8002cf0:	e03b      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f000 fa4e 	bl	80031a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2150      	movs	r1, #80	; 0x50
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 faa5 	bl	800325a <TIM_ITRx_SetConfig>
      break;
 8002d10:	e02b      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f000 fa6c 	bl	80031fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2160      	movs	r1, #96	; 0x60
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fa95 	bl	800325a <TIM_ITRx_SetConfig>
      break;
 8002d30:	e01b      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f000 fa2e 	bl	80031a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2140      	movs	r1, #64	; 0x40
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fa85 	bl	800325a <TIM_ITRx_SetConfig>
      break;
 8002d50:	e00b      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f000 fa7c 	bl	800325a <TIM_ITRx_SetConfig>
        break;
 8002d62:	e002      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d64:	bf00      	nop
 8002d66:	e000      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a29      	ldr	r2, [pc, #164]	; (8002e84 <TIM_Base_SetConfig+0xb8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <TIM_Base_SetConfig+0x30>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dea:	d007      	beq.n	8002dfc <TIM_Base_SetConfig+0x30>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <TIM_Base_SetConfig+0xbc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0x30>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a25      	ldr	r2, [pc, #148]	; (8002e8c <TIM_Base_SetConfig+0xc0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d108      	bne.n	8002e0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <TIM_Base_SetConfig+0xb8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <TIM_Base_SetConfig+0xbc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <TIM_Base_SetConfig+0xc0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <TIM_Base_SetConfig+0xb8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d103      	bne.n	8002e74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40000800 	.word	0x40000800

08002e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f023 0201 	bic.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f023 0302 	bic.w	r3, r3, #2
 8002ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <TIM_OC1_SetConfig+0xc8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d10c      	bne.n	8002f06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f023 0308 	bic.w	r3, r3, #8
 8002ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <TIM_OC1_SetConfig+0xc8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d111      	bne.n	8002f32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	621a      	str	r2, [r3, #32]
}
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40012c00 	.word	0x40012c00

08002f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f023 0210 	bic.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f023 0320 	bic.w	r3, r3, #32
 8002fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a1d      	ldr	r2, [pc, #116]	; (800302c <TIM_OC2_SetConfig+0xd0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d10d      	bne.n	8002fd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a14      	ldr	r2, [pc, #80]	; (800302c <TIM_OC2_SetConfig+0xd0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d113      	bne.n	8003008 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	621a      	str	r2, [r3, #32]
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40012c00 	.word	0x40012c00

08003030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0303 	bic.w	r3, r3, #3
 8003066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <TIM_OC3_SetConfig+0xd0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10d      	bne.n	80030aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a14      	ldr	r2, [pc, #80]	; (8003100 <TIM_OC3_SetConfig+0xd0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d113      	bne.n	80030da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	621a      	str	r2, [r3, #32]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40012c00 	.word	0x40012c00

08003104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800314e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	031b      	lsls	r3, r3, #12
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0f      	ldr	r2, [pc, #60]	; (800319c <TIM_OC4_SetConfig+0x98>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d109      	bne.n	8003178 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800316a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	40012c00 	.word	0x40012c00

080031a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f023 0201 	bic.w	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f023 030a 	bic.w	r3, r3, #10
 80031dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f023 0210 	bic.w	r2, r3, #16
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003226:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	031b      	lsls	r3, r3, #12
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003238:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	621a      	str	r2, [r3, #32]
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	f043 0307 	orr.w	r3, r3, #7
 800327c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800328e:	b480      	push	{r7}
 8003290:	b087      	sub	sp, #28
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	021a      	lsls	r2, r3, #8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	609a      	str	r2, [r3, #8]
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2201      	movs	r2, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	621a      	str	r2, [r3, #32]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003328:	2302      	movs	r3, #2
 800332a:	e046      	b.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003378:	d009      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a10      	ldr	r2, [pc, #64]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10c      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800

080033d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e03f      	b.n	8003486 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd ff3e 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fc85 	bl	8003d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800344c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800345c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800346c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08a      	sub	sp, #40	; 0x28
 8003492:	af02      	add	r7, sp, #8
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d17c      	bne.n	80035a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_UART_Transmit+0x2c>
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e075      	b.n	80035aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_UART_Transmit+0x3e>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e06e      	b.n	80035aa <HAL_UART_Transmit+0x11c>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2221      	movs	r2, #33	; 0x21
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e2:	f7fe f893 	bl	800160c <HAL_GetTick>
 80034e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d108      	bne.n	8003510 <HAL_UART_Transmit+0x82>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	e003      	b.n	8003518 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003520:	e02a      	b.n	8003578 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fa38 	bl	80039a2 <UART_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e036      	b.n	80035aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003550:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	3302      	adds	r3, #2
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e007      	b.n	800356a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	3301      	adds	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1cf      	bne.n	8003522 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2200      	movs	r2, #0
 800358a:	2140      	movs	r1, #64	; 0x40
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fa08 	bl	80039a2 <UART_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e006      	b.n	80035aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	4613      	mov	r3, r2
 80035be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d11d      	bne.n	8003608 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_UART_Receive_IT+0x26>
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e016      	b.n	800360a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Receive_IT+0x38>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e00f      	b.n	800360a <HAL_UART_Receive_IT+0x58>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	461a      	mov	r2, r3
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fa19 	bl	8003a36 <UART_Start_Receive_IT>
 8003604:	4603      	mov	r3, r0
 8003606:	e000      	b.n	800360a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10d      	bne.n	8003666 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_UART_IRQHandler+0x52>
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fac9 	bl	8003bf6 <UART_Receive_IT>
      return;
 8003664:	e17b      	b.n	800395e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80b1 	beq.w	80037d0 <HAL_UART_IRQHandler+0x1bc>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <HAL_UART_IRQHandler+0x70>
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80a6 	beq.w	80037d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_UART_IRQHandler+0x90>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f043 0201 	orr.w	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_UART_IRQHandler+0xb0>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0202 	orr.w	r2, r3, #2
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_UART_IRQHandler+0xd0>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0204 	orr.w	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00f      	beq.n	800370e <HAL_UART_IRQHandler+0xfa>
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <HAL_UART_IRQHandler+0xee>
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f043 0208 	orr.w	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 811e 	beq.w	8003954 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_UART_IRQHandler+0x11e>
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fa62 	bl	8003bf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <HAL_UART_IRQHandler+0x146>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d031      	beq.n	80037be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f9a4 	bl	8003aa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d023      	beq.n	80037b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d013      	beq.n	80037ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	4a76      	ldr	r2, [pc, #472]	; (8003964 <HAL_UART_IRQHandler+0x350>)
 800378c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe f88c 	bl	80018b0 <HAL_DMA_Abort_IT>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a8:	4610      	mov	r0, r2
 80037aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e00e      	b.n	80037cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8e3 	bl	800397a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e00a      	b.n	80037cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8df 	bl	800397a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	e006      	b.n	80037cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8db 	bl	800397a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037ca:	e0c3      	b.n	8003954 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	bf00      	nop
    return;
 80037ce:	e0c1      	b.n	8003954 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	f040 80a1 	bne.w	800391c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 809b 	beq.w	800391c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8095 	beq.w	800391c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d04e      	beq.n	80038b4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003820:	8a3b      	ldrh	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8098 	beq.w	8003958 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800382c:	8a3a      	ldrh	r2, [r7, #16]
 800382e:	429a      	cmp	r2, r3
 8003830:	f080 8092 	bcs.w	8003958 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8a3a      	ldrh	r2, [r7, #16]
 8003838:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b20      	cmp	r3, #32
 8003842:	d02b      	beq.n	800389c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003852:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003872:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0210 	bic.w	r2, r2, #16
 8003890:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd ffcf 	bl	800183a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f86d 	bl	800398c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038b2:	e051      	b.n	8003958 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038bc:	b29b      	uxth	r3, r3
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d047      	beq.n	800395c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80038cc:	8a7b      	ldrh	r3, [r7, #18]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d044      	beq.n	800395c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038e0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0210 	bic.w	r2, r2, #16
 800390e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003910:	8a7b      	ldrh	r3, [r7, #18]
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f839 	bl	800398c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800391a:	e01f      	b.n	800395c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_UART_IRQHandler+0x324>
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8f9 	bl	8003b28 <UART_Transmit_IT>
    return;
 8003936:	e012      	b.n	800395e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <HAL_UART_IRQHandler+0x34a>
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f93a 	bl	8003bc6 <UART_EndTransmit_IT>
    return;
 8003952:	e004      	b.n	800395e <HAL_UART_IRQHandler+0x34a>
    return;
 8003954:	bf00      	nop
 8003956:	e002      	b.n	800395e <HAL_UART_IRQHandler+0x34a>
      return;
 8003958:	bf00      	nop
 800395a:	e000      	b.n	800395e <HAL_UART_IRQHandler+0x34a>
      return;
 800395c:	bf00      	nop
  }
}
 800395e:	3728      	adds	r7, #40	; 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	08003b01 	.word	0x08003b01

08003968 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr

080039a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b2:	e02c      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ba:	d028      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c2:	f7fd fe23 	bl	800160c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d21d      	bcs.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e00f      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d0c3      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	88fa      	ldrh	r2, [r7, #6]
 8003a4e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2222      	movs	r2, #34	; 0x22
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0220 	orr.w	r2, r2, #32
 8003a9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003abe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d107      	bne.n	8003ae8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0210 	bic.w	r2, r2, #16
 8003ae6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff ff2d 	bl	800397a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b21      	cmp	r3, #33	; 0x21
 8003b3a:	d13e      	bne.n	8003bba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b44:	d114      	bne.n	8003b70 <UART_Transmit_IT+0x48>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d110      	bne.n	8003b70 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	1c9a      	adds	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]
 8003b6e:	e008      	b.n	8003b82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	1c59      	adds	r1, r3, #1
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6211      	str	r1, [r2, #32]
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
  }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff febe 	bl	8003968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b22      	cmp	r3, #34	; 0x22
 8003c08:	f040 8099 	bne.w	8003d3e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d117      	bne.n	8003c46 <UART_Receive_IT+0x50>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d113      	bne.n	8003c46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	1c9a      	adds	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
 8003c44:	e026      	b.n	8003c94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	d007      	beq.n	8003c6a <UART_Receive_IT+0x74>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <UART_Receive_IT+0x82>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e008      	b.n	8003c8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d148      	bne.n	8003d3a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0220 	bic.w	r2, r2, #32
 8003cb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d123      	bne.n	8003d30 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0210 	bic.w	r2, r2, #16
 8003cfc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d10a      	bne.n	8003d22 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff fe2f 	bl	800398c <HAL_UARTEx_RxEventCallback>
 8003d2e:	e002      	b.n	8003d36 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fc ff8f 	bl	8000c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e002      	b.n	8003d40 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d82:	f023 030c 	bic.w	r3, r3, #12
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2c      	ldr	r2, [pc, #176]	; (8003e5c <UART_SetConfig+0x114>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d103      	bne.n	8003db8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7fe fb90 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	e002      	b.n	8003dbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003db8:	f7fe fb78 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8003dbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009a      	lsls	r2, r3, #2
 8003dc8:	441a      	add	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <UART_SetConfig+0x118>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	0119      	lsls	r1, r3, #4
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	009a      	lsls	r2, r3, #2
 8003de8:	441a      	add	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <UART_SetConfig+0x118>)
 8003df6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2064      	movs	r0, #100	; 0x64
 8003dfe:	fb00 f303 	mul.w	r3, r0, r3
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	3332      	adds	r3, #50	; 0x32
 8003e08:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <UART_SetConfig+0x118>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e14:	4419      	add	r1, r3
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009a      	lsls	r2, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <UART_SetConfig+0x118>)
 8003e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2064      	movs	r0, #100	; 0x64
 8003e36:	fb00 f303 	mul.w	r3, r0, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	3332      	adds	r3, #50	; 0x32
 8003e40:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <UART_SetConfig+0x118>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	f003 020f 	and.w	r2, r3, #15
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	440a      	add	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40013800 	.word	0x40013800
 8003e60:	51eb851f 	.word	0x51eb851f

08003e64 <__libc_init_array>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	2600      	movs	r6, #0
 8003e68:	4d0c      	ldr	r5, [pc, #48]	; (8003e9c <__libc_init_array+0x38>)
 8003e6a:	4c0d      	ldr	r4, [pc, #52]	; (8003ea0 <__libc_init_array+0x3c>)
 8003e6c:	1b64      	subs	r4, r4, r5
 8003e6e:	10a4      	asrs	r4, r4, #2
 8003e70:	42a6      	cmp	r6, r4
 8003e72:	d109      	bne.n	8003e88 <__libc_init_array+0x24>
 8003e74:	f000 f822 	bl	8003ebc <_init>
 8003e78:	2600      	movs	r6, #0
 8003e7a:	4d0a      	ldr	r5, [pc, #40]	; (8003ea4 <__libc_init_array+0x40>)
 8003e7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ea8 <__libc_init_array+0x44>)
 8003e7e:	1b64      	subs	r4, r4, r5
 8003e80:	10a4      	asrs	r4, r4, #2
 8003e82:	42a6      	cmp	r6, r4
 8003e84:	d105      	bne.n	8003e92 <__libc_init_array+0x2e>
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
 8003e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8c:	4798      	blx	r3
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7ee      	b.n	8003e70 <__libc_init_array+0xc>
 8003e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e96:	4798      	blx	r3
 8003e98:	3601      	adds	r6, #1
 8003e9a:	e7f2      	b.n	8003e82 <__libc_init_array+0x1e>
 8003e9c:	08003efc 	.word	0x08003efc
 8003ea0:	08003efc 	.word	0x08003efc
 8003ea4:	08003efc 	.word	0x08003efc
 8003ea8:	08003f00 	.word	0x08003f00

08003eac <memset>:
 8003eac:	4603      	mov	r3, r0
 8003eae:	4402      	add	r2, r0
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d100      	bne.n	8003eb6 <memset+0xa>
 8003eb4:	4770      	bx	lr
 8003eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eba:	e7f9      	b.n	8003eb0 <memset+0x4>

08003ebc <_init>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr

08003ec8 <_fini>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr
