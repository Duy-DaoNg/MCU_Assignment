
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c88  08004c88  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08004c88  08004c88  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c88  08004c88  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200000a0  08004d30  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004d30  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bfd  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe5  00000000  00000000  00037cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0003acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  0003ba50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a73e  00000000  00000000  0003c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001203f  00000000  00000000  00056dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3a7  00000000  00000000  00068e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f41d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a10  00000000  00000000  000f4228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bfc 	.word	0x08004bfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08004bfc 	.word	0x08004bfc

0800014c <button_reading>:
static GPIO_PinState Reg1[NO_OF_BUTTONS];
static GPIO_PinState Reg2[NO_OF_BUTTONS];
/* Set time out */
int TimerForKeyPress = 300;
/* Read input then set button flag */
void button_reading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0a6      	b.n	80002a6 <button_reading+0x15a>
		Reg2[i] = Reg1[i];
 8000158:	4a57      	ldr	r2, [pc, #348]	; (80002b8 <button_reading+0x16c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a56      	ldr	r2, [pc, #344]	; (80002bc <button_reading+0x170>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		Reg1[i] = Reg0[i];
 800016a:	4a55      	ldr	r2, [pc, #340]	; (80002c0 <button_reading+0x174>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a51      	ldr	r2, [pc, #324]	; (80002b8 <button_reading+0x16c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 800017c:	4a51      	ldr	r2, [pc, #324]	; (80002c4 <button_reading+0x178>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000184:	4619      	mov	r1, r3
 8000186:	4850      	ldr	r0, [pc, #320]	; (80002c8 <button_reading+0x17c>)
 8000188:	f002 f84c 	bl	8002224 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	4619      	mov	r1, r3
 8000190:	4a4b      	ldr	r2, [pc, #300]	; (80002c0 <button_reading+0x174>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	460a      	mov	r2, r1
 8000198:	701a      	strb	r2, [r3, #0]
		if(i <= 1){
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	dc0f      	bgt.n	80001c0 <button_reading+0x74>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001a0:	4a48      	ldr	r2, [pc, #288]	; (80002c4 <button_reading+0x178>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001a8:	4619      	mov	r1, r3
 80001aa:	4847      	ldr	r0, [pc, #284]	; (80002c8 <button_reading+0x17c>)
 80001ac:	f002 f83a 	bl	8002224 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a42      	ldr	r2, [pc, #264]	; (80002c0 <button_reading+0x174>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4413      	add	r3, r2
 80001ba:	460a      	mov	r2, r1
 80001bc:	701a      	strb	r2, [r3, #0]
 80001be:	e021      	b.n	8000204 <button_reading+0xb8>
		}
		else if(i == 2){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d10f      	bne.n	80001e6 <button_reading+0x9a>
			Reg0[i] = HAL_GPIO_ReadPin(GPIOB, INPUT_BUTTON[i]);
 80001c6:	4a3f      	ldr	r2, [pc, #252]	; (80002c4 <button_reading+0x178>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ce:	4619      	mov	r1, r3
 80001d0:	483e      	ldr	r0, [pc, #248]	; (80002cc <button_reading+0x180>)
 80001d2:	f002 f827 	bl	8002224 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a39      	ldr	r2, [pc, #228]	; (80002c0 <button_reading+0x174>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	460a      	mov	r2, r1
 80001e2:	701a      	strb	r2, [r3, #0]
 80001e4:	e00e      	b.n	8000204 <button_reading+0xb8>
		}
		else{
			Reg0[i] = HAL_GPIO_ReadPin(GPIOA, INPUT_BUTTON[i]);
 80001e6:	4a37      	ldr	r2, [pc, #220]	; (80002c4 <button_reading+0x178>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ee:	4619      	mov	r1, r3
 80001f0:	4835      	ldr	r0, [pc, #212]	; (80002c8 <button_reading+0x17c>)
 80001f2:	f002 f817 	bl	8002224 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a31      	ldr	r2, [pc, #196]	; (80002c0 <button_reading+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	460a      	mov	r2, r1
 8000202:	701a      	strb	r2, [r3, #0]
		}
		/* Check stable state */
		if((Reg0[i] == Reg1[i]) && (Reg1[i] == Reg2[i])){
 8000204:	4a2e      	ldr	r2, [pc, #184]	; (80002c0 <button_reading+0x174>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	781a      	ldrb	r2, [r3, #0]
 800020c:	492a      	ldr	r1, [pc, #168]	; (80002b8 <button_reading+0x16c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	440b      	add	r3, r1
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d143      	bne.n	80002a0 <button_reading+0x154>
 8000218:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <button_reading+0x16c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	781a      	ldrb	r2, [r3, #0]
 8000220:	4926      	ldr	r1, [pc, #152]	; (80002bc <button_reading+0x170>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	440b      	add	r3, r1
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	429a      	cmp	r2, r3
 800022a:	d139      	bne.n	80002a0 <button_reading+0x154>
			if(Reg3[i] != Reg2[i]){
 800022c:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <button_reading+0x184>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4413      	add	r3, r2
 8000232:	781a      	ldrb	r2, [r3, #0]
 8000234:	4921      	ldr	r1, [pc, #132]	; (80002bc <button_reading+0x170>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	440b      	add	r3, r1
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d018      	beq.n	8000272 <button_reading+0x126>
				Reg3[i] = Reg2[i];
 8000240:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <button_reading+0x170>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4413      	add	r3, r2
 8000246:	7819      	ldrb	r1, [r3, #0]
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <button_reading+0x184>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4413      	add	r3, r2
 800024e:	460a      	mov	r2, r1
 8000250:	701a      	strb	r2, [r3, #0]
				if(Reg2[i] == PRESSED){
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <button_reading+0x170>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d120      	bne.n	80002a0 <button_reading+0x154>
					/* Button is pressed set flag */
					buttonPressed_flag[i] = 1;
 800025e:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <button_reading+0x188>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
					TimerForKeyPress = 300;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <button_reading+0x18c>)
 800026a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	e016      	b.n	80002a0 <button_reading+0x154>
				}
			}
			else{
				/* Long-press handle*/
				if(Reg2[i] == PRESSED){
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <button_reading+0x170>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d110      	bne.n	80002a0 <button_reading+0x154>
					TimerForKeyPress--;
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <button_reading+0x18c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3b01      	subs	r3, #1
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <button_reading+0x18c>)
 8000286:	6013      	str	r3, [r2, #0]
					if(TimerForKeyPress == 0){
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <button_reading+0x18c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d107      	bne.n	80002a0 <button_reading+0x154>
						buttonPressed_flag[i] = 1;
 8000290:	4a10      	ldr	r2, [pc, #64]	; (80002d4 <button_reading+0x188>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4413      	add	r3, r2
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
						TimerForKeyPress = 100;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <button_reading+0x18c>)
 800029c:	2264      	movs	r2, #100	; 0x64
 800029e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	f77f af55 	ble.w	8000158 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200000c4 	.word	0x200000c4
 80002bc:	200000c8 	.word	0x200000c8
 80002c0:	200000c0 	.word	0x200000c0
 80002c4:	20000004 	.word	0x20000004
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	200000bc 	.word	0x200000bc
 80002d4:	200000d0 	.word	0x200000d0
 80002d8:	20000000 	.word	0x20000000

080002dc <FSM_Buzzer>:
 *      Author: Minh Duc Quach
 */

#include "buzzer.h"

void FSM_Buzzer(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	/* If Pedestrian button is pressed and the pedestrian is allowed to cross the road */
	if(FSM_Pedestrian_State == WORK && FSM_Traffic_Light_State_Row == AUTO_RED){
 80002e0:	4b3f      	ldr	r3, [pc, #252]	; (80003e0 <FSM_Buzzer+0x104>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d158      	bne.n	800039a <FSM_Buzzer+0xbe>
 80002e8:	4b3e      	ldr	r3, [pc, #248]	; (80003e4 <FSM_Buzzer+0x108>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d154      	bne.n	800039a <FSM_Buzzer+0xbe>
		switch (FSM_Buzzer_State){
 80002f0:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <FSM_Buzzer+0x10c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d020      	beq.n	800033a <FSM_Buzzer+0x5e>
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d148      	bne.n	800038e <FSM_Buzzer+0xb2>
		case ON:
			/* Turn on Buzzer */
			if(timer4Flag == 1){
 80002fc:	4b3b      	ldr	r3, [pc, #236]	; (80003ec <FSM_Buzzer+0x110>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d146      	bne.n	8000392 <FSM_Buzzer+0xb6>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Increase_Duty_Cycle);		// set buzzer volume
 8000304:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <FSM_Buzzer+0x114>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b3a      	ldr	r3, [pc, #232]	; (80003f4 <FSM_Buzzer+0x118>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	635a      	str	r2, [r3, #52]	; 0x34
				Increase_Duty_Cycle += 50;
 800030e:	4b38      	ldr	r3, [pc, #224]	; (80003f0 <FSM_Buzzer+0x114>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3332      	adds	r3, #50	; 0x32
 8000314:	4a36      	ldr	r2, [pc, #216]	; (80003f0 <FSM_Buzzer+0x114>)
 8000316:	6013      	str	r3, [r2, #0]
				if(Increase_Duty_Cycle >= 999){											// 999 is the maximum period
 8000318:	4b35      	ldr	r3, [pc, #212]	; (80003f0 <FSM_Buzzer+0x114>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000320:	4293      	cmp	r3, r2
 8000322:	dd03      	ble.n	800032c <FSM_Buzzer+0x50>
					Increase_Duty_Cycle = 989;
 8000324:	4b32      	ldr	r3, [pc, #200]	; (80003f0 <FSM_Buzzer+0x114>)
 8000326:	f240 32dd 	movw	r2, #989	; 0x3dd
 800032a:	601a      	str	r2, [r3, #0]
				}
				FSM_Buzzer_State = OFF;
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <FSM_Buzzer+0x10c>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
				/* The buzzer is ON for DURATION_ON_TIME * TICK ms */
				setTimer4(DURATION_ON_TIME * TICK);
 8000332:	200a      	movs	r0, #10
 8000334:	f001 fadc 	bl	80018f0 <setTimer4>
			}
			break;
 8000338:	e02b      	b.n	8000392 <FSM_Buzzer+0xb6>
		case OFF:
			if(timer4Flag == 1){
 800033a:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <FSM_Buzzer+0x110>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d129      	bne.n	8000396 <FSM_Buzzer+0xba>
				FSM_Buzzer_State = ON;
 8000342:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <FSM_Buzzer+0x10c>)
 8000344:	2201      	movs	r2, #1
 8000346:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);						// turn off buzzer
 8000348:	4b2a      	ldr	r3, [pc, #168]	; (80003f4 <FSM_Buzzer+0x118>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
				/* If the OFF duration is small enough, stop decreasing OFF duration and keep it at TICK ms */
				if(red_time*TICK*100 <= Increase_Speed){
 8000350:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <FSM_Buzzer+0x11c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2264      	movs	r2, #100	; 0x64
 8000356:	fb02 f203 	mul.w	r2, r2, r3
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <FSM_Buzzer+0x120>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	dc03      	bgt.n	800036a <FSM_Buzzer+0x8e>
					setTimer4(1*TICK);
 8000362:	2001      	movs	r0, #1
 8000364:	f001 fac4 	bl	80018f0 <setTimer4>
					break;
 8000368:	e016      	b.n	8000398 <FSM_Buzzer+0xbc>
				}
				Increase_Speed += 4;
 800036a:	4b24      	ldr	r3, [pc, #144]	; (80003fc <FSM_Buzzer+0x120>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3304      	adds	r3, #4
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <FSM_Buzzer+0x120>)
 8000372:	6013      	str	r3, [r2, #0]
				/* Increase the beeping frequency by decreasing buzzer's OFF duration */
				setTimer4(red_time*TICK*100/Increase_Speed);
 8000374:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <FSM_Buzzer+0x11c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2264      	movs	r2, #100	; 0x64
 800037a:	fb02 f203 	mul.w	r2, r2, r3
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <FSM_Buzzer+0x120>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	fb92 f3f3 	sdiv	r3, r2, r3
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fab2 	bl	80018f0 <setTimer4>
			}
			break;
 800038c:	e003      	b.n	8000396 <FSM_Buzzer+0xba>
		default:
			break;
 800038e:	bf00      	nop
 8000390:	e023      	b.n	80003da <FSM_Buzzer+0xfe>
			break;
 8000392:	bf00      	nop
 8000394:	e021      	b.n	80003da <FSM_Buzzer+0xfe>
			break;
 8000396:	bf00      	nop
		switch (FSM_Buzzer_State){
 8000398:	e01f      	b.n	80003da <FSM_Buzzer+0xfe>
		}
	}
	/* If Pedestrian button is pressed and the pedestrian is not allowed to cross the road */
	else if(FSM_Pedestrian_State == WORK && FSM_Traffic_Light_State_Row != AUTO_RED){
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <FSM_Buzzer+0x104>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d10f      	bne.n	80003c2 <FSM_Buzzer+0xe6>
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <FSM_Buzzer+0x108>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d00b      	beq.n	80003c2 <FSM_Buzzer+0xe6>
		/* Reset all */
		Increase_Duty_Cycle = 99;		// initial volume
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <FSM_Buzzer+0x114>)
 80003ac:	2263      	movs	r2, #99	; 0x63
 80003ae:	601a      	str	r2, [r3, #0]
		Increase_Speed = red_time;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <FSM_Buzzer+0x11c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <FSM_Buzzer+0x120>)
 80003b6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <FSM_Buzzer+0x118>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2200      	movs	r2, #0
 80003be:	635a      	str	r2, [r3, #52]	; 0x34
 80003c0:	e00b      	b.n	80003da <FSM_Buzzer+0xfe>
	}
	/* Other cases */
	else{
		Increase_Duty_Cycle = 99;		// initial volume
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <FSM_Buzzer+0x114>)
 80003c4:	2263      	movs	r2, #99	; 0x63
 80003c6:	601a      	str	r2, [r3, #0]
		Increase_Speed = red_time;
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <FSM_Buzzer+0x11c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <FSM_Buzzer+0x120>)
 80003ce:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <FSM_Buzzer+0x118>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2200      	movs	r2, #0
 80003d6:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200000d8 	.word	0x200000d8
 80003e4:	200000d4 	.word	0x200000d4
 80003e8:	200000dc 	.word	0x200000dc
 80003ec:	200000fc 	.word	0x200000fc
 80003f0:	20000010 	.word	0x20000010
 80003f4:	20000118 	.word	0x20000118
 80003f8:	20000018 	.word	0x20000018
 80003fc:	20000014 	.word	0x20000014

08000400 <display_traffic_light>:
 *      Author: LENOVO
 */

#include "display_traffic_light.h"

void display_traffic_light(){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row){
 8000404:	4b84      	ldr	r3, [pc, #528]	; (8000618 <display_traffic_light+0x218>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b09      	cmp	r3, #9
 800040a:	f200 80a1 	bhi.w	8000550 <display_traffic_light+0x150>
 800040e:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <display_traffic_light+0x14>)
 8000410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000414:	0800043d 	.word	0x0800043d
 8000418:	08000499 	.word	0x08000499
 800041c:	080004f5 	.word	0x080004f5
 8000420:	08000455 	.word	0x08000455
 8000424:	080004b1 	.word	0x080004b1
 8000428:	0800050d 	.word	0x0800050d
 800042c:	08000551 	.word	0x08000551
 8000430:	0800046d 	.word	0x0800046d
 8000434:	080004c9 	.word	0x080004c9
 8000438:	08000525 	.word	0x08000525
	case AUTO_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000442:	4876      	ldr	r0, [pc, #472]	; (800061c <display_traffic_light+0x21c>)
 8000444:	f001 ff05 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2108      	movs	r1, #8
 800044c:	4874      	ldr	r0, [pc, #464]	; (8000620 <display_traffic_light+0x220>)
 800044e:	f001 ff00 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 8000452:	e088      	b.n	8000566 <display_traffic_light+0x166>
	case MANUAL_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045a:	4870      	ldr	r0, [pc, #448]	; (800061c <display_traffic_light+0x21c>)
 800045c:	f001 fef9 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2108      	movs	r1, #8
 8000464:	486e      	ldr	r0, [pc, #440]	; (8000620 <display_traffic_light+0x220>)
 8000466:	f001 fef4 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 800046a:	e07c      	b.n	8000566 <display_traffic_light+0x166>
	case SET_RED:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000472:	486a      	ldr	r0, [pc, #424]	; (800061c <display_traffic_light+0x21c>)
 8000474:	f001 feed 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2108      	movs	r1, #8
 800047c:	4868      	ldr	r0, [pc, #416]	; (8000620 <display_traffic_light+0x220>)
 800047e:	f001 fee8 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	2120      	movs	r1, #32
 8000486:	4866      	ldr	r0, [pc, #408]	; (8000620 <display_traffic_light+0x220>)
 8000488:	f001 fee3 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	4863      	ldr	r0, [pc, #396]	; (8000620 <display_traffic_light+0x220>)
 8000492:	f001 fede 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 8000496:	e066      	b.n	8000566 <display_traffic_light+0x166>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049e:	485f      	ldr	r0, [pc, #380]	; (800061c <display_traffic_light+0x21c>)
 80004a0:	f001 fed7 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2108      	movs	r1, #8
 80004a8:	485d      	ldr	r0, [pc, #372]	; (8000620 <display_traffic_light+0x220>)
 80004aa:	f001 fed2 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 80004ae:	e05a      	b.n	8000566 <display_traffic_light+0x166>
	case MANUAL_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b6:	4859      	ldr	r0, [pc, #356]	; (800061c <display_traffic_light+0x21c>)
 80004b8:	f001 fecb 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4857      	ldr	r0, [pc, #348]	; (8000620 <display_traffic_light+0x220>)
 80004c2:	f001 fec6 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 80004c6:	e04e      	b.n	8000566 <display_traffic_light+0x166>
	case SET_GREEN:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ce:	4853      	ldr	r0, [pc, #332]	; (800061c <display_traffic_light+0x21c>)
 80004d0:	f001 febf 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4851      	ldr	r0, [pc, #324]	; (8000620 <display_traffic_light+0x220>)
 80004da:	f001 feba 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	484f      	ldr	r0, [pc, #316]	; (8000620 <display_traffic_light+0x220>)
 80004e4:	f001 feb5 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2110      	movs	r1, #16
 80004ec:	484c      	ldr	r0, [pc, #304]	; (8000620 <display_traffic_light+0x220>)
 80004ee:	f001 feb0 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 80004f2:	e038      	b.n	8000566 <display_traffic_light+0x166>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	4848      	ldr	r0, [pc, #288]	; (800061c <display_traffic_light+0x21c>)
 80004fc:	f001 fea9 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2108      	movs	r1, #8
 8000504:	4846      	ldr	r0, [pc, #280]	; (8000620 <display_traffic_light+0x220>)
 8000506:	f001 fea4 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 800050a:	e02c      	b.n	8000566 <display_traffic_light+0x166>
	case MANUAL_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000512:	4842      	ldr	r0, [pc, #264]	; (800061c <display_traffic_light+0x21c>)
 8000514:	f001 fe9d 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2108      	movs	r1, #8
 800051c:	4840      	ldr	r0, [pc, #256]	; (8000620 <display_traffic_light+0x220>)
 800051e:	f001 fe98 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 8000522:	e020      	b.n	8000566 <display_traffic_light+0x166>
	case SET_YEL:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052a:	483c      	ldr	r0, [pc, #240]	; (800061c <display_traffic_light+0x21c>)
 800052c:	f001 fe91 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2108      	movs	r1, #8
 8000534:	483a      	ldr	r0, [pc, #232]	; (8000620 <display_traffic_light+0x220>)
 8000536:	f001 fe8c 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2120      	movs	r1, #32
 800053e:	4838      	ldr	r0, [pc, #224]	; (8000620 <display_traffic_light+0x220>)
 8000540:	f001 fe87 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4835      	ldr	r0, [pc, #212]	; (8000620 <display_traffic_light+0x220>)
 800054a:	f001 fe82 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 800054e:	e00a      	b.n	8000566 <display_traffic_light+0x166>
	default:
		HAL_GPIO_WritePin(TL1_SIGNAL1_GPIO_Port, TL1_SIGNAL1_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000556:	4831      	ldr	r0, [pc, #196]	; (800061c <display_traffic_light+0x21c>)
 8000558:	f001 fe7b 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL1_SIGNAL2_GPIO_Port, TL1_SIGNAL2_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	482f      	ldr	r0, [pc, #188]	; (8000620 <display_traffic_light+0x220>)
 8000562:	f001 fe76 	bl	8002252 <HAL_GPIO_WritePin>
	}
	switch (FSM_Traffic_Light_State_Col){
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <display_traffic_light+0x224>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b05      	cmp	r3, #5
 800056c:	d850      	bhi.n	8000610 <display_traffic_light+0x210>
 800056e:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <display_traffic_light+0x174>)
 8000570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000574:	0800058d 	.word	0x0800058d
 8000578:	080005b9 	.word	0x080005b9
 800057c:	080005e5 	.word	0x080005e5
 8000580:	080005a3 	.word	0x080005a3
 8000584:	080005cf 	.word	0x080005cf
 8000588:	080005fb 	.word	0x080005fb
	case AUTO_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2120      	movs	r1, #32
 8000590:	4823      	ldr	r0, [pc, #140]	; (8000620 <display_traffic_light+0x220>)
 8000592:	f001 fe5e 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4821      	ldr	r0, [pc, #132]	; (8000620 <display_traffic_light+0x220>)
 800059c:	f001 fe59 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 80005a0:	e037      	b.n	8000612 <display_traffic_light+0x212>
	case MANUAL_RED:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <display_traffic_light+0x220>)
 80005a8:	f001 fe53 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2110      	movs	r1, #16
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <display_traffic_light+0x220>)
 80005b2:	f001 fe4e 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 80005b6:	e02c      	b.n	8000612 <display_traffic_light+0x212>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2120      	movs	r1, #32
 80005bc:	4818      	ldr	r0, [pc, #96]	; (8000620 <display_traffic_light+0x220>)
 80005be:	f001 fe48 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2110      	movs	r1, #16
 80005c6:	4816      	ldr	r0, [pc, #88]	; (8000620 <display_traffic_light+0x220>)
 80005c8:	f001 fe43 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 80005cc:	e021      	b.n	8000612 <display_traffic_light+0x212>
	case MANUAL_GREEN:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	4813      	ldr	r0, [pc, #76]	; (8000620 <display_traffic_light+0x220>)
 80005d4:	f001 fe3d 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2110      	movs	r1, #16
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <display_traffic_light+0x220>)
 80005de:	f001 fe38 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 80005e2:	e016      	b.n	8000612 <display_traffic_light+0x212>
	case AUTO_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <display_traffic_light+0x220>)
 80005ea:	f001 fe32 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <display_traffic_light+0x220>)
 80005f4:	f001 fe2d 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 80005f8:	e00b      	b.n	8000612 <display_traffic_light+0x212>
	case MANUAL_YEL:
		HAL_GPIO_WritePin(TL2_SIGNAL1_GPIO_Port, TL2_SIGNAL1_Pin, SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2120      	movs	r1, #32
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <display_traffic_light+0x220>)
 8000600:	f001 fe27 	bl	8002252 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL2_SIGNAL2_GPIO_Port, TL2_SIGNAL2_Pin, SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <display_traffic_light+0x220>)
 800060a:	f001 fe22 	bl	8002252 <HAL_GPIO_WritePin>
		break;
 800060e:	e000      	b.n	8000612 <display_traffic_light+0x212>
	default:
		break;
 8000610:	bf00      	nop
	}
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000d4 	.word	0x200000d4
 800061c:	40010800 	.word	0x40010800
 8000620:	40010c00 	.word	0x40010c00
 8000624:	2000000c 	.word	0x2000000c

08000628 <FSM_Pedestrian>:
 *      Author: duchu
 */

#include "fsm_pedestrian.h"

void FSM_Pedestrian(){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    switch(FSM_Pedestrian_State){
 800062c:	4b45      	ldr	r3, [pc, #276]	; (8000744 <FSM_Pedestrian+0x11c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <FSM_Pedestrian+0x12>
 8000634:	2b01      	cmp	r3, #1
 8000636:	d023      	beq.n	8000680 <FSM_Pedestrian+0x58>
        default:
            break;
        }
        break;
    default:
        break;
 8000638:	e081      	b.n	800073e <FSM_Pedestrian+0x116>
        HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000640:	4841      	ldr	r0, [pc, #260]	; (8000748 <FSM_Pedestrian+0x120>)
 8000642:	f001 fe06 	bl	8002252 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	483f      	ldr	r0, [pc, #252]	; (800074c <FSM_Pedestrian+0x124>)
 800064e:	f001 fe00 	bl	8002252 <HAL_GPIO_WritePin>
        if(buttonPressed_flag[3]){
 8000652:	4b3f      	ldr	r3, [pc, #252]	; (8000750 <FSM_Pedestrian+0x128>)
 8000654:	78db      	ldrb	r3, [r3, #3]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d070      	beq.n	800073c <FSM_Pedestrian+0x114>
            buttonPressed_flag[3] = 0;
 800065a:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <FSM_Pedestrian+0x128>)
 800065c:	2200      	movs	r2, #0
 800065e:	70da      	strb	r2, [r3, #3]
            FSM_Pedestrian_State = WORK;
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <FSM_Pedestrian+0x11c>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
            FSM_Buzzer_State = ON;
 8000666:	4b3b      	ldr	r3, [pc, #236]	; (8000754 <FSM_Pedestrian+0x12c>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
            setTimer4(1*TICK);									// buzzer timer
 800066c:	2001      	movs	r0, #1
 800066e:	f001 f93f 	bl	80018f0 <setTimer4>
            setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);		// pedestrian mode timer, set to 2 cycles of RED + YELLOW + GREEN
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <FSM_Pedestrian+0x130>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f925 	bl	80018c8 <setTimer3>
        break;
 800067e:	e05d      	b.n	800073c <FSM_Pedestrian+0x114>
        if(timer3Flag == 1 || FSM_Traffic_Light_State_Row == SET_GREEN
 8000680:	4b36      	ldr	r3, [pc, #216]	; (800075c <FSM_Pedestrian+0x134>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d017      	beq.n	80006b8 <FSM_Pedestrian+0x90>
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <FSM_Pedestrian+0x138>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b08      	cmp	r3, #8
 800068e:	d013      	beq.n	80006b8 <FSM_Pedestrian+0x90>
        	|| FSM_Traffic_Light_State_Row == SET_RED || FSM_Traffic_Light_State_Row == SET_YEL
 8000690:	4b33      	ldr	r3, [pc, #204]	; (8000760 <FSM_Pedestrian+0x138>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b07      	cmp	r3, #7
 8000696:	d00f      	beq.n	80006b8 <FSM_Pedestrian+0x90>
 8000698:	4b31      	ldr	r3, [pc, #196]	; (8000760 <FSM_Pedestrian+0x138>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b09      	cmp	r3, #9
 800069e:	d00b      	beq.n	80006b8 <FSM_Pedestrian+0x90>
			|| FSM_Traffic_Light_State_Row == MANUAL_RED || FSM_Traffic_Light_State_Row == MANUAL_YEL
 80006a0:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <FSM_Pedestrian+0x138>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d007      	beq.n	80006b8 <FSM_Pedestrian+0x90>
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <FSM_Pedestrian+0x138>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b05      	cmp	r3, #5
 80006ae:	d003      	beq.n	80006b8 <FSM_Pedestrian+0x90>
			|| FSM_Traffic_Light_State_Row == MANUAL_GREEN){	// 2 cycles passed without pressing the button or MODE changed to SET or MANUAL
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <FSM_Pedestrian+0x138>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d103      	bne.n	80006c0 <FSM_Pedestrian+0x98>
            FSM_Pedestrian_State = IDLE;
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <FSM_Pedestrian+0x11c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
            break;
 80006be:	e03e      	b.n	800073e <FSM_Pedestrian+0x116>
        if(buttonPressed_flag[3]){	// the button is pressed before timeout
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <FSM_Pedestrian+0x128>)
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d005      	beq.n	80006d4 <FSM_Pedestrian+0xac>
            setTimer3(2 * TIMER3_PEDESTRIAN_CYCLE * TICK);
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <FSM_Pedestrian+0x130>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f8fa 	bl	80018c8 <setTimer3>
        switch (FSM_Traffic_Light_State_Col){
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <FSM_Pedestrian+0x13c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d020      	beq.n	800071e <FSM_Pedestrian+0xf6>
 80006dc:	2b02      	cmp	r3, #2
 80006de:	dc2b      	bgt.n	8000738 <FSM_Pedestrian+0x110>
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <FSM_Pedestrian+0xc2>
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d00d      	beq.n	8000704 <FSM_Pedestrian+0xdc>
            break;
 80006e8:	e026      	b.n	8000738 <FSM_Pedestrian+0x110>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f0:	4815      	ldr	r0, [pc, #84]	; (8000748 <FSM_Pedestrian+0x120>)
 80006f2:	f001 fdae 	bl	8002252 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <FSM_Pedestrian+0x124>)
 80006fe:	f001 fda8 	bl	8002252 <HAL_GPIO_WritePin>
            break;
 8000702:	e01a      	b.n	800073a <FSM_Pedestrian+0x112>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070a:	480f      	ldr	r0, [pc, #60]	; (8000748 <FSM_Pedestrian+0x120>)
 800070c:	f001 fda1 	bl	8002252 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <FSM_Pedestrian+0x124>)
 8000718:	f001 fd9b 	bl	8002252 <HAL_GPIO_WritePin>
            break;
 800071c:	e00d      	b.n	800073a <FSM_Pedestrian+0x112>
            HAL_GPIO_WritePin(PEDE_SIGNAL1_GPIO_Port, PEDE_SIGNAL1_Pin, SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <FSM_Pedestrian+0x120>)
 8000726:	f001 fd94 	bl	8002252 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PEDE_SIGNAL2_GPIO_Port, PEDE_SIGNAL2_Pin, SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <FSM_Pedestrian+0x124>)
 8000732:	f001 fd8e 	bl	8002252 <HAL_GPIO_WritePin>
            break;
 8000736:	e000      	b.n	800073a <FSM_Pedestrian+0x112>
            break;
 8000738:	bf00      	nop
        break;
 800073a:	e000      	b.n	800073e <FSM_Pedestrian+0x116>
        break;
 800073c:	bf00      	nop
    }
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000d8 	.word	0x200000d8
 8000748:	40010c00 	.word	0x40010c00
 800074c:	40010800 	.word	0x40010800
 8000750:	200000d0 	.word	0x200000d0
 8000754:	200000dc 	.word	0x200000dc
 8000758:	2000002c 	.word	0x2000002c
 800075c:	200000f4 	.word	0x200000f4
 8000760:	200000d4 	.word	0x200000d4
 8000764:	2000000c 	.word	0x2000000c

08000768 <resetAllButtonState>:

#include "fsm_traffic_light.h"

int To_Default_State = 0;		// used to set COL traffic state

void resetAllButtonState(){		// reset buttons
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	e007      	b.n	8000784 <resetAllButtonState+0x1c>
		buttonPressed_flag[i] = 0;
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <resetAllButtonState+0x30>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3301      	adds	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b03      	cmp	r3, #3
 8000788:	ddf4      	ble.n	8000774 <resetAllButtonState+0xc>
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200000d0 	.word	0x200000d0

0800079c <changeTime>:

void changeTime(){				// change traffic time
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	Set_TL_Time++;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <changeTime+0x24>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <changeTime+0x24>)
 80007a8:	6013      	str	r3, [r2, #0]
	if(Set_TL_Time >= 100){		// 1 <= time <= 99
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <changeTime+0x24>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b63      	cmp	r3, #99	; 0x63
 80007b0:	dd02      	ble.n	80007b8 <changeTime+0x1c>
		Set_TL_Time = 1;
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <changeTime+0x24>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	601a      	str	r2, [r3, #0]
	}
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000100 	.word	0x20000100

080007c4 <FSM_Traffic_Light_Row>:

void FSM_Traffic_Light_Row(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Row) {
 80007c8:	4ba6      	ldr	r3, [pc, #664]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b09      	cmp	r3, #9
 80007ce:	f200 8289 	bhi.w	8000ce4 <FSM_Traffic_Light_Row+0x520>
 80007d2:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <FSM_Traffic_Light_Row+0x14>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	08000801 	.word	0x08000801
 80007dc:	08000887 	.word	0x08000887
 80007e0:	0800090d 	.word	0x0800090d
 80007e4:	08000bc9 	.word	0x08000bc9
 80007e8:	08000c29 	.word	0x08000c29
 80007ec:	08000c87 	.word	0x08000c87
 80007f0:	08000ce5 	.word	0x08000ce5
 80007f4:	08000993 	.word	0x08000993
 80007f8:	08000a3d 	.word	0x08000a3d
 80007fc:	08000b13 	.word	0x08000b13
	/* AUTO MODE */
	case AUTO_RED:
		if(timer1Flag == 1){
 8000800:	4b99      	ldr	r3, [pc, #612]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d114      	bne.n	8000832 <FSM_Traffic_Light_Row+0x6e>
			/* Count down time */
			traffic_light_remain_time_row--;
 8000808:	4b98      	ldr	r3, [pc, #608]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3b01      	subs	r3, #1
 800080e:	4a97      	ldr	r2, [pc, #604]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000810:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 8000812:	4b96      	ldr	r3, [pc, #600]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d106      	bne.n	8000828 <FSM_Traffic_Light_Row+0x64>
				/* Move to next state */
				FSM_Traffic_Light_State_Row = AUTO_GREEN;
 800081a:	4b92      	ldr	r3, [pc, #584]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = green_time;
 8000820:	4b93      	ldr	r3, [pc, #588]	; (8000a70 <FSM_Traffic_Light_Row+0x2ac>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a91      	ldr	r2, [pc, #580]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000826:	6013      	str	r3, [r2, #0]
			}

			uart_transmit();
 8000828:	f001 f8cc 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 800082c:	2064      	movs	r0, #100	; 0x64
 800082e:	f001 f823 	bl	8001878 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 8000832:	4b90      	ldr	r3, [pc, #576]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d014      	beq.n	8000864 <FSM_Traffic_Light_Row+0xa0>
			buttonPressed_flag[0] = 0;
 800083a:	4b8e      	ldr	r3, [pc, #568]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000840:	4b8d      	ldr	r3, [pc, #564]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a8d      	ldr	r2, [pc, #564]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 8000846:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 8000848:	4b86      	ldr	r3, [pc, #536]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 800084a:	2207      	movs	r2, #7
 800084c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 800084e:	4b8c      	ldr	r3, [pc, #560]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 8000850:	2206      	movs	r2, #6
 8000852:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000854:	f001 f8b6 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085c:	f001 f80c 	bl	8001878 <setTimer1>
			resetAllButtonState();
 8000860:	f7ff ff82 	bl	8000768 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 8000864:	4b83      	ldr	r3, [pc, #524]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000866:	785b      	ldrb	r3, [r3, #1]
 8000868:	2b00      	cmp	r3, #0
 800086a:	f000 823d 	beq.w	8000ce8 <FSM_Traffic_Light_Row+0x524>
			buttonPressed_flag[1] = 0;
 800086e:	4b81      	ldr	r3, [pc, #516]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000870:	2200      	movs	r2, #0
 8000872:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 8000874:	4b7b      	ldr	r3, [pc, #492]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000876:	2203      	movs	r2, #3
 8000878:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 800087a:	4b81      	ldr	r3, [pc, #516]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 800087c:	2204      	movs	r2, #4
 800087e:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000880:	f7ff ff72 	bl	8000768 <resetAllButtonState>
		}
		break;
 8000884:	e230      	b.n	8000ce8 <FSM_Traffic_Light_Row+0x524>
	case AUTO_GREEN:
		if(timer1Flag == 1){
 8000886:	4b78      	ldr	r3, [pc, #480]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d114      	bne.n	80008b8 <FSM_Traffic_Light_Row+0xf4>
			/* Count down time */
			traffic_light_remain_time_row--;
 800088e:	4b77      	ldr	r3, [pc, #476]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a75      	ldr	r2, [pc, #468]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000896:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 8000898:	4b74      	ldr	r3, [pc, #464]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d106      	bne.n	80008ae <FSM_Traffic_Light_Row+0xea>
				/* Move to next state */
				FSM_Traffic_Light_State_Row = AUTO_YEL;
 80008a0:	4b70      	ldr	r3, [pc, #448]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = yellow_time;
 80008a6:	4b77      	ldr	r3, [pc, #476]	; (8000a84 <FSM_Traffic_Light_Row+0x2c0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a70      	ldr	r2, [pc, #448]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 80008ac:	6013      	str	r3, [r2, #0]
			}
			uart_transmit();
 80008ae:	f001 f889 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80008b2:	2064      	movs	r0, #100	; 0x64
 80008b4:	f000 ffe0 	bl	8001878 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 80008b8:	4b6e      	ldr	r3, [pc, #440]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d014      	beq.n	80008ea <FSM_Traffic_Light_Row+0x126>
			buttonPressed_flag[0] = 0;
 80008c0:	4b6c      	ldr	r3, [pc, #432]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 80008c6:	4b6c      	ldr	r3, [pc, #432]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a6c      	ldr	r2, [pc, #432]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 80008cc:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 80008ce:	4b65      	ldr	r3, [pc, #404]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 80008d4:	4b6a      	ldr	r3, [pc, #424]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 80008d6:	2206      	movs	r2, #6
 80008d8:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80008da:	f001 f873 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80008de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e2:	f000 ffc9 	bl	8001878 <setTimer1>
			resetAllButtonState();
 80008e6:	f7ff ff3f 	bl	8000768 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 80008ea:	4b62      	ldr	r3, [pc, #392]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 81fc 	beq.w	8000cec <FSM_Traffic_Light_Row+0x528>
			buttonPressed_flag[1] = 0;
 80008f4:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 80008fa:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80008fc:	2203      	movs	r2, #3
 80008fe:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000900:	4b5f      	ldr	r3, [pc, #380]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 8000902:	2204      	movs	r2, #4
 8000904:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000906:	f7ff ff2f 	bl	8000768 <resetAllButtonState>
		}
		break;
 800090a:	e1ef      	b.n	8000cec <FSM_Traffic_Light_Row+0x528>
	case AUTO_YEL:
		if(timer1Flag == 1){
 800090c:	4b56      	ldr	r3, [pc, #344]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d114      	bne.n	800093e <FSM_Traffic_Light_Row+0x17a>
			/* Count down time */
			traffic_light_remain_time_row--;
 8000914:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 800091c:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_row == 0){
 800091e:	4b53      	ldr	r3, [pc, #332]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d106      	bne.n	8000934 <FSM_Traffic_Light_Row+0x170>
				/* Move to next state*/
				FSM_Traffic_Light_State_Row = AUTO_RED;
 8000926:	4b4f      	ldr	r3, [pc, #316]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_row = red_time;
 800092c:	4b52      	ldr	r3, [pc, #328]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a4e      	ldr	r2, [pc, #312]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000932:	6013      	str	r3, [r2, #0]
			}
			uart_transmit();
 8000934:	f001 f846 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000938:	2064      	movs	r0, #100	; 0x64
 800093a:	f000 ff9d 	bl	8001878 <setTimer1>
		}
		/* Check if button 0 is pressed --> move to SET_MODE */
		if(buttonPressed_flag[0]){
 800093e:	4b4d      	ldr	r3, [pc, #308]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d014      	beq.n	8000970 <FSM_Traffic_Light_Row+0x1ac>
			buttonPressed_flag[0] = 0;
 8000946:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 800094c:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a4a      	ldr	r2, [pc, #296]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 8000952:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_RED;
 8000954:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000956:	2207      	movs	r2, #7
 8000958:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 800095c:	2206      	movs	r2, #6
 800095e:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000960:	f001 f830 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000968:	f000 ff86 	bl	8001878 <setTimer1>
			resetAllButtonState();
 800096c:	f7ff fefc 	bl	8000768 <resetAllButtonState>
		}
		/* Check if button 1 is pressed --> move to MANUAL_RED */
		if(buttonPressed_flag[1]){
 8000970:	4b40      	ldr	r3, [pc, #256]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 81bb 	beq.w	8000cf0 <FSM_Traffic_Light_Row+0x52c>
			buttonPressed_flag[1] = 0;
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 800097c:	2200      	movs	r2, #0
 800097e:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 8000980:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000982:	2203      	movs	r2, #3
 8000984:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <FSM_Traffic_Light_Row+0x2bc>)
 8000988:	2204      	movs	r2, #4
 800098a:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 800098c:	f7ff feec 	bl	8000768 <resetAllButtonState>
		}
		break;
 8000990:	e1ae      	b.n	8000cf0 <FSM_Traffic_Light_Row+0x52c>

	/* SET MODE */
	case SET_RED:
		if(timer1Flag == 1){
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d10f      	bne.n	80009ba <FSM_Traffic_Light_Row+0x1f6>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 80009a0:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 80009a6:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 80009a8:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <FSM_Traffic_Light_Row+0x2c4>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80009ae:	f001 f809 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f000 ff60 	bl	8001878 <setTimer1>
			break;
 80009b8:	e1a7      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		}
		if(buttonPressed_flag[0]){
 80009ba:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00f      	beq.n	80009e2 <FSM_Traffic_Light_Row+0x21e>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = green_time;
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <FSM_Traffic_Light_Row+0x2ac>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a2b      	ldr	r2, [pc, #172]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 80009ce:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_GREEN;
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	601a      	str	r2, [r3, #0]
			uart_transmit();
 80009d6:	f000 fff5 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80009da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009de:	f000 ff4b 	bl	8001878 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00a      	beq.n	8000a00 <FSM_Traffic_Light_Row+0x23c>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	705a      	strb	r2, [r3, #1]
			changeTime();
 80009f0:	f7ff fed4 	bl	800079c <changeTime>
			uart_transmit();
 80009f4:	f000 ffe6 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 ff3c 	bl	8001878 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000a02:	789b      	ldrb	r3, [r3, #2]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 8175 	beq.w	8000cf4 <FSM_Traffic_Light_Row+0x530>
			/* Save value */
			buttonPressed_flag[2] = 0;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <FSM_Traffic_Light_Row+0x2b0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	709a      	strb	r2, [r3, #2]
			red_time = Set_TL_Time;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <FSM_Traffic_Light_Row+0x2b8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 8000a16:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <FSM_Traffic_Light_Row+0x2c0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	441a      	add	r2, r3
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <FSM_Traffic_Light_Row+0x2ac>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	2264      	movs	r2, #100	; 0x64
 8000a2a:	fb02 f303 	mul.w	r3, r2, r3
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <FSM_Traffic_Light_Row+0x2c8>)
 8000a30:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a36:	f000 ff1f 	bl	8001878 <setTimer1>
		}
		break;
 8000a3a:	e15b      	b.n	8000cf4 <FSM_Traffic_Light_Row+0x530>
	case SET_GREEN:
		if(timer1Flag == 1){
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <FSM_Traffic_Light_Row+0x2a4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d125      	bne.n	8000a90 <FSM_Traffic_Light_Row+0x2cc>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <FSM_Traffic_Light_Row+0x2a0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <FSM_Traffic_Light_Row+0x2c4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <FSM_Traffic_Light_Row+0x2b4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <FSM_Traffic_Light_Row+0x2a8>)
 8000a56:	6013      	str	r3, [r2, #0]
			uart_transmit();
 8000a58:	f000 ffb4 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f000 ff0b 	bl	8001878 <setTimer1>
			break;
 8000a62:	e152      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
 8000a64:	200000d4 	.word	0x200000d4
 8000a68:	200000e4 	.word	0x200000e4
 8000a6c:	20000024 	.word	0x20000024
 8000a70:	2000001c 	.word	0x2000001c
 8000a74:	200000d0 	.word	0x200000d0
 8000a78:	20000018 	.word	0x20000018
 8000a7c:	20000100 	.word	0x20000100
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	20000020 	.word	0x20000020
 8000a88:	200000cc 	.word	0x200000cc
 8000a8c:	2000002c 	.word	0x2000002c
		}
		if(buttonPressed_flag[0]){
 8000a90:	4b9f      	ldr	r3, [pc, #636]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00f      	beq.n	8000ab8 <FSM_Traffic_Light_Row+0x2f4>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 8000a98:	4b9d      	ldr	r3, [pc, #628]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = yellow_time;
 8000a9e:	4b9d      	ldr	r3, [pc, #628]	; (8000d14 <FSM_Traffic_Light_Row+0x550>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a9d      	ldr	r2, [pc, #628]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000aa4:	6013      	str	r3, [r2, #0]
			FSM_Traffic_Light_State_Row = SET_YEL;
 8000aa6:	4b9d      	ldr	r3, [pc, #628]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000aa8:	2209      	movs	r2, #9
 8000aaa:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000aac:	f000 ff8a 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab4:	f000 fee0 	bl	8001878 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 8000ab8:	4b95      	ldr	r3, [pc, #596]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00a      	beq.n	8000ad6 <FSM_Traffic_Light_Row+0x312>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 8000ac0:	4b93      	ldr	r3, [pc, #588]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	705a      	strb	r2, [r3, #1]
			changeTime();
 8000ac6:	f7ff fe69 	bl	800079c <changeTime>
			uart_transmit();
 8000aca:	f000 ff7b 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad2:	f000 fed1 	bl	8001878 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000ad6:	4b8e      	ldr	r3, [pc, #568]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000ad8:	789b      	ldrb	r3, [r3, #2]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 810c 	beq.w	8000cf8 <FSM_Traffic_Light_Row+0x534>
			/* Save value if button 2 is pressed*/
			buttonPressed_flag[2] = 0;
 8000ae0:	4b8b      	ldr	r3, [pc, #556]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	709a      	strb	r2, [r3, #2]
			green_time = Set_TL_Time;
 8000ae6:	4b8c      	ldr	r3, [pc, #560]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a8d      	ldr	r2, [pc, #564]	; (8000d20 <FSM_Traffic_Light_Row+0x55c>)
 8000aec:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000aee:	4b8d      	ldr	r3, [pc, #564]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b88      	ldr	r3, [pc, #544]	; (8000d14 <FSM_Traffic_Light_Row+0x550>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	441a      	add	r2, r3
 8000af8:	4b89      	ldr	r3, [pc, #548]	; (8000d20 <FSM_Traffic_Light_Row+0x55c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	2264      	movs	r2, #100	; 0x64
 8000b00:	fb02 f303 	mul.w	r3, r2, r3
 8000b04:	4a88      	ldr	r2, [pc, #544]	; (8000d28 <FSM_Traffic_Light_Row+0x564>)
 8000b06:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b0c:	f000 feb4 	bl	8001878 <setTimer1>
		}
		break;
 8000b10:	e0f2      	b.n	8000cf8 <FSM_Traffic_Light_Row+0x534>
	case SET_YEL:
		if(timer1Flag == 1){
 8000b12:	4b86      	ldr	r3, [pc, #536]	; (8000d2c <FSM_Traffic_Light_Row+0x568>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d10f      	bne.n	8000b3a <FSM_Traffic_Light_Row+0x376>
			/* Back to AUTO MODE */
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000b1a:	4b80      	ldr	r3, [pc, #512]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
			To_Default_State = 1;
 8000b20:	4b83      	ldr	r3, [pc, #524]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_row = red_time;
 8000b26:	4b7f      	ldr	r3, [pc, #508]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a82      	ldr	r2, [pc, #520]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000b2c:	6013      	str	r3, [r2, #0]
			uart_transmit();
 8000b2e:	f000 ff49 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f000 fea0 	bl	8001878 <setTimer1>
			break;
 8000b38:	e0e7      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		}
		if(buttonPressed_flag[0]){
 8000b3a:	4b75      	ldr	r3, [pc, #468]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d015      	beq.n	8000b6e <FSM_Traffic_Light_Row+0x3aa>
			/* Move to next state if button 0 is pressed */
			buttonPressed_flag[0] = 0;
 8000b42:	4b73      	ldr	r3, [pc, #460]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000b48:	4b76      	ldr	r3, [pc, #472]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a72      	ldr	r2, [pc, #456]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000b4e:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000b50:	4b74      	ldr	r3, [pc, #464]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a77      	ldr	r2, [pc, #476]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000b56:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000b58:	4b75      	ldr	r3, [pc, #468]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000b5e:	4b6f      	ldr	r3, [pc, #444]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000b64:	f000 ff2e 	bl	80019c4 <uart_transmit>

			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000b68:	2064      	movs	r0, #100	; 0x64
 8000b6a:	f000 fe85 	bl	8001878 <setTimer1>
		}
		if(buttonPressed_flag[1]){
 8000b6e:	4b68      	ldr	r3, [pc, #416]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00a      	beq.n	8000b8c <FSM_Traffic_Light_Row+0x3c8>
			/* INC. time if button 1 is pressed */
			buttonPressed_flag[1] = 0;
 8000b76:	4b66      	ldr	r3, [pc, #408]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	705a      	strb	r2, [r3, #1]
			changeTime();
 8000b7c:	f7ff fe0e 	bl	800079c <changeTime>
			uart_transmit();
 8000b80:	f000 ff20 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b88:	f000 fe76 	bl	8001878 <setTimer1>
		}
		if(buttonPressed_flag[2]){
 8000b8c:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b8e:	789b      	ldrb	r3, [r3, #2]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f000 80b3 	beq.w	8000cfc <FSM_Traffic_Light_Row+0x538>
			/* Save value if button 2 is pressed */
			buttonPressed_flag[2] = 0;
 8000b96:	4b5e      	ldr	r3, [pc, #376]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	709a      	strb	r2, [r3, #2]
			yellow_time = Set_TL_Time;
 8000b9c:	4b5e      	ldr	r3, [pc, #376]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a5c      	ldr	r2, [pc, #368]	; (8000d14 <FSM_Traffic_Light_Row+0x550>)
 8000ba2:	6013      	str	r3, [r2, #0]
			TIMER3_PEDESTRIAN_CYCLE = (red_time + yellow_time + green_time) * TIMER1_SECOND_DURATION;
 8000ba4:	4b5f      	ldr	r3, [pc, #380]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <FSM_Traffic_Light_Row+0x550>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	441a      	add	r2, r3
 8000bae:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <FSM_Traffic_Light_Row+0x55c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	2264      	movs	r2, #100	; 0x64
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	4a5b      	ldr	r2, [pc, #364]	; (8000d28 <FSM_Traffic_Light_Row+0x564>)
 8000bbc:	6013      	str	r3, [r2, #0]
			setTimer1(TIMER1_10SECOND_DURATION * TICK);
 8000bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc2:	f000 fe59 	bl	8001878 <setTimer1>
		}
		break;
 8000bc6:	e099      	b.n	8000cfc <FSM_Traffic_Light_Row+0x538>

	/* MANUAL MODE */
	case MANUAL_RED:
		if(buttonPressed_flag[1]){
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000bca:	785b      	ldrb	r3, [r3, #1]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00c      	beq.n	8000bea <FSM_Traffic_Light_Row+0x426>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000bd0:	f000 fef8 	bl	80019c4 <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000bd4:	4b4e      	ldr	r3, [pc, #312]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_GREEN;
 8000bda:	4b50      	ldr	r3, [pc, #320]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_RED;
 8000be0:	4b55      	ldr	r3, [pc, #340]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000be2:	2203      	movs	r2, #3
 8000be4:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000be6:	f7ff fdbf 	bl	8000768 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000bea:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8086 	beq.w	8000d00 <FSM_Traffic_Light_Row+0x53c>
			/* Back to AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000bf4:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a46      	ldr	r2, [pc, #280]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000c00:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000c02:	4b48      	ldr	r3, [pc, #288]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a4b      	ldr	r2, [pc, #300]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000c08:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000c10:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000c16:	4b48      	ldr	r3, [pc, #288]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000c18:	2206      	movs	r2, #6
 8000c1a:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000c1c:	f000 fed2 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000c20:	2064      	movs	r0, #100	; 0x64
 8000c22:	f000 fe29 	bl	8001878 <setTimer1>
		}
		break;
 8000c26:	e06b      	b.n	8000d00 <FSM_Traffic_Light_Row+0x53c>
	case MANUAL_GREEN:
		if(buttonPressed_flag[1]){
 8000c28:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c2a:	785b      	ldrb	r3, [r3, #1]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00c      	beq.n	8000c4a <FSM_Traffic_Light_Row+0x486>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000c30:	f000 fec8 	bl	80019c4 <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000c34:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_YEL;
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000c3c:	2205      	movs	r2, #5
 8000c3e:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_YEL;
 8000c40:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000c42:	2205      	movs	r2, #5
 8000c44:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000c46:	f7ff fd8f 	bl	8000768 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d058      	beq.n	8000d04 <FSM_Traffic_Light_Row+0x540>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a2e      	ldr	r2, [pc, #184]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000c5e:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a33      	ldr	r2, [pc, #204]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000c66:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000c68:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000c76:	2206      	movs	r2, #6
 8000c78:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000c7a:	f000 fea3 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f000 fdfa 	bl	8001878 <setTimer1>
		}
		break;
 8000c84:	e03e      	b.n	8000d04 <FSM_Traffic_Light_Row+0x540>
	case MANUAL_YEL:
		if(buttonPressed_flag[1]){
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00c      	beq.n	8000ca8 <FSM_Traffic_Light_Row+0x4e4>
			/* Move to next state of MANUAL MODE if button 1 is pressed */
			uart_transmit();
 8000c8e:	f000 fe99 	bl	80019c4 <uart_transmit>
			buttonPressed_flag[1] = 0;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	705a      	strb	r2, [r3, #1]
			FSM_Traffic_Light_State_Row = MANUAL_RED;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = MANUAL_GREEN;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	601a      	str	r2, [r3, #0]
			resetAllButtonState();
 8000ca4:	f7ff fd60 	bl	8000768 <resetAllButtonState>
		}
		if(buttonPressed_flag[0]){
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d02b      	beq.n	8000d08 <FSM_Traffic_Light_Row+0x544>
			/* BACK TO AUTO_RED */
			buttonPressed_flag[0] = 0;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <FSM_Traffic_Light_Row+0x54c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
			Set_TL_Time = red_time;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <FSM_Traffic_Light_Row+0x554>)
 8000cbc:	6013      	str	r3, [r2, #0]
			traffic_light_remain_time_row = red_time;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <FSM_Traffic_Light_Row+0x560>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <FSM_Traffic_Light_Row+0x570>)
 8000cc4:	6013      	str	r3, [r2, #0]
			To_Default_State = 1;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <FSM_Traffic_Light_Row+0x56c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Row = AUTO_RED;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <FSM_Traffic_Light_Row+0x558>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = BLACK_HOLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <FSM_Traffic_Light_Row+0x574>)
 8000cd4:	2206      	movs	r2, #6
 8000cd6:	601a      	str	r2, [r3, #0]
			uart_transmit();
 8000cd8:	f000 fe74 	bl	80019c4 <uart_transmit>
			setTimer1(TIMER1_SECOND_DURATION * TICK);
 8000cdc:	2064      	movs	r0, #100	; 0x64
 8000cde:	f000 fdcb 	bl	8001878 <setTimer1>
		}
		break;
 8000ce2:	e011      	b.n	8000d08 <FSM_Traffic_Light_Row+0x544>
	default:
		break;
 8000ce4:	bf00      	nop
 8000ce6:	e010      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000ce8:	bf00      	nop
 8000cea:	e00e      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cec:	bf00      	nop
 8000cee:	e00c      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cf0:	bf00      	nop
 8000cf2:	e00a      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cf4:	bf00      	nop
 8000cf6:	e008      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cf8:	bf00      	nop
 8000cfa:	e006      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000cfc:	bf00      	nop
 8000cfe:	e004      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000d00:	bf00      	nop
 8000d02:	e002      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000d04:	bf00      	nop
 8000d06:	e000      	b.n	8000d0a <FSM_Traffic_Light_Row+0x546>
		break;
 8000d08:	bf00      	nop
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000d0 	.word	0x200000d0
 8000d14:	20000020 	.word	0x20000020
 8000d18:	20000100 	.word	0x20000100
 8000d1c:	200000d4 	.word	0x200000d4
 8000d20:	2000001c 	.word	0x2000001c
 8000d24:	20000018 	.word	0x20000018
 8000d28:	2000002c 	.word	0x2000002c
 8000d2c:	200000e4 	.word	0x200000e4
 8000d30:	200000cc 	.word	0x200000cc
 8000d34:	20000024 	.word	0x20000024
 8000d38:	2000000c 	.word	0x2000000c

08000d3c <FSM_Traffic_Light_Col>:

void FSM_Traffic_Light_Col(){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	switch (FSM_Traffic_Light_State_Col) {
 8000d40:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d86b      	bhi.n	8000e20 <FSM_Traffic_Light_Col+0xe4>
 8000d48:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <FSM_Traffic_Light_Col+0x14>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000d6d 	.word	0x08000d6d
 8000d54:	08000d9d 	.word	0x08000d9d
 8000d58:	08000dcd 	.word	0x08000dcd
 8000d5c:	08000e21 	.word	0x08000e21
 8000d60:	08000e21 	.word	0x08000e21
 8000d64:	08000e21 	.word	0x08000e21
 8000d68:	08000dfd 	.word	0x08000dfd
	/* The first three states are similar to ROW */
	case AUTO_RED:
		if(timer2Flag == 1){
 8000d6c:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <FSM_Traffic_Light_Col+0x100>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d157      	bne.n	8000e24 <FSM_Traffic_Light_Col+0xe8>
			traffic_light_remain_time_col--;
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	4a31      	ldr	r2, [pc, #196]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000d7c:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d106      	bne.n	8000d94 <FSM_Traffic_Light_Col+0x58>
				FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = green_time;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <FSM_Traffic_Light_Col+0x108>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2b      	ldr	r2, [pc, #172]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000d92:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	f000 fd83 	bl	80018a0 <setTimer2>
		}
		break;
 8000d9a:	e043      	b.n	8000e24 <FSM_Traffic_Light_Col+0xe8>
	case AUTO_GREEN:
		if(timer2Flag == 1){
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <FSM_Traffic_Light_Col+0x100>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d141      	bne.n	8000e28 <FSM_Traffic_Light_Col+0xec>
			traffic_light_remain_time_col--;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000dac:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d106      	bne.n	8000dc4 <FSM_Traffic_Light_Col+0x88>
				FSM_Traffic_Light_State_Col = AUTO_YEL;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = yellow_time;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <FSM_Traffic_Light_Col+0x10c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000dc2:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000dc4:	2064      	movs	r0, #100	; 0x64
 8000dc6:	f000 fd6b 	bl	80018a0 <setTimer2>
		}
		break;
 8000dca:	e02d      	b.n	8000e28 <FSM_Traffic_Light_Col+0xec>
	case AUTO_YEL:
		if(timer2Flag == 1){
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <FSM_Traffic_Light_Col+0x100>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d12b      	bne.n	8000e2c <FSM_Traffic_Light_Col+0xf0>
			traffic_light_remain_time_col--;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000ddc:	6013      	str	r3, [r2, #0]
			if(traffic_light_remain_time_col == 0){
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d106      	bne.n	8000df4 <FSM_Traffic_Light_Col+0xb8>
				FSM_Traffic_Light_State_Col = AUTO_RED;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
				traffic_light_remain_time_col = red_time;
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <FSM_Traffic_Light_Col+0x110>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000df2:	6013      	str	r3, [r2, #0]
			}
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f000 fd53 	bl	80018a0 <setTimer2>
		}
		break;
 8000dfa:	e017      	b.n	8000e2c <FSM_Traffic_Light_Col+0xf0>
	case BLACK_HOLE:
		/* This is trap state to force Col stop */
		if(To_Default_State == 1){
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <FSM_Traffic_Light_Col+0x114>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d115      	bne.n	8000e30 <FSM_Traffic_Light_Col+0xf4>
			To_Default_State = 0;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <FSM_Traffic_Light_Col+0x114>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
			FSM_Traffic_Light_State_Col = AUTO_GREEN;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <FSM_Traffic_Light_Col+0xfc>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
			traffic_light_remain_time_col = green_time;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <FSM_Traffic_Light_Col+0x108>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <FSM_Traffic_Light_Col+0x104>)
 8000e16:	6013      	str	r3, [r2, #0]
			setTimer2(TIMER1_SECOND_DURATION * TICK);
 8000e18:	2064      	movs	r0, #100	; 0x64
 8000e1a:	f000 fd41 	bl	80018a0 <setTimer2>
		}
		break;
 8000e1e:	e007      	b.n	8000e30 <FSM_Traffic_Light_Col+0xf4>
	default:
		break;
 8000e20:	bf00      	nop
 8000e22:	e006      	b.n	8000e32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e24:	bf00      	nop
 8000e26:	e004      	b.n	8000e32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e28:	bf00      	nop
 8000e2a:	e002      	b.n	8000e32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e2c:	bf00      	nop
 8000e2e:	e000      	b.n	8000e32 <FSM_Traffic_Light_Col+0xf6>
		break;
 8000e30:	bf00      	nop
	}
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	200000ec 	.word	0x200000ec
 8000e40:	20000028 	.word	0x20000028
 8000e44:	2000001c 	.word	0x2000001c
 8000e48:	20000020 	.word	0x20000020
 8000e4c:	20000018 	.word	0x20000018
 8000e50:	200000cc 	.word	0x200000cc

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f000 fe40 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f850 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f000 f97c 	bl	800115c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e64:	f000 f88e 	bl	8000f84 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e68:	f000 f94e 	bl	8001108 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e6c:	f000 f8d6 	bl	800101c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e70:	481a      	ldr	r0, [pc, #104]	; (8000edc <main+0x88>)
 8000e72:	f001 fe71 	bl	8002b58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e76:	2100      	movs	r1, #0
 8000e78:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <main+0x8c>)
 8000e7a:	f001 ff17 	bl	8002cac <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000e7e:	f000 faf7 	bl	8001470 <SCH_Init>
  setTimer1(100);
 8000e82:	2064      	movs	r0, #100	; 0x64
 8000e84:	f000 fcf8 	bl	8001878 <setTimer1>
  setTimer2(100);
 8000e88:	2064      	movs	r0, #100	; 0x64
 8000e8a:	f000 fd09 	bl	80018a0 <setTimer2>
  SCH_Add_Task(FSM_Traffic_Light_Row, 0, 1);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2100      	movs	r1, #0
 8000e92:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <main+0x90>)
 8000e94:	f000 faf2 	bl	800147c <SCH_Add_Task>
  SCH_Add_Task(FSM_Traffic_Light_Col, 0, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <main+0x94>)
 8000e9e:	f000 faed 	bl	800147c <SCH_Add_Task>
  SCH_Add_Task(FSM_Pedestrian, 0, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <main+0x98>)
 8000ea8:	f000 fae8 	bl	800147c <SCH_Add_Task>
  SCH_Add_Task(display_traffic_light, 0, 1);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2100      	movs	r1, #0
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <main+0x9c>)
 8000eb2:	f000 fae3 	bl	800147c <SCH_Add_Task>
  SCH_Add_Task(FSM_Buzzer, 0, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2100      	movs	r1, #0
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <main+0xa0>)
 8000ebc:	f000 fade 	bl	800147c <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <main+0xa4>)
 8000ec6:	f000 fad9 	bl	800147c <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 1);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2100      	movs	r1, #0
 8000ece:	480b      	ldr	r0, [pc, #44]	; (8000efc <main+0xa8>)
 8000ed0:	f000 fad4 	bl	800147c <SCH_Add_Task>
//	  FSM_Traffic_Light_Row();
//	  FSM_Traffic_Light_Col();
//	  FSM_Pedestrian();
//	  display_traffic_light();
//	  FSM_Buzzer();
	  SCH_Dispatch_Tasks();
 8000ed4:	f000 fb14 	bl	8001500 <SCH_Dispatch_Tasks>
 8000ed8:	e7fc      	b.n	8000ed4 <main+0x80>
 8000eda:	bf00      	nop
 8000edc:	20000160 	.word	0x20000160
 8000ee0:	20000118 	.word	0x20000118
 8000ee4:	080007c5 	.word	0x080007c5
 8000ee8:	08000d3d 	.word	0x08000d3d
 8000eec:	08000629 	.word	0x08000629
 8000ef0:	08000401 	.word	0x08000401
 8000ef4:	080002dd 	.word	0x080002dd
 8000ef8:	08001919 	.word	0x08001919
 8000efc:	0800014d 	.word	0x0800014d

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b090      	sub	sp, #64	; 0x40
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0318 	add.w	r3, r7, #24
 8000f0a:	2228      	movs	r2, #40	; 0x28
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fa32 	bl	8004378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f26:	2301      	movs	r3, #1
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f36:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 f99f 	bl	8002284 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f4c:	f000 f97e 	bl	800124c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2302      	movs	r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fc0a 	bl	8002784 <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f76:	f000 f969 	bl	800124c <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3740      	adds	r7, #64	; 0x40
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <MX_TIM2_Init+0x94>)
 8000fa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_TIM2_Init+0x94>)
 8000faa:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_TIM2_Init+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_TIM2_Init+0x94>)
 8000fb8:	223f      	movs	r2, #63	; 0x3f
 8000fba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_TIM2_Init+0x94>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_TIM2_Init+0x94>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fc8:	4813      	ldr	r0, [pc, #76]	; (8001018 <MX_TIM2_Init+0x94>)
 8000fca:	f001 fd75 	bl	8002ab8 <HAL_TIM_Base_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fd4:	f000 f93a 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <MX_TIM2_Init+0x94>)
 8000fe6:	f002 f8c9 	bl	800317c <HAL_TIM_ConfigClockSource>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ff0:	f000 f92c 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_TIM2_Init+0x94>)
 8001002:	f002 fc47 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800100c:	f000 f91e 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000160 	.word	0x20000160

0800101c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <MX_TIM3_Init+0xe4>)
 800104e:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <MX_TIM3_Init+0xe8>)
 8001050:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <MX_TIM3_Init+0xe4>)
 8001054:	223f      	movs	r2, #63	; 0x3f
 8001056:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <MX_TIM3_Init+0xe4>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_TIM3_Init+0xe4>)
 8001060:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001064:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_TIM3_Init+0xe4>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_TIM3_Init+0xe4>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001072:	4823      	ldr	r0, [pc, #140]	; (8001100 <MX_TIM3_Init+0xe4>)
 8001074:	f001 fd20 	bl	8002ab8 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800107e:	f000 f8e5 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108c:	4619      	mov	r1, r3
 800108e:	481c      	ldr	r0, [pc, #112]	; (8001100 <MX_TIM3_Init+0xe4>)
 8001090:	f002 f874 	bl	800317c <HAL_TIM_ConfigClockSource>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800109a:	f000 f8d7 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800109e:	4818      	ldr	r0, [pc, #96]	; (8001100 <MX_TIM3_Init+0xe4>)
 80010a0:	f001 fdac 	bl	8002bfc <HAL_TIM_PWM_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010aa:	f000 f8cf 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	4619      	mov	r1, r3
 80010bc:	4810      	ldr	r0, [pc, #64]	; (8001100 <MX_TIM3_Init+0xe4>)
 80010be:	f002 fbe9 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010c8:	f000 f8c0 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010cc:	2360      	movs	r3, #96	; 0x60
 80010ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 199;
 80010d0:	23c7      	movs	r3, #199	; 0xc7
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <MX_TIM3_Init+0xe4>)
 80010e4:	f001 ff8c 	bl	8003000 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010ee:	f000 f8ad 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <MX_TIM3_Init+0xe4>)
 80010f4:	f000 fac4 	bl	8001680 <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3738      	adds	r7, #56	; 0x38
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000118 	.word	0x20000118
 8001104:	40000400 	.word	0x40000400

08001108 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_USART2_UART_Init+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001114:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001140:	f002 fc18 	bl	8003974 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800114a:	f000 f87f 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200001a8 	.word	0x200001a8
 8001158:	40004400 	.word	0x40004400

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b2e      	ldr	r3, [pc, #184]	; (800122c <MX_GPIO_Init+0xd0>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a2d      	ldr	r2, [pc, #180]	; (800122c <MX_GPIO_Init+0xd0>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_GPIO_Init+0xd0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <MX_GPIO_Init+0xd0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <MX_GPIO_Init+0xd0>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <MX_GPIO_Init+0xd0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <MX_GPIO_Init+0xd4>)
 80011a8:	f001 f853 	bl	8002252 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80011b2:	4820      	ldr	r0, [pc, #128]	; (8001234 <MX_GPIO_Init+0xd8>)
 80011b4:	f001 f84d 	bl	8002252 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDE_Pin BUTTON_MOD_Pin BUTTON_IC_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDE_Pin|BUTTON_MOD_Pin|BUTTON_IC_Pin;
 80011b8:	2313      	movs	r3, #19
 80011ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	4619      	mov	r1, r3
 80011ca:	481a      	ldr	r0, [pc, #104]	; (8001234 <MX_GPIO_Init+0xd8>)
 80011cc:	f000 fea6 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_SET_Pin;
 80011d0:	2301      	movs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_SET_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4619      	mov	r1, r3
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <MX_GPIO_Init+0xd4>)
 80011e4:	f000 fe9a 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL1_Pin TL1_SIGNAL2_Pin TL2_SIGNAL2_Pin TL2_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL1_Pin|TL1_SIGNAL2_Pin|TL2_SIGNAL2_Pin|TL2_SIGNAL1_Pin;
 80011e8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80011ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2302      	movs	r3, #2
 80011f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4619      	mov	r1, r3
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <MX_GPIO_Init+0xd4>)
 8001202:	f000 fe8b 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_SIGNAL2_Pin TL1_SIGNAL1_Pin */
  GPIO_InitStruct.Pin = PEDE_SIGNAL2_Pin|TL1_SIGNAL1_Pin;
 8001206:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800120a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2302      	movs	r3, #2
 8001216:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_GPIO_Init+0xd8>)
 8001220:	f000 fe7c 	bl	8001f1c <HAL_GPIO_Init>

}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	40010c00 	.word	0x40010c00
 8001234:	40010800 	.word	0x40010800

08001238 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
//	timerRun();
//	button_reading();
	SCH_Update();
 8001240:	f000 f93a 	bl	80014b8 <SCH_Update>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <initQueue>:

Task taskQueue[SCH_MAX_TASKS + 1];

uint32_t queueSize = 0;

void initQueue(){
 8001258:	b4b0      	push	{r4, r5, r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
	Task newEle;
	newEle.pTask = NULL;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
	newEle.delay = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
	newEle.period = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
	newEle.runFlag = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	733b      	strb	r3, [r7, #12]
	newEle.taskID = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e00f      	b.n	8001298 <initQueue+0x40>
		taskQueue[i] = newEle;
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <initQueue+0x54>)
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	461d      	mov	r5, r3
 8001288:	463c      	mov	r4, r7
 800128a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	602b      	str	r3, [r5, #0]
	for (uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b09      	cmp	r3, #9
 800129c:	d9ec      	bls.n	8001278 <initQueue+0x20>
	}
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bcb0      	pop	{r4, r5, r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000210 	.word	0x20000210

080012b0 <removeFront>:
	}
	queueSize--;
	return 0;
}

uint32_t removeFront(){
 80012b0:	b4b0      	push	{r4, r5, r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
	if (queueSize == 0) return -1;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <removeFront+0x68>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <removeFront+0x14>
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e023      	b.n	800130c <removeFront+0x5c>
	for (uint32_t i = 0; i < SCH_MAX_TASKS - 1; i++){
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	e017      	b.n	80012fa <removeFront+0x4a>
		taskQueue[i] = taskQueue[i+1];
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	4813      	ldr	r0, [pc, #76]	; (800131c <removeFront+0x6c>)
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4418      	add	r0, r3
 80012dc:	490f      	ldr	r1, [pc, #60]	; (800131c <removeFront+0x6c>)
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	4604      	mov	r4, r0
 80012ea:	461d      	mov	r5, r3
 80012ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	6023      	str	r3, [r4, #0]
	for (uint32_t i = 0; i < SCH_MAX_TASKS - 1; i++){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d9e4      	bls.n	80012ca <removeFront+0x1a>
	}
	queueSize--;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <removeFront+0x68>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <removeFront+0x68>)
 8001308:	6013      	str	r3, [r2, #0]
	return 0;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bcb0      	pop	{r4, r5, r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000104 	.word	0x20000104
 800131c:	20000210 	.word	0x20000210

08001320 <addElement>:

uint32_t addElement(Task ele){
 8001320:	b084      	sub	sp, #16
 8001322:	b4b0      	push	{r4, r5, r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	f107 0420 	add.w	r4, r7, #32
 800132c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (queueSize == SCH_MAX_TASKS) return -1;
 8001330:	4b4d      	ldr	r3, [pc, #308]	; (8001468 <addElement+0x148>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b0a      	cmp	r3, #10
 8001336:	d102      	bne.n	800133e <addElement+0x1e>
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	e08d      	b.n	800145a <addElement+0x13a>
	else {
		uint32_t pos;
		uint32_t accumDelay = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
		for (pos = 0; pos < SCH_MAX_TASKS; pos++){
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e026      	b.n	8001396 <addElement+0x76>
			if (taskQueue[pos].pTask == NULL) break;
 8001348:	4948      	ldr	r1, [pc, #288]	; (800146c <addElement+0x14c>)
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d020      	beq.n	800139e <addElement+0x7e>
			if (taskQueue[pos].delay + accumDelay > ele.delay) break;
 800135c:	4943      	ldr	r1, [pc, #268]	; (800146c <addElement+0x14c>)
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	3304      	adds	r3, #4
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	441a      	add	r2, r3
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	429a      	cmp	r2, r3
 8001376:	d814      	bhi.n	80013a2 <addElement+0x82>
			else {
				accumDelay += taskQueue[pos].delay;
 8001378:	493c      	ldr	r1, [pc, #240]	; (800146c <addElement+0x14c>)
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	3304      	adds	r3, #4
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
		for (pos = 0; pos < SCH_MAX_TASKS; pos++){
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b09      	cmp	r3, #9
 800139a:	d9d5      	bls.n	8001348 <addElement+0x28>
 800139c:	e002      	b.n	80013a4 <addElement+0x84>
			if (taskQueue[pos].pTask == NULL) break;
 800139e:	bf00      	nop
 80013a0:	e000      	b.n	80013a4 <addElement+0x84>
			if (taskQueue[pos].delay + accumDelay > ele.delay) break;
 80013a2:	bf00      	nop
			}
		}
		ele.delay -= accumDelay;
 80013a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
		for (uint32_t i = SCH_MAX_TASKS - 1; i > pos; i--){
 80013ac:	2309      	movs	r3, #9
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	e017      	b.n	80013e2 <addElement+0xc2>
			taskQueue[i] = taskQueue[i-1];
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	482d      	ldr	r0, [pc, #180]	; (800146c <addElement+0x14c>)
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4418      	add	r0, r3
 80013c4:	4929      	ldr	r1, [pc, #164]	; (800146c <addElement+0x14c>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	4604      	mov	r4, r0
 80013d2:	461d      	mov	r5, r3
 80013d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	6023      	str	r3, [r4, #0]
		for (uint32_t i = SCH_MAX_TASKS - 1; i > pos; i--){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d8e3      	bhi.n	80013b2 <addElement+0x92>
		}
		taskQueue[pos] = ele;
 80013ea:	4920      	ldr	r1, [pc, #128]	; (800146c <addElement+0x14c>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	461d      	mov	r5, r3
 80013fa:	f107 0420 	add.w	r4, r7, #32
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	602b      	str	r3, [r5, #0]
		if (pos + 1 != SCH_MAX_TASKS && taskQueue[pos + 1].pTask != NULL) taskQueue[pos + 1].delay -= ele.delay;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b09      	cmp	r3, #9
 800140a:	d020      	beq.n	800144e <addElement+0x12e>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	4916      	ldr	r1, [pc, #88]	; (800146c <addElement+0x14c>)
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d015      	beq.n	800144e <addElement+0x12e>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	4911      	ldr	r1, [pc, #68]	; (800146c <addElement+0x14c>)
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	3304      	adds	r3, #4
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	3201      	adds	r2, #1
 800143c:	1ac9      	subs	r1, r1, r3
 800143e:	480b      	ldr	r0, [pc, #44]	; (800146c <addElement+0x14c>)
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4403      	add	r3, r0
 800144a:	3304      	adds	r3, #4
 800144c:	6019      	str	r1, [r3, #0]
		queueSize++;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <addElement+0x148>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <addElement+0x148>)
 8001456:	6013      	str	r3, [r2, #0]
		return 0;
 8001458:	2300      	movs	r3, #0
	}
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bcb0      	pop	{r4, r5, r7}
 8001462:	b004      	add	sp, #16
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000104 	.word	0x20000104
 800146c:	20000210 	.word	0x20000210

08001470 <SCH_Init>:

/**********************************************/

/********** SCHEDULER IMPLEMENTATION **********/

void SCH_Init(){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	initQueue();
 8001474:	f7ff fef0 	bl	8001258 <initQueue>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(*pFunction)(), uint32_t delay, uint32_t period){
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af02      	add	r7, sp, #8
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
	Task newEle;
	newEle.pTask = pFunction;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	617b      	str	r3, [r7, #20]
	newEle.delay = delay;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	61bb      	str	r3, [r7, #24]
	newEle.period = period;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	61fb      	str	r3, [r7, #28]
	newEle.runFlag = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3020 	strb.w	r3, [r7, #32]
	newEle.taskID = (uint32_t) pFunction;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	627b      	str	r3, [r7, #36]	; 0x24

	return addElement(newEle);
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a8:	f7ff ff3a 	bl	8001320 <addElement>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <SCH_Update>:
uint32_t SCH_Delete_Task(uint32_t taskID){
	uint32_t pos = findPos(taskID);
	return removeElement(pos);
}

void SCH_Update(){
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	if (queueSize != 0){
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <SCH_Update+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d014      	beq.n	80014ee <SCH_Update+0x36>
		if (taskQueue[0].delay > 0){
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <SCH_Update+0x44>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <SCH_Update+0x20>
			taskQueue[0].delay--;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <SCH_Update+0x44>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SCH_Update+0x44>)
 80014d4:	6053      	str	r3, [r2, #4]
			if (taskQueue[0].period != 0){
				taskQueue[0].delay = taskQueue[0].period;
			}
		}
	}
}
 80014d6:	e00a      	b.n	80014ee <SCH_Update+0x36>
			taskQueue[0].runFlag = 1;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <SCH_Update+0x44>)
 80014da:	2201      	movs	r2, #1
 80014dc:	731a      	strb	r2, [r3, #12]
			if (taskQueue[0].period != 0){
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <SCH_Update+0x44>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <SCH_Update+0x36>
				taskQueue[0].delay = taskQueue[0].period;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SCH_Update+0x44>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <SCH_Update+0x44>)
 80014ec:	6053      	str	r3, [r2, #4]
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000104 	.word	0x20000104
 80014fc:	20000210 	.word	0x20000210

08001500 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(){
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af02      	add	r7, sp, #8
	for (uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	e044      	b.n	8001596 <SCH_Dispatch_Tasks+0x96>
		if (taskQueue[i].runFlag > 0){
 800150c:	4926      	ldr	r1, [pc, #152]	; (80015a8 <SCH_Dispatch_Tasks+0xa8>)
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	330c      	adds	r3, #12
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d036      	beq.n	8001590 <SCH_Dispatch_Tasks+0x90>
			(*taskQueue[i].pTask)();
 8001522:	4921      	ldr	r1, [pc, #132]	; (80015a8 <SCH_Dispatch_Tasks+0xa8>)
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4798      	blx	r3
			taskQueue[i].runFlag -= 1;
 8001534:	491c      	ldr	r1, [pc, #112]	; (80015a8 <SCH_Dispatch_Tasks+0xa8>)
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	330c      	adds	r3, #12
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	3b01      	subs	r3, #1
 8001548:	b2d8      	uxtb	r0, r3
 800154a:	4917      	ldr	r1, [pc, #92]	; (80015a8 <SCH_Dispatch_Tasks+0xa8>)
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	330c      	adds	r3, #12
 800155a:	4602      	mov	r2, r0
 800155c:	701a      	strb	r2, [r3, #0]
			Task current = taskQueue[i];
 800155e:	4912      	ldr	r1, [pc, #72]	; (80015a8 <SCH_Dispatch_Tasks+0xa8>)
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	1d3c      	adds	r4, r7, #4
 800156e:	461d      	mov	r5, r3
 8001570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	6023      	str	r3, [r4, #0]
			removeFront();
 8001578:	f7ff fe9a 	bl	80012b0 <removeFront>
			if (current.period != 0){
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <SCH_Dispatch_Tasks+0x90>
				uint32_t add = addElement(current);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158a:	f7ff fec9 	bl	8001320 <addElement>
 800158e:	61b8      	str	r0, [r7, #24]
	for (uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	3301      	adds	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d9b7      	bls.n	800150c <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000210 	.word	0x20000210

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_MspInit+0x5c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_MspInit+0x5c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_MspInit+0x60>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_MspInit+0x60>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001620:	d114      	bne.n	800164c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	201c      	movs	r0, #28
 8001640:	f000 fb85 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001644:	201c      	movs	r0, #28
 8001646:	f000 fb9e 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800164a:	e010      	b.n	800166e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_TIM_Base_MspInit+0x6c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10b      	bne.n	800166e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40000400 	.word	0x40000400

08001680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_TIM_MspPostInit+0x58>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d117      	bne.n	80016d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_TIM_MspPostInit+0x5c>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_TIM_MspPostInit+0x5c>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_TIM_MspPostInit+0x5c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b8:	2340      	movs	r3, #64	; 0x40
 80016ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_TIM_MspPostInit+0x60>)
 80016cc:	f000 fc26 	bl	8001f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40000400 	.word	0x40000400
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010800 	.word	0x40010800

080016e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <HAL_UART_MspInit+0x98>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d137      	bne.n	8001774 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_UART_MspInit+0x9c>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_UART_MspInit+0x9c>)
 800170a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170e:	61d3      	str	r3, [r2, #28]
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_UART_MspInit+0x9c>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_UART_MspInit+0x9c>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a17      	ldr	r2, [pc, #92]	; (8001780 <HAL_UART_MspInit+0x9c>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0x9c>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001734:	2304      	movs	r3, #4
 8001736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	480f      	ldr	r0, [pc, #60]	; (8001784 <HAL_UART_MspInit+0xa0>)
 8001748:	f000 fbe8 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800174c:	2308      	movs	r3, #8
 800174e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_UART_MspInit+0xa0>)
 8001760:	f000 fbdc 	bl	8001f1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2026      	movs	r0, #38	; 0x26
 800176a:	f000 faf0 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800176e:	2026      	movs	r0, #38	; 0x26
 8001770:	f000 fb09 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40004400 	.word	0x40004400
 8001780:	40021000 	.word	0x40021000
 8001784:	40010800 	.word	0x40010800

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ce:	f000 f9cb 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <TIM2_IRQHandler+0x10>)
 80017de:	f001 fb07 	bl	8002df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000160 	.word	0x20000160

080017ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <USART2_IRQHandler+0x10>)
 80017f2:	f002 f99f 	bl	8003b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200001a8 	.word	0x200001a8

08001800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <_sbrk+0x5c>)
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <_sbrk+0x60>)
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <_sbrk+0x64>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <_sbrk+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001830:	f002 fd78 	bl	8004324 <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	220c      	movs	r2, #12
 8001838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	e009      	b.n	8001854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <_sbrk+0x64>)
 8001850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20005000 	.word	0x20005000
 8001860:	00000400 	.word	0x00000400
 8001864:	20000108 	.word	0x20000108
 8001868:	20000300 	.word	0x20000300

0800186c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <setTimer1>:
 */


#include "timer.h"

void setTimer1(int duration){             // first trafic light
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	timer1Counter = duration/TICK;
 8001880:	4a05      	ldr	r2, [pc, #20]	; (8001898 <setTimer1+0x20>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
	timer1Flag = 0;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <setTimer1+0x24>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	200000e0 	.word	0x200000e0
 800189c:	200000e4 	.word	0x200000e4

080018a0 <setTimer2>:
void setTimer2(int duration){            // second traffc light
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	timer2Counter = duration/TICK;
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <setTimer2+0x20>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
	timer2Flag = 0;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <setTimer2+0x24>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	200000e8 	.word	0x200000e8
 80018c4:	200000ec 	.word	0x200000ec

080018c8 <setTimer3>:
void setTimer3(int duration){            // timer for pedestrian light
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	timer3Counter = duration/TICK;
 80018d0:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <setTimer3+0x20>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
	timer3Flag = 0;
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <setTimer3+0x24>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	200000f0 	.word	0x200000f0
 80018ec:	200000f4 	.word	0x200000f4

080018f0 <setTimer4>:
void setTimer4(int duration){            // buzzer timer
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	timer4Counter = duration/TICK;
 80018f8:	4a05      	ldr	r2, [pc, #20]	; (8001910 <setTimer4+0x20>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
	timer4Flag = 0;
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <setTimer4+0x24>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200000f8 	.word	0x200000f8
 8001914:	200000fc 	.word	0x200000fc

08001918 <timerRun>:
void setTimer5(int duration){            // extra timer
    timer5Counter = duration/TICK;
    timer5Flag = 0;
}
// Run all timer
void timerRun(){
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	if(timer1Counter > 0){
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <timerRun+0x8c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	dd0b      	ble.n	800193c <timerRun+0x24>
		timer1Counter--;
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <timerRun+0x8c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <timerRun+0x8c>)
 800192c:	6013      	str	r3, [r2, #0]
		if(timer1Counter <= 0){
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <timerRun+0x8c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	dc02      	bgt.n	800193c <timerRun+0x24>
			timer1Flag = 1;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <timerRun+0x90>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2Counter > 0){
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <timerRun+0x94>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dd0b      	ble.n	800195c <timerRun+0x44>
		timer2Counter--;
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <timerRun+0x94>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3b01      	subs	r3, #1
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <timerRun+0x94>)
 800194c:	6013      	str	r3, [r2, #0]
		if(timer2Counter <= 0){
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <timerRun+0x94>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	dc02      	bgt.n	800195c <timerRun+0x44>
			timer2Flag = 1;
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <timerRun+0x98>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3Counter > 0){
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <timerRun+0x9c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	dd0b      	ble.n	800197c <timerRun+0x64>
		timer3Counter--;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <timerRun+0x9c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3b01      	subs	r3, #1
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <timerRun+0x9c>)
 800196c:	6013      	str	r3, [r2, #0]
		if(timer3Counter <= 0){
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <timerRun+0x9c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	dc02      	bgt.n	800197c <timerRun+0x64>
			timer3Flag = 1;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <timerRun+0xa0>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4Counter > 0){
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <timerRun+0xa4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dd0b      	ble.n	800199c <timerRun+0x84>
		timer4Counter--;
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <timerRun+0xa4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <timerRun+0xa4>)
 800198c:	6013      	str	r3, [r2, #0]
		if(timer4Counter <= 0){
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <timerRun+0xa4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	dc02      	bgt.n	800199c <timerRun+0x84>
			timer4Flag = 1;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <timerRun+0xa8>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	200000e0 	.word	0x200000e0
 80019a8:	200000e4 	.word	0x200000e4
 80019ac:	200000e8 	.word	0x200000e8
 80019b0:	200000ec 	.word	0x200000ec
 80019b4:	200000f0 	.word	0x200000f0
 80019b8:	200000f4 	.word	0x200000f4
 80019bc:	200000f8 	.word	0x200000f8
 80019c0:	200000fc 	.word	0x200000fc

080019c4 <uart_transmit>:
 *      Author: Minh Duc Quach
 */

#include "uart.h"

void uart_transmit(){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	switch(FSM_Traffic_Light_State_Row){
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <uart_transmit+0xb0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	dc02      	bgt.n	80019d6 <uart_transmit+0x12>
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	da04      	bge.n	80019de <uart_transmit+0x1a>
		case SET_YEL:
			if (Set_TL_Time < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", Set_TL_Time), 1000);
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", Set_TL_Time), 1000);
			break;
		default:
			break;
 80019d4:	e04b      	b.n	8001a6e <uart_transmit+0xaa>
 80019d6:	3b07      	subs	r3, #7
	switch(FSM_Traffic_Light_State_Row){
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d848      	bhi.n	8001a6e <uart_transmit+0xaa>
 80019dc:	e023      	b.n	8001a26 <uart_transmit+0x62>
			if (traffic_light_remain_time_row < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", traffic_light_remain_time_row), 1000);
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <uart_transmit+0xb4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b09      	cmp	r3, #9
 80019e4:	dc0f      	bgt.n	8001a06 <uart_transmit+0x42>
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <uart_transmit+0xb4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4923      	ldr	r1, [pc, #140]	; (8001a7c <uart_transmit+0xb8>)
 80019ee:	4824      	ldr	r0, [pc, #144]	; (8001a80 <uart_transmit+0xbc>)
 80019f0:	f002 fcca 	bl	8004388 <siprintf>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fc:	4920      	ldr	r1, [pc, #128]	; (8001a80 <uart_transmit+0xbc>)
 80019fe:	4821      	ldr	r0, [pc, #132]	; (8001a84 <uart_transmit+0xc0>)
 8001a00:	f002 f805 	bl	8003a0e <HAL_UART_Transmit>
			break;
 8001a04:	e034      	b.n	8001a70 <uart_transmit+0xac>
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", traffic_light_remain_time_row), 1000);
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <uart_transmit+0xb4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	491e      	ldr	r1, [pc, #120]	; (8001a88 <uart_transmit+0xc4>)
 8001a0e:	481c      	ldr	r0, [pc, #112]	; (8001a80 <uart_transmit+0xbc>)
 8001a10:	f002 fcba 	bl	8004388 <siprintf>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1c:	4918      	ldr	r1, [pc, #96]	; (8001a80 <uart_transmit+0xbc>)
 8001a1e:	4819      	ldr	r0, [pc, #100]	; (8001a84 <uart_transmit+0xc0>)
 8001a20:	f001 fff5 	bl	8003a0e <HAL_UART_Transmit>
			break;
 8001a24:	e024      	b.n	8001a70 <uart_transmit+0xac>
			if (Set_TL_Time < 10) HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:0%d#", Set_TL_Time), 1000);
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <uart_transmit+0xc8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b09      	cmp	r3, #9
 8001a2c:	dc0f      	bgt.n	8001a4e <uart_transmit+0x8a>
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <uart_transmit+0xc8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4911      	ldr	r1, [pc, #68]	; (8001a7c <uart_transmit+0xb8>)
 8001a36:	4812      	ldr	r0, [pc, #72]	; (8001a80 <uart_transmit+0xbc>)
 8001a38:	f002 fca6 	bl	8004388 <siprintf>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a44:	490e      	ldr	r1, [pc, #56]	; (8001a80 <uart_transmit+0xbc>)
 8001a46:	480f      	ldr	r0, [pc, #60]	; (8001a84 <uart_transmit+0xc0>)
 8001a48:	f001 ffe1 	bl	8003a0e <HAL_UART_Transmit>
			break;
 8001a4c:	e010      	b.n	8001a70 <uart_transmit+0xac>
			else HAL_UART_Transmit(&huart2, (void *) str, sprintf(str, "!7SEG:%d#", Set_TL_Time), 1000);
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <uart_transmit+0xc8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	; (8001a88 <uart_transmit+0xc4>)
 8001a56:	480a      	ldr	r0, [pc, #40]	; (8001a80 <uart_transmit+0xbc>)
 8001a58:	f002 fc96 	bl	8004388 <siprintf>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a64:	4906      	ldr	r1, [pc, #24]	; (8001a80 <uart_transmit+0xbc>)
 8001a66:	4807      	ldr	r0, [pc, #28]	; (8001a84 <uart_transmit+0xc0>)
 8001a68:	f001 ffd1 	bl	8003a0e <HAL_UART_Transmit>
			break;
 8001a6c:	e000      	b.n	8001a70 <uart_transmit+0xac>
			break;
 8001a6e:	bf00      	nop
	}
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200000d4 	.word	0x200000d4
 8001a78:	20000024 	.word	0x20000024
 8001a7c:	08004c14 	.word	0x08004c14
 8001a80:	200001f0 	.word	0x200001f0
 8001a84:	200001a8 	.word	0x200001a8
 8001a88:	08004c20 	.word	0x08004c20
 8001a8c:	20000100 	.word	0x20000100

08001a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	; (8001ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ab6:	f7ff fed9 	bl	800186c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f002 fc39 	bl	8004330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001abe:	f7ff f9c9 	bl	8000e54 <main>
  bx lr
 8001ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001acc:	08004c90 	.word	0x08004c90
  ldr r2, =_sbss
 8001ad0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001ad4:	20000300 	.word	0x20000300

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x28>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f923 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fd58 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f93b 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f903 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000030 	.word	0x20000030
 8001b60:	20000038 	.word	0x20000038
 8001b64:	20000034 	.word	0x20000034

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x1c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x20>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_IncTick+0x20>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000038 	.word	0x20000038
 8001b88:	200002ec 	.word	0x200002ec

08001b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <HAL_GetTick+0x10>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	200002ec 	.word	0x200002ec

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <__NVIC_EnableIRQ+0x34>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff90 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff2d 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff42 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff35 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d008      	beq.n	8001de2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e020      	b.n	8001e24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 020e 	bic.w	r2, r2, #14
 8001df0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d005      	beq.n	8001e52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e051      	b.n	8001ef6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 020e 	bic.w	r2, r2, #14
 8001e60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <HAL_DMA_Abort_IT+0xd0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d029      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0xa0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_DMA_Abort_IT+0xd4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d022      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x9c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_DMA_Abort_IT+0xd8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d01a      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x96>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_DMA_Abort_IT+0xdc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d012      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x90>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <HAL_DMA_Abort_IT+0xe0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00a      	beq.n	8001eba <HAL_DMA_Abort_IT+0x8a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <HAL_DMA_Abort_IT+0xe4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d102      	bne.n	8001eb4 <HAL_DMA_Abort_IT+0x84>
 8001eae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eb2:	e00e      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb8:	e00b      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ebe:	e008      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	e005      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eca:	e002      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001ecc:	2310      	movs	r3, #16
 8001ece:	e000      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <HAL_DMA_Abort_IT+0xe8>)
 8001ed4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
    } 
  }
  return status;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40020008 	.word	0x40020008
 8001f04:	4002001c 	.word	0x4002001c
 8001f08:	40020030 	.word	0x40020030
 8001f0c:	40020044 	.word	0x40020044
 8001f10:	40020058 	.word	0x40020058
 8001f14:	4002006c 	.word	0x4002006c
 8001f18:	40020000 	.word	0x40020000

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b08b      	sub	sp, #44	; 0x2c
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2e:	e169      	b.n	8002204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f30:	2201      	movs	r2, #1
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 8158 	bne.w	80021fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a9a      	ldr	r2, [pc, #616]	; (80021bc <HAL_GPIO_Init+0x2a0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d05e      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f58:	4a98      	ldr	r2, [pc, #608]	; (80021bc <HAL_GPIO_Init+0x2a0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d875      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f5e:	4a98      	ldr	r2, [pc, #608]	; (80021c0 <HAL_GPIO_Init+0x2a4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d058      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f64:	4a96      	ldr	r2, [pc, #600]	; (80021c0 <HAL_GPIO_Init+0x2a4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d86f      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f6a:	4a96      	ldr	r2, [pc, #600]	; (80021c4 <HAL_GPIO_Init+0x2a8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d052      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f70:	4a94      	ldr	r2, [pc, #592]	; (80021c4 <HAL_GPIO_Init+0x2a8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d869      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f76:	4a94      	ldr	r2, [pc, #592]	; (80021c8 <HAL_GPIO_Init+0x2ac>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04c      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f7c:	4a92      	ldr	r2, [pc, #584]	; (80021c8 <HAL_GPIO_Init+0x2ac>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d863      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f82:	4a92      	ldr	r2, [pc, #584]	; (80021cc <HAL_GPIO_Init+0x2b0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d046      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f88:	4a90      	ldr	r2, [pc, #576]	; (80021cc <HAL_GPIO_Init+0x2b0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d85d      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f8e:	2b12      	cmp	r3, #18
 8001f90:	d82a      	bhi.n	8001fe8 <HAL_GPIO_Init+0xcc>
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d859      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <HAL_GPIO_Init+0x80>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08002017 	.word	0x08002017
 8001fa0:	08001ff1 	.word	0x08001ff1
 8001fa4:	08002003 	.word	0x08002003
 8001fa8:	08002045 	.word	0x08002045
 8001fac:	0800204b 	.word	0x0800204b
 8001fb0:	0800204b 	.word	0x0800204b
 8001fb4:	0800204b 	.word	0x0800204b
 8001fb8:	0800204b 	.word	0x0800204b
 8001fbc:	0800204b 	.word	0x0800204b
 8001fc0:	0800204b 	.word	0x0800204b
 8001fc4:	0800204b 	.word	0x0800204b
 8001fc8:	0800204b 	.word	0x0800204b
 8001fcc:	0800204b 	.word	0x0800204b
 8001fd0:	0800204b 	.word	0x0800204b
 8001fd4:	0800204b 	.word	0x0800204b
 8001fd8:	0800204b 	.word	0x0800204b
 8001fdc:	0800204b 	.word	0x0800204b
 8001fe0:	08001ff9 	.word	0x08001ff9
 8001fe4:	0800200d 	.word	0x0800200d
 8001fe8:	4a79      	ldr	r2, [pc, #484]	; (80021d0 <HAL_GPIO_Init+0x2b4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fee:	e02c      	b.n	800204a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e029      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e024      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	3308      	adds	r3, #8
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e01f      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	330c      	adds	r3, #12
 8002012:	623b      	str	r3, [r7, #32]
          break;
 8002014:	e01a      	b.n	800204c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800201e:	2304      	movs	r3, #4
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e013      	b.n	800204c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800202c:	2308      	movs	r3, #8
 800202e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	611a      	str	r2, [r3, #16]
          break;
 8002036:	e009      	b.n	800204c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002038:	2308      	movs	r3, #8
 800203a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	615a      	str	r2, [r3, #20]
          break;
 8002042:	e003      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x130>
          break;
 800204a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2bff      	cmp	r3, #255	; 0xff
 8002050:	d801      	bhi.n	8002056 <HAL_GPIO_Init+0x13a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	e001      	b.n	800205a <HAL_GPIO_Init+0x13e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2bff      	cmp	r3, #255	; 0xff
 8002060:	d802      	bhi.n	8002068 <HAL_GPIO_Init+0x14c>
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x152>
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	3b08      	subs	r3, #8
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	210f      	movs	r1, #15
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	6a39      	ldr	r1, [r7, #32]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	431a      	orrs	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80b1 	beq.w	80021fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800209c:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_GPIO_Init+0x2b8>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x2b8>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_GPIO_Init+0x2b8>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020b4:	4a48      	ldr	r2, [pc, #288]	; (80021d8 <HAL_GPIO_Init+0x2bc>)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a40      	ldr	r2, [pc, #256]	; (80021dc <HAL_GPIO_Init+0x2c0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_GPIO_Init+0x1ec>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3f      	ldr	r2, [pc, #252]	; (80021e0 <HAL_GPIO_Init+0x2c4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00d      	beq.n	8002104 <HAL_GPIO_Init+0x1e8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3e      	ldr	r2, [pc, #248]	; (80021e4 <HAL_GPIO_Init+0x2c8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <HAL_GPIO_Init+0x1e4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3d      	ldr	r2, [pc, #244]	; (80021e8 <HAL_GPIO_Init+0x2cc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_GPIO_Init+0x1e0>
 80020f8:	2303      	movs	r3, #3
 80020fa:	e006      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e004      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 8002100:	2302      	movs	r3, #2
 8002102:	e002      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 8002108:	2300      	movs	r3, #0
 800210a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210c:	f002 0203 	and.w	r2, r2, #3
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	4093      	lsls	r3, r2
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800211a:	492f      	ldr	r1, [pc, #188]	; (80021d8 <HAL_GPIO_Init+0x2bc>)
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002134:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	492c      	ldr	r1, [pc, #176]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	4928      	ldr	r1, [pc, #160]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800214c:	4013      	ands	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4922      	ldr	r1, [pc, #136]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	491e      	ldr	r1, [pc, #120]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002174:	4013      	ands	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	4918      	ldr	r1, [pc, #96]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	43db      	mvns	r3, r3
 800219a:	4914      	ldr	r1, [pc, #80]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800219c:	4013      	ands	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d021      	beq.n	80021f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	490e      	ldr	r1, [pc, #56]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60cb      	str	r3, [r1, #12]
 80021b8:	e021      	b.n	80021fe <HAL_GPIO_Init+0x2e2>
 80021ba:	bf00      	nop
 80021bc:	10320000 	.word	0x10320000
 80021c0:	10310000 	.word	0x10310000
 80021c4:	10220000 	.word	0x10220000
 80021c8:	10210000 	.word	0x10210000
 80021cc:	10120000 	.word	0x10120000
 80021d0:	10110000 	.word	0x10110000
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40010800 	.word	0x40010800
 80021e0:	40010c00 	.word	0x40010c00
 80021e4:	40011000 	.word	0x40011000
 80021e8:	40011400 	.word	0x40011400
 80021ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_GPIO_Init+0x304>)
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	4909      	ldr	r1, [pc, #36]	; (8002220 <HAL_GPIO_Init+0x304>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	3301      	adds	r3, #1
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	f47f ae8e 	bne.w	8001f30 <HAL_GPIO_Init+0x14>
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	372c      	adds	r7, #44	; 0x2c
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e001      	b.n	8002246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	807b      	strh	r3, [r7, #2]
 800225e:	4613      	mov	r3, r2
 8002260:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002262:	787b      	ldrb	r3, [r7, #1]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002268:	887a      	ldrh	r2, [r7, #2]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800226e:	e003      	b.n	8002278 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	041a      	lsls	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	611a      	str	r2, [r3, #16]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
	...

08002284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e26c      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8087 	beq.w	80023b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a4:	4b92      	ldr	r3, [pc, #584]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d00c      	beq.n	80022ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b0:	4b8f      	ldr	r3, [pc, #572]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d112      	bne.n	80022e2 <HAL_RCC_OscConfig+0x5e>
 80022bc:	4b8c      	ldr	r3, [pc, #560]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c8:	d10b      	bne.n	80022e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ca:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d06c      	beq.n	80023b0 <HAL_RCC_OscConfig+0x12c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d168      	bne.n	80023b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e246      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x76>
 80022ec:	4b80      	ldr	r3, [pc, #512]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a7f      	ldr	r2, [pc, #508]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e02e      	b.n	8002358 <HAL_RCC_OscConfig+0xd4>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x98>
 8002302:	4b7b      	ldr	r3, [pc, #492]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7a      	ldr	r2, [pc, #488]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b78      	ldr	r3, [pc, #480]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a77      	ldr	r2, [pc, #476]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e01d      	b.n	8002358 <HAL_RCC_OscConfig+0xd4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0xbc>
 8002326:	4b72      	ldr	r3, [pc, #456]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a71      	ldr	r2, [pc, #452]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a6e      	ldr	r2, [pc, #440]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e00b      	b.n	8002358 <HAL_RCC_OscConfig+0xd4>
 8002340:	4b6b      	ldr	r3, [pc, #428]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b68      	ldr	r3, [pc, #416]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a67      	ldr	r2, [pc, #412]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7ff fc14 	bl	8001b8c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff fc10 	bl	8001b8c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1fa      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0xe4>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff fc00 	bl	8001b8c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff fbfc 	bl	8001b8c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1e6      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x10c>
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d063      	beq.n	8002486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023be:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ca:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d11c      	bne.n	8002410 <HAL_RCC_OscConfig+0x18c>
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d116      	bne.n	8002410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_RCC_OscConfig+0x176>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e1ba      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4939      	ldr	r1, [pc, #228]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	e03a      	b.n	8002486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002418:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_RCC_OscConfig+0x270>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7ff fbb5 	bl	8001b8c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002426:	f7ff fbb1 	bl	8001b8c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e19b      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4927      	ldr	r1, [pc, #156]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]
 8002458:	e015      	b.n	8002486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCC_OscConfig+0x270>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff fb94 	bl	8001b8c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002468:	f7ff fb90 	bl	8001b8c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e17a      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d03a      	beq.n	8002508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d019      	beq.n	80024ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <HAL_RCC_OscConfig+0x274>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a0:	f7ff fb74 	bl	8001b8c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a8:	f7ff fb70 	bl	8001b8c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e15a      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f000 fad8 	bl	8002a7c <RCC_Delay>
 80024cc:	e01c      	b.n	8002508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_RCC_OscConfig+0x274>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d4:	f7ff fb5a 	bl	8001b8c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024da:	e00f      	b.n	80024fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024dc:	f7ff fb56 	bl	8001b8c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d908      	bls.n	80024fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e140      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	42420000 	.word	0x42420000
 80024f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fc:	4b9e      	ldr	r3, [pc, #632]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e9      	bne.n	80024dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80a6 	beq.w	8002662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251a:	4b97      	ldr	r3, [pc, #604]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b94      	ldr	r3, [pc, #592]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a93      	ldr	r2, [pc, #588]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]
 8002532:	4b91      	ldr	r3, [pc, #580]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002542:	4b8e      	ldr	r3, [pc, #568]	; (800277c <HAL_RCC_OscConfig+0x4f8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254e:	4b8b      	ldr	r3, [pc, #556]	; (800277c <HAL_RCC_OscConfig+0x4f8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a8a      	ldr	r2, [pc, #552]	; (800277c <HAL_RCC_OscConfig+0x4f8>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7ff fb17 	bl	8001b8c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7ff fb13 	bl	8001b8c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	; 0x64
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0fd      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_RCC_OscConfig+0x4f8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x312>
 8002588:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a7a      	ldr	r2, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	e02d      	b.n	80025f2 <HAL_RCC_OscConfig+0x36e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x334>
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a75      	ldr	r2, [pc, #468]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	4b73      	ldr	r3, [pc, #460]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a72      	ldr	r2, [pc, #456]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6213      	str	r3, [r2, #32]
 80025b6:	e01c      	b.n	80025f2 <HAL_RCC_OscConfig+0x36e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d10c      	bne.n	80025da <HAL_RCC_OscConfig+0x356>
 80025c0:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4a6c      	ldr	r2, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a69      	ldr	r2, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6213      	str	r3, [r2, #32]
 80025d8:	e00b      	b.n	80025f2 <HAL_RCC_OscConfig+0x36e>
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a66      	ldr	r2, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6213      	str	r3, [r2, #32]
 80025e6:	4b64      	ldr	r3, [pc, #400]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a63      	ldr	r2, [pc, #396]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d015      	beq.n	8002626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7ff fac7 	bl	8001b8c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7ff fac3 	bl	8001b8c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0ab      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	4b57      	ldr	r3, [pc, #348]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ee      	beq.n	8002602 <HAL_RCC_OscConfig+0x37e>
 8002624:	e014      	b.n	8002650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7ff fab1 	bl	8001b8c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7ff faad 	bl	8001b8c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e095      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ee      	bne.n	800262e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b48      	ldr	r3, [pc, #288]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4a47      	ldr	r2, [pc, #284]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8081 	beq.w	800276e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800266c:	4b42      	ldr	r3, [pc, #264]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d061      	beq.n	800273c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d146      	bne.n	800270e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCC_OscConfig+0x4fc>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff fa81 	bl	8001b8c <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7ff fa7d 	bl	8001b8c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e067      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a0:	4b35      	ldr	r3, [pc, #212]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b4:	d108      	bne.n	80026c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026b6:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	492d      	ldr	r1, [pc, #180]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a19      	ldr	r1, [r3, #32]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	430b      	orrs	r3, r1
 80026da:	4927      	ldr	r1, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_OscConfig+0x4fc>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7ff fa51 	bl	8001b8c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7ff fa4d 	bl	8001b8c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e037      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x46a>
 800270c:	e02f      	b.n	800276e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_RCC_OscConfig+0x4fc>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff fa3a 	bl	8001b8c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7ff fa36 	bl	8001b8c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e020      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x498>
 800273a:	e018      	b.n	800276e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e013      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	429a      	cmp	r2, r3
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d001      	beq.n	800276e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
 8002780:	42420060 	.word	0x42420060

08002784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0d0      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002798:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d910      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4965      	ldr	r1, [pc, #404]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0b8      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	494d      	ldr	r1, [pc, #308]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d040      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d115      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07f      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e073      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06b      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002862:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 0203 	bic.w	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4936      	ldr	r1, [pc, #216]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002874:	f7ff f98a 	bl	8001b8c <HAL_GetTick>
 8002878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	e00a      	b.n	8002892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287c:	f7ff f986 	bl	8001b8c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	; 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e053      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 020c 	and.w	r2, r3, #12
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d1eb      	bne.n	800287c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d210      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	4922      	ldr	r1, [pc, #136]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e032      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4916      	ldr	r1, [pc, #88]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002912:	f000 f821 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002916:	4602      	mov	r2, r0
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	490a      	ldr	r1, [pc, #40]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	5ccb      	ldrb	r3, [r1, r3]
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1cc>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1d0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f8e8 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40022000 	.word	0x40022000
 8002948:	40021000 	.word	0x40021000
 800294c:	08004c3c 	.word	0x08004c3c
 8002950:	20000030 	.word	0x20000030
 8002954:	20000034 	.word	0x20000034

08002958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b490      	push	{r4, r7}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800295e:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002960:	1d3c      	adds	r4, r7, #4
 8002962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002968:	f240 2301 	movw	r3, #513	; 0x201
 800296c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d002      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x40>
 8002992:	2b08      	cmp	r3, #8
 8002994:	d003      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x46>
 8002996:	e02d      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299a:	623b      	str	r3, [r7, #32]
      break;
 800299c:	e02d      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	0c9b      	lsrs	r3, r3, #18
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029aa:	4413      	add	r3, r2
 80029ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d013      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	0c5b      	lsrs	r3, r3, #17
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ca:	4413      	add	r3, r2
 80029cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d6:	fb02 f203 	mul.w	r2, r2, r3
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
 80029e2:	e004      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	623b      	str	r3, [r7, #32]
      break;
 80029f2:	e002      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f6:	623b      	str	r3, [r7, #32]
      break;
 80029f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fa:	6a3b      	ldr	r3, [r7, #32]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc90      	pop	{r4, r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	08004c2c 	.word	0x08004c2c
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	007a1200 	.word	0x007a1200
 8002a14:	003d0900 	.word	0x003d0900

08002a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b02      	ldr	r3, [pc, #8]	; (8002a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	20000030 	.word	0x20000030

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a30:	f7ff fff2 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4903      	ldr	r1, [pc, #12]	; (8002a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	08004c4c 	.word	0x08004c4c

08002a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a58:	f7ff ffde 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	0adb      	lsrs	r3, r3, #11
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	; (8002a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08004c4c 	.word	0x08004c4c

08002a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <RCC_Delay+0x34>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <RCC_Delay+0x38>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0a5b      	lsrs	r3, r3, #9
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a98:	bf00      	nop
  }
  while (Delay --);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	60fa      	str	r2, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f9      	bne.n	8002a98 <RCC_Delay+0x1c>
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20000030 	.word	0x20000030
 8002ab4:	10624dd3 	.word	0x10624dd3

08002ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e041      	b.n	8002b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe fd96 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f000 fc28 	bl	800334c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d001      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e03a      	b.n	8002be6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <HAL_TIM_Base_Start_IT+0x98>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x58>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9a:	d009      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x58>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x58>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d111      	bne.n	8002bd4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d010      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	e007      	b.n	8002be4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800

08002bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e041      	b.n	8002c92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f839 	bl	8002c9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f000 fb86 	bl	800334c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_TIM_PWM_Start+0x24>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e022      	b.n	8002d16 <HAL_TIM_PWM_Start+0x6a>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d109      	bne.n	8002cea <HAL_TIM_PWM_Start+0x3e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	bf14      	ite	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	2300      	moveq	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e015      	b.n	8002d16 <HAL_TIM_PWM_Start+0x6a>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d109      	bne.n	8002d04 <HAL_TIM_PWM_Start+0x58>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	bf14      	ite	ne
 8002cfc:	2301      	movne	r3, #1
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e008      	b.n	8002d16 <HAL_TIM_PWM_Start+0x6a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e05e      	b.n	8002ddc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x82>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d2c:	e013      	b.n	8002d56 <HAL_TIM_PWM_Start+0xaa>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_PWM_Start+0x92>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d3c:	e00b      	b.n	8002d56 <HAL_TIM_PWM_Start+0xaa>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_PWM_Start+0xa2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d4c:	e003      	b.n	8002d56 <HAL_TIM_PWM_Start+0xaa>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	6839      	ldr	r1, [r7, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fd74 	bl	800384c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <HAL_TIM_PWM_Start+0x138>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d107      	bne.n	8002d7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <HAL_TIM_PWM_Start+0x138>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <HAL_TIM_PWM_Start+0xfa>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d009      	beq.n	8002da6 <HAL_TIM_PWM_Start+0xfa>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <HAL_TIM_PWM_Start+0x13c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_TIM_PWM_Start+0xfa>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a12      	ldr	r2, [pc, #72]	; (8002dec <HAL_TIM_PWM_Start+0x140>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d111      	bne.n	8002dca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	d010      	beq.n	8002dda <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc8:	e007      	b.n	8002dda <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0201 	orr.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800

08002df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0202 	mvn.w	r2, #2
 8002e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa6f 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa62 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fa71 	bl	8003328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0204 	mvn.w	r2, #4
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fa45 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa38 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fa47 	bl	8003328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0208 	mvn.w	r2, #8
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2204      	movs	r2, #4
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fa1b 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa0e 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fa1d 	bl	8003328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0210 	mvn.w	r2, #16
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9f1 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9e4 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9f3 	bl	8003328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0201 	mvn.w	r2, #1
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fe f962 	bl	8001238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	2b80      	cmp	r3, #128	; 0x80
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fce1 	bl	8003962 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f9b7 	bl	800333a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0220 	mvn.w	r2, #32
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fcac 	bl	8003950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003016:	2302      	movs	r3, #2
 8003018:	e0ac      	b.n	8003174 <HAL_TIM_PWM_ConfigChannel+0x174>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b0c      	cmp	r3, #12
 8003026:	f200 809f 	bhi.w	8003168 <HAL_TIM_PWM_ConfigChannel+0x168>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003065 	.word	0x08003065
 8003034:	08003169 	.word	0x08003169
 8003038:	08003169 	.word	0x08003169
 800303c:	08003169 	.word	0x08003169
 8003040:	080030a5 	.word	0x080030a5
 8003044:	08003169 	.word	0x08003169
 8003048:	08003169 	.word	0x08003169
 800304c:	08003169 	.word	0x08003169
 8003050:	080030e7 	.word	0x080030e7
 8003054:	08003169 	.word	0x08003169
 8003058:	08003169 	.word	0x08003169
 800305c:	08003169 	.word	0x08003169
 8003060:	08003127 	.word	0x08003127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f9d0 	bl	8003410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0208 	orr.w	r2, r2, #8
 800307e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6999      	ldr	r1, [r3, #24]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	619a      	str	r2, [r3, #24]
      break;
 80030a2:	e062      	b.n	800316a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fa16 	bl	80034dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6999      	ldr	r1, [r3, #24]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	021a      	lsls	r2, r3, #8
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	619a      	str	r2, [r3, #24]
      break;
 80030e4:	e041      	b.n	800316a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fa5f 	bl	80035b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0208 	orr.w	r2, r2, #8
 8003100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0204 	bic.w	r2, r2, #4
 8003110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69d9      	ldr	r1, [r3, #28]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	61da      	str	r2, [r3, #28]
      break;
 8003124:	e021      	b.n	800316a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 faa9 	bl	8003684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69d9      	ldr	r1, [r3, #28]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	021a      	lsls	r2, r3, #8
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	61da      	str	r2, [r3, #28]
      break;
 8003166:	e000      	b.n	800316a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003168:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIM_ConfigClockSource+0x18>
 8003190:	2302      	movs	r3, #2
 8003192:	e0b3      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x180>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d03e      	beq.n	800324c <HAL_TIM_ConfigClockSource+0xd0>
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	f200 8087 	bhi.w	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	f000 8085 	beq.w	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d87f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d01a      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xa2>
 80031e8:	2b70      	cmp	r3, #112	; 0x70
 80031ea:	d87b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d050      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x116>
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d877      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031f4:	2b50      	cmp	r3, #80	; 0x50
 80031f6:	d03c      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0xf6>
 80031f8:	2b50      	cmp	r3, #80	; 0x50
 80031fa:	d873      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d058      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x136>
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d86f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d064      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x156>
 8003208:	2b30      	cmp	r3, #48	; 0x30
 800320a:	d86b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d060      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x156>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d867      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05c      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x156>
 8003218:	2b10      	cmp	r3, #16
 800321a:	d05a      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800321c:	e062      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f000 faee 	bl	800380e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003240:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	609a      	str	r2, [r3, #8]
      break;
 800324a:	e04e      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f000 fad7 	bl	800380e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326e:	609a      	str	r2, [r3, #8]
      break;
 8003270:	e03b      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f000 fa4e 	bl	8003720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2150      	movs	r1, #80	; 0x50
 800328a:	4618      	mov	r0, r3
 800328c:	f000 faa5 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 8003290:	e02b      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 fa6c 	bl	800377c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2160      	movs	r1, #96	; 0x60
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fa95 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 80032b0:	e01b      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	461a      	mov	r2, r3
 80032c0:	f000 fa2e 	bl	8003720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2140      	movs	r1, #64	; 0x40
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fa85 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 80032d0:	e00b      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f000 fa7c 	bl	80037da <TIM_ITRx_SetConfig>
        break;
 80032e2:	e002      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032e4:	bf00      	nop
 80032e6:	e000      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <TIM_Base_SetConfig+0xb8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00b      	beq.n	800337c <TIM_Base_SetConfig+0x30>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d007      	beq.n	800337c <TIM_Base_SetConfig+0x30>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a26      	ldr	r2, [pc, #152]	; (8003408 <TIM_Base_SetConfig+0xbc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0x30>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a25      	ldr	r2, [pc, #148]	; (800340c <TIM_Base_SetConfig+0xc0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d108      	bne.n	800338e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <TIM_Base_SetConfig+0xb8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00b      	beq.n	80033ae <TIM_Base_SetConfig+0x62>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339c:	d007      	beq.n	80033ae <TIM_Base_SetConfig+0x62>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a19      	ldr	r2, [pc, #100]	; (8003408 <TIM_Base_SetConfig+0xbc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <TIM_Base_SetConfig+0x62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a18      	ldr	r2, [pc, #96]	; (800340c <TIM_Base_SetConfig+0xc0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a07      	ldr	r2, [pc, #28]	; (8003404 <TIM_Base_SetConfig+0xb8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d103      	bne.n	80033f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	615a      	str	r2, [r3, #20]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800

08003410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f023 0302 	bic.w	r3, r3, #2
 8003458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <TIM_OC1_SetConfig+0xc8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10c      	bne.n	8003486 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0308 	bic.w	r3, r3, #8
 8003472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <TIM_OC1_SetConfig+0xc8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d111      	bne.n	80034b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	621a      	str	r2, [r3, #32]
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40012c00 	.word	0x40012c00

080034dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f023 0210 	bic.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 0320 	bic.w	r3, r3, #32
 8003526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <TIM_OC2_SetConfig+0xd0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d10d      	bne.n	8003558 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a14      	ldr	r2, [pc, #80]	; (80035ac <TIM_OC2_SetConfig+0xd0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d113      	bne.n	8003588 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800356e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	40012c00 	.word	0x40012c00

080035b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <TIM_OC3_SetConfig+0xd0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10d      	bne.n	800362a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <TIM_OC3_SetConfig+0xd0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d113      	bne.n	800365a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	621a      	str	r2, [r3, #32]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40012c00 	.word	0x40012c00

08003684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	031b      	lsls	r3, r3, #12
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0f      	ldr	r2, [pc, #60]	; (800371c <TIM_OC4_SetConfig+0x98>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d109      	bne.n	80036f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	019b      	lsls	r3, r3, #6
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	40012c00 	.word	0x40012c00

08003720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f023 0201 	bic.w	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800374a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f023 030a 	bic.w	r3, r3, #10
 800375c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f023 0210 	bic.w	r2, r3, #16
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	031b      	lsls	r3, r3, #12
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f043 0307 	orr.w	r3, r3, #7
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	609a      	str	r2, [r3, #8]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800380e:	b480      	push	{r7}
 8003810:	b087      	sub	sp, #28
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003828:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	021a      	lsls	r2, r3, #8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	431a      	orrs	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	609a      	str	r2, [r3, #8]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2201      	movs	r2, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	43db      	mvns	r3, r3
 800386e:	401a      	ands	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e046      	b.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a16      	ldr	r2, [pc, #88]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f8:	d009      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a10      	ldr	r2, [pc, #64]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10c      	bne.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4313      	orrs	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800

08003950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e03f      	b.n	8003a06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fea2 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	; 0x24
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fc25 	bl	8004208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b08a      	sub	sp, #40	; 0x28
 8003a12:	af02      	add	r7, sp, #8
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d17c      	bne.n	8003b28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_UART_Transmit+0x2c>
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e075      	b.n	8003b2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Transmit+0x3e>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e06e      	b.n	8003b2a <HAL_UART_Transmit+0x11c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2221      	movs	r2, #33	; 0x21
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a62:	f7fe f893 	bl	8001b8c <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7c:	d108      	bne.n	8003a90 <HAL_UART_Transmit+0x82>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e003      	b.n	8003a98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003aa0:	e02a      	b.n	8003af8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fa11 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e036      	b.n	8003b2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	e007      	b.n	8003aea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1cf      	bne.n	8003aa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2140      	movs	r1, #64	; 0x40
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f9e1 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e006      	b.n	8003b2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10d      	bne.n	8003b86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_UART_IRQHandler+0x52>
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa99 	bl	80040b6 <UART_Receive_IT>
      return;
 8003b84:	e17b      	b.n	8003e7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80b1 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x1bc>
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x70>
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80a6 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x90>
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_UART_IRQHandler+0xb0>
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f043 0202 	orr.w	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_UART_IRQHandler+0xd0>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f043 0204 	orr.w	r2, r3, #4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00f      	beq.n	8003c2e <HAL_UART_IRQHandler+0xfa>
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d104      	bne.n	8003c22 <HAL_UART_IRQHandler+0xee>
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f043 0208 	orr.w	r2, r3, #8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 811e 	beq.w	8003e74 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <HAL_UART_IRQHandler+0x11e>
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fa32 	bl	80040b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_UART_IRQHandler+0x146>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d031      	beq.n	8003cde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f974 	bl	8003f68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d023      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d013      	beq.n	8003cce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	4a76      	ldr	r2, [pc, #472]	; (8003e84 <HAL_UART_IRQHandler+0x350>)
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe f8bc 	bl	8001e30 <HAL_DMA_Abort_IT>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d016      	beq.n	8003cec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	e00e      	b.n	8003cec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f8ec 	bl	8003eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd4:	e00a      	b.n	8003cec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8e8 	bl	8003eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	e006      	b.n	8003cec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8e4 	bl	8003eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cea:	e0c3      	b.n	8003e74 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	bf00      	nop
    return;
 8003cee:	e0c1      	b.n	8003e74 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	f040 80a1 	bne.w	8003e3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 809b 	beq.w	8003e3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8095 	beq.w	8003e3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d04e      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d40:	8a3b      	ldrh	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8098 	beq.w	8003e78 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d4c:	8a3a      	ldrh	r2, [r7, #16]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	f080 8092 	bcs.w	8003e78 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8a3a      	ldrh	r2, [r7, #16]
 8003d58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d02b      	beq.n	8003dbc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0210 	bic.w	r2, r2, #16
 8003db0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd ffff 	bl	8001dba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f876 	bl	8003ebe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003dd2:	e051      	b.n	8003e78 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d047      	beq.n	8003e7c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003dec:	8a7b      	ldrh	r3, [r7, #18]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d044      	beq.n	8003e7c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0210 	bic.w	r2, r2, #16
 8003e2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e30:	8a7b      	ldrh	r3, [r7, #18]
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f842 	bl	8003ebe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e3a:	e01f      	b.n	8003e7c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_UART_IRQHandler+0x324>
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f8c9 	bl	8003fe8 <UART_Transmit_IT>
    return;
 8003e56:	e012      	b.n	8003e7e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <HAL_UART_IRQHandler+0x34a>
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f90a 	bl	8004086 <UART_EndTransmit_IT>
    return;
 8003e72:	e004      	b.n	8003e7e <HAL_UART_IRQHandler+0x34a>
    return;
 8003e74:	bf00      	nop
 8003e76:	e002      	b.n	8003e7e <HAL_UART_IRQHandler+0x34a>
      return;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_IRQHandler+0x34a>
      return;
 8003e7c:	bf00      	nop
  }
}
 8003e7e:	3728      	adds	r7, #40	; 0x28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	08003fc1 	.word	0x08003fc1

08003e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr

08003e9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee4:	e02c      	b.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d028      	beq.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef4:	f7fd fe4a 	bl	8001b8c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d21d      	bcs.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e00f      	b.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d0c3      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0210 	bic.w	r2, r2, #16
 8003fa6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff ff66 	bl	8003eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b21      	cmp	r3, #33	; 0x21
 8003ffa:	d13e      	bne.n	800407a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d114      	bne.n	8004030 <UART_Transmit_IT+0x48>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d110      	bne.n	8004030 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004022:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	1c9a      	adds	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]
 800402e:	e008      	b.n	8004042 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	1c59      	adds	r1, r3, #1
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6211      	str	r1, [r2, #32]
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4619      	mov	r1, r3
 8004050:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff feee 	bl	8003e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b22      	cmp	r3, #34	; 0x22
 80040c8:	f040 8099 	bne.w	80041fe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d4:	d117      	bne.n	8004106 <UART_Receive_IT+0x50>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d113      	bne.n	8004106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28
 8004104:	e026      	b.n	8004154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004118:	d007      	beq.n	800412a <UART_Receive_IT+0x74>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <UART_Receive_IT+0x82>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	e008      	b.n	800414a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004144:	b2da      	uxtb	r2, r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29b      	uxth	r3, r3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4619      	mov	r1, r3
 8004162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004164:	2b00      	cmp	r3, #0
 8004166:	d148      	bne.n	80041fa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0220 	bic.w	r2, r2, #32
 8004176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d123      	bne.n	80041f0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0210 	bic.w	r2, r2, #16
 80041bc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d10a      	bne.n	80041e2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff fe68 	bl	8003ebe <HAL_UARTEx_RxEventCallback>
 80041ee:	e002      	b.n	80041f6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff fe52 	bl	8003e9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e002      	b.n	8004200 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004242:	f023 030c 	bic.w	r3, r3, #12
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	430b      	orrs	r3, r1
 800424e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2c      	ldr	r2, [pc, #176]	; (800431c <UART_SetConfig+0x114>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d103      	bne.n	8004278 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004270:	f7fe fbf0 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	e002      	b.n	800427e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004278:	f7fe fbd8 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 800427c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	009a      	lsls	r2, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	4a22      	ldr	r2, [pc, #136]	; (8004320 <UART_SetConfig+0x118>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	0119      	lsls	r1, r3, #4
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009a      	lsls	r2, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b4:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <UART_SetConfig+0x118>)
 80042b6:	fba3 0302 	umull	r0, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2064      	movs	r0, #100	; 0x64
 80042be:	fb00 f303 	mul.w	r3, r0, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	3332      	adds	r3, #50	; 0x32
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <UART_SetConfig+0x118>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d4:	4419      	add	r1, r3
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009a      	lsls	r2, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <UART_SetConfig+0x118>)
 80042ee:	fba3 0302 	umull	r0, r3, r3, r2
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	2064      	movs	r0, #100	; 0x64
 80042f6:	fb00 f303 	mul.w	r3, r0, r3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	3332      	adds	r3, #50	; 0x32
 8004300:	4a07      	ldr	r2, [pc, #28]	; (8004320 <UART_SetConfig+0x118>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	f003 020f 	and.w	r2, r3, #15
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	440a      	add	r2, r1
 8004312:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40013800 	.word	0x40013800
 8004320:	51eb851f 	.word	0x51eb851f

08004324 <__errno>:
 8004324:	4b01      	ldr	r3, [pc, #4]	; (800432c <__errno+0x8>)
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	2000003c 	.word	0x2000003c

08004330 <__libc_init_array>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	2600      	movs	r6, #0
 8004334:	4d0c      	ldr	r5, [pc, #48]	; (8004368 <__libc_init_array+0x38>)
 8004336:	4c0d      	ldr	r4, [pc, #52]	; (800436c <__libc_init_array+0x3c>)
 8004338:	1b64      	subs	r4, r4, r5
 800433a:	10a4      	asrs	r4, r4, #2
 800433c:	42a6      	cmp	r6, r4
 800433e:	d109      	bne.n	8004354 <__libc_init_array+0x24>
 8004340:	f000 fc5c 	bl	8004bfc <_init>
 8004344:	2600      	movs	r6, #0
 8004346:	4d0a      	ldr	r5, [pc, #40]	; (8004370 <__libc_init_array+0x40>)
 8004348:	4c0a      	ldr	r4, [pc, #40]	; (8004374 <__libc_init_array+0x44>)
 800434a:	1b64      	subs	r4, r4, r5
 800434c:	10a4      	asrs	r4, r4, #2
 800434e:	42a6      	cmp	r6, r4
 8004350:	d105      	bne.n	800435e <__libc_init_array+0x2e>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	f855 3b04 	ldr.w	r3, [r5], #4
 8004358:	4798      	blx	r3
 800435a:	3601      	adds	r6, #1
 800435c:	e7ee      	b.n	800433c <__libc_init_array+0xc>
 800435e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004362:	4798      	blx	r3
 8004364:	3601      	adds	r6, #1
 8004366:	e7f2      	b.n	800434e <__libc_init_array+0x1e>
 8004368:	08004c88 	.word	0x08004c88
 800436c:	08004c88 	.word	0x08004c88
 8004370:	08004c88 	.word	0x08004c88
 8004374:	08004c8c 	.word	0x08004c8c

08004378 <memset>:
 8004378:	4603      	mov	r3, r0
 800437a:	4402      	add	r2, r0
 800437c:	4293      	cmp	r3, r2
 800437e:	d100      	bne.n	8004382 <memset+0xa>
 8004380:	4770      	bx	lr
 8004382:	f803 1b01 	strb.w	r1, [r3], #1
 8004386:	e7f9      	b.n	800437c <memset+0x4>

08004388 <siprintf>:
 8004388:	b40e      	push	{r1, r2, r3}
 800438a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800438e:	b500      	push	{lr}
 8004390:	b09c      	sub	sp, #112	; 0x70
 8004392:	ab1d      	add	r3, sp, #116	; 0x74
 8004394:	9002      	str	r0, [sp, #8]
 8004396:	9006      	str	r0, [sp, #24]
 8004398:	9107      	str	r1, [sp, #28]
 800439a:	9104      	str	r1, [sp, #16]
 800439c:	4808      	ldr	r0, [pc, #32]	; (80043c0 <siprintf+0x38>)
 800439e:	4909      	ldr	r1, [pc, #36]	; (80043c4 <siprintf+0x3c>)
 80043a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043a4:	9105      	str	r1, [sp, #20]
 80043a6:	6800      	ldr	r0, [r0, #0]
 80043a8:	a902      	add	r1, sp, #8
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	f000 f868 	bl	8004480 <_svfiprintf_r>
 80043b0:	2200      	movs	r2, #0
 80043b2:	9b02      	ldr	r3, [sp, #8]
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	b01c      	add	sp, #112	; 0x70
 80043b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043bc:	b003      	add	sp, #12
 80043be:	4770      	bx	lr
 80043c0:	2000003c 	.word	0x2000003c
 80043c4:	ffff0208 	.word	0xffff0208

080043c8 <__ssputs_r>:
 80043c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043cc:	688e      	ldr	r6, [r1, #8]
 80043ce:	4682      	mov	sl, r0
 80043d0:	429e      	cmp	r6, r3
 80043d2:	460c      	mov	r4, r1
 80043d4:	4690      	mov	r8, r2
 80043d6:	461f      	mov	r7, r3
 80043d8:	d838      	bhi.n	800444c <__ssputs_r+0x84>
 80043da:	898a      	ldrh	r2, [r1, #12]
 80043dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043e0:	d032      	beq.n	8004448 <__ssputs_r+0x80>
 80043e2:	6825      	ldr	r5, [r4, #0]
 80043e4:	6909      	ldr	r1, [r1, #16]
 80043e6:	3301      	adds	r3, #1
 80043e8:	eba5 0901 	sub.w	r9, r5, r1
 80043ec:	6965      	ldr	r5, [r4, #20]
 80043ee:	444b      	add	r3, r9
 80043f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043f8:	106d      	asrs	r5, r5, #1
 80043fa:	429d      	cmp	r5, r3
 80043fc:	bf38      	it	cc
 80043fe:	461d      	movcc	r5, r3
 8004400:	0553      	lsls	r3, r2, #21
 8004402:	d531      	bpl.n	8004468 <__ssputs_r+0xa0>
 8004404:	4629      	mov	r1, r5
 8004406:	f000 fb53 	bl	8004ab0 <_malloc_r>
 800440a:	4606      	mov	r6, r0
 800440c:	b950      	cbnz	r0, 8004424 <__ssputs_r+0x5c>
 800440e:	230c      	movs	r3, #12
 8004410:	f04f 30ff 	mov.w	r0, #4294967295
 8004414:	f8ca 3000 	str.w	r3, [sl]
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800441e:	81a3      	strh	r3, [r4, #12]
 8004420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004424:	464a      	mov	r2, r9
 8004426:	6921      	ldr	r1, [r4, #16]
 8004428:	f000 face 	bl	80049c8 <memcpy>
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004436:	81a3      	strh	r3, [r4, #12]
 8004438:	6126      	str	r6, [r4, #16]
 800443a:	444e      	add	r6, r9
 800443c:	6026      	str	r6, [r4, #0]
 800443e:	463e      	mov	r6, r7
 8004440:	6165      	str	r5, [r4, #20]
 8004442:	eba5 0509 	sub.w	r5, r5, r9
 8004446:	60a5      	str	r5, [r4, #8]
 8004448:	42be      	cmp	r6, r7
 800444a:	d900      	bls.n	800444e <__ssputs_r+0x86>
 800444c:	463e      	mov	r6, r7
 800444e:	4632      	mov	r2, r6
 8004450:	4641      	mov	r1, r8
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	f000 fac6 	bl	80049e4 <memmove>
 8004458:	68a3      	ldr	r3, [r4, #8]
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	1b9b      	subs	r3, r3, r6
 800445e:	4432      	add	r2, r6
 8004460:	2000      	movs	r0, #0
 8004462:	60a3      	str	r3, [r4, #8]
 8004464:	6022      	str	r2, [r4, #0]
 8004466:	e7db      	b.n	8004420 <__ssputs_r+0x58>
 8004468:	462a      	mov	r2, r5
 800446a:	f000 fb7b 	bl	8004b64 <_realloc_r>
 800446e:	4606      	mov	r6, r0
 8004470:	2800      	cmp	r0, #0
 8004472:	d1e1      	bne.n	8004438 <__ssputs_r+0x70>
 8004474:	4650      	mov	r0, sl
 8004476:	6921      	ldr	r1, [r4, #16]
 8004478:	f000 face 	bl	8004a18 <_free_r>
 800447c:	e7c7      	b.n	800440e <__ssputs_r+0x46>
	...

08004480 <_svfiprintf_r>:
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	4698      	mov	r8, r3
 8004486:	898b      	ldrh	r3, [r1, #12]
 8004488:	4607      	mov	r7, r0
 800448a:	061b      	lsls	r3, r3, #24
 800448c:	460d      	mov	r5, r1
 800448e:	4614      	mov	r4, r2
 8004490:	b09d      	sub	sp, #116	; 0x74
 8004492:	d50e      	bpl.n	80044b2 <_svfiprintf_r+0x32>
 8004494:	690b      	ldr	r3, [r1, #16]
 8004496:	b963      	cbnz	r3, 80044b2 <_svfiprintf_r+0x32>
 8004498:	2140      	movs	r1, #64	; 0x40
 800449a:	f000 fb09 	bl	8004ab0 <_malloc_r>
 800449e:	6028      	str	r0, [r5, #0]
 80044a0:	6128      	str	r0, [r5, #16]
 80044a2:	b920      	cbnz	r0, 80044ae <_svfiprintf_r+0x2e>
 80044a4:	230c      	movs	r3, #12
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ac:	e0d1      	b.n	8004652 <_svfiprintf_r+0x1d2>
 80044ae:	2340      	movs	r3, #64	; 0x40
 80044b0:	616b      	str	r3, [r5, #20]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9309      	str	r3, [sp, #36]	; 0x24
 80044b6:	2320      	movs	r3, #32
 80044b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044bc:	2330      	movs	r3, #48	; 0x30
 80044be:	f04f 0901 	mov.w	r9, #1
 80044c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800466c <_svfiprintf_r+0x1ec>
 80044ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044ce:	4623      	mov	r3, r4
 80044d0:	469a      	mov	sl, r3
 80044d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044d6:	b10a      	cbz	r2, 80044dc <_svfiprintf_r+0x5c>
 80044d8:	2a25      	cmp	r2, #37	; 0x25
 80044da:	d1f9      	bne.n	80044d0 <_svfiprintf_r+0x50>
 80044dc:	ebba 0b04 	subs.w	fp, sl, r4
 80044e0:	d00b      	beq.n	80044fa <_svfiprintf_r+0x7a>
 80044e2:	465b      	mov	r3, fp
 80044e4:	4622      	mov	r2, r4
 80044e6:	4629      	mov	r1, r5
 80044e8:	4638      	mov	r0, r7
 80044ea:	f7ff ff6d 	bl	80043c8 <__ssputs_r>
 80044ee:	3001      	adds	r0, #1
 80044f0:	f000 80aa 	beq.w	8004648 <_svfiprintf_r+0x1c8>
 80044f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044f6:	445a      	add	r2, fp
 80044f8:	9209      	str	r2, [sp, #36]	; 0x24
 80044fa:	f89a 3000 	ldrb.w	r3, [sl]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80a2 	beq.w	8004648 <_svfiprintf_r+0x1c8>
 8004504:	2300      	movs	r3, #0
 8004506:	f04f 32ff 	mov.w	r2, #4294967295
 800450a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800450e:	f10a 0a01 	add.w	sl, sl, #1
 8004512:	9304      	str	r3, [sp, #16]
 8004514:	9307      	str	r3, [sp, #28]
 8004516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800451a:	931a      	str	r3, [sp, #104]	; 0x68
 800451c:	4654      	mov	r4, sl
 800451e:	2205      	movs	r2, #5
 8004520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004524:	4851      	ldr	r0, [pc, #324]	; (800466c <_svfiprintf_r+0x1ec>)
 8004526:	f000 fa41 	bl	80049ac <memchr>
 800452a:	9a04      	ldr	r2, [sp, #16]
 800452c:	b9d8      	cbnz	r0, 8004566 <_svfiprintf_r+0xe6>
 800452e:	06d0      	lsls	r0, r2, #27
 8004530:	bf44      	itt	mi
 8004532:	2320      	movmi	r3, #32
 8004534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004538:	0711      	lsls	r1, r2, #28
 800453a:	bf44      	itt	mi
 800453c:	232b      	movmi	r3, #43	; 0x2b
 800453e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004542:	f89a 3000 	ldrb.w	r3, [sl]
 8004546:	2b2a      	cmp	r3, #42	; 0x2a
 8004548:	d015      	beq.n	8004576 <_svfiprintf_r+0xf6>
 800454a:	4654      	mov	r4, sl
 800454c:	2000      	movs	r0, #0
 800454e:	f04f 0c0a 	mov.w	ip, #10
 8004552:	9a07      	ldr	r2, [sp, #28]
 8004554:	4621      	mov	r1, r4
 8004556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800455a:	3b30      	subs	r3, #48	; 0x30
 800455c:	2b09      	cmp	r3, #9
 800455e:	d94e      	bls.n	80045fe <_svfiprintf_r+0x17e>
 8004560:	b1b0      	cbz	r0, 8004590 <_svfiprintf_r+0x110>
 8004562:	9207      	str	r2, [sp, #28]
 8004564:	e014      	b.n	8004590 <_svfiprintf_r+0x110>
 8004566:	eba0 0308 	sub.w	r3, r0, r8
 800456a:	fa09 f303 	lsl.w	r3, r9, r3
 800456e:	4313      	orrs	r3, r2
 8004570:	46a2      	mov	sl, r4
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	e7d2      	b.n	800451c <_svfiprintf_r+0x9c>
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	1d19      	adds	r1, r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	9103      	str	r1, [sp, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	bfbb      	ittet	lt
 8004582:	425b      	neglt	r3, r3
 8004584:	f042 0202 	orrlt.w	r2, r2, #2
 8004588:	9307      	strge	r3, [sp, #28]
 800458a:	9307      	strlt	r3, [sp, #28]
 800458c:	bfb8      	it	lt
 800458e:	9204      	strlt	r2, [sp, #16]
 8004590:	7823      	ldrb	r3, [r4, #0]
 8004592:	2b2e      	cmp	r3, #46	; 0x2e
 8004594:	d10c      	bne.n	80045b0 <_svfiprintf_r+0x130>
 8004596:	7863      	ldrb	r3, [r4, #1]
 8004598:	2b2a      	cmp	r3, #42	; 0x2a
 800459a:	d135      	bne.n	8004608 <_svfiprintf_r+0x188>
 800459c:	9b03      	ldr	r3, [sp, #12]
 800459e:	3402      	adds	r4, #2
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	9203      	str	r2, [sp, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bfb8      	it	lt
 80045aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80045ae:	9305      	str	r3, [sp, #20]
 80045b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800467c <_svfiprintf_r+0x1fc>
 80045b4:	2203      	movs	r2, #3
 80045b6:	4650      	mov	r0, sl
 80045b8:	7821      	ldrb	r1, [r4, #0]
 80045ba:	f000 f9f7 	bl	80049ac <memchr>
 80045be:	b140      	cbz	r0, 80045d2 <_svfiprintf_r+0x152>
 80045c0:	2340      	movs	r3, #64	; 0x40
 80045c2:	eba0 000a 	sub.w	r0, r0, sl
 80045c6:	fa03 f000 	lsl.w	r0, r3, r0
 80045ca:	9b04      	ldr	r3, [sp, #16]
 80045cc:	3401      	adds	r4, #1
 80045ce:	4303      	orrs	r3, r0
 80045d0:	9304      	str	r3, [sp, #16]
 80045d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d6:	2206      	movs	r2, #6
 80045d8:	4825      	ldr	r0, [pc, #148]	; (8004670 <_svfiprintf_r+0x1f0>)
 80045da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045de:	f000 f9e5 	bl	80049ac <memchr>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d038      	beq.n	8004658 <_svfiprintf_r+0x1d8>
 80045e6:	4b23      	ldr	r3, [pc, #140]	; (8004674 <_svfiprintf_r+0x1f4>)
 80045e8:	bb1b      	cbnz	r3, 8004632 <_svfiprintf_r+0x1b2>
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	3307      	adds	r3, #7
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	3308      	adds	r3, #8
 80045f4:	9303      	str	r3, [sp, #12]
 80045f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f8:	4433      	add	r3, r6
 80045fa:	9309      	str	r3, [sp, #36]	; 0x24
 80045fc:	e767      	b.n	80044ce <_svfiprintf_r+0x4e>
 80045fe:	460c      	mov	r4, r1
 8004600:	2001      	movs	r0, #1
 8004602:	fb0c 3202 	mla	r2, ip, r2, r3
 8004606:	e7a5      	b.n	8004554 <_svfiprintf_r+0xd4>
 8004608:	2300      	movs	r3, #0
 800460a:	f04f 0c0a 	mov.w	ip, #10
 800460e:	4619      	mov	r1, r3
 8004610:	3401      	adds	r4, #1
 8004612:	9305      	str	r3, [sp, #20]
 8004614:	4620      	mov	r0, r4
 8004616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800461a:	3a30      	subs	r2, #48	; 0x30
 800461c:	2a09      	cmp	r2, #9
 800461e:	d903      	bls.n	8004628 <_svfiprintf_r+0x1a8>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0c5      	beq.n	80045b0 <_svfiprintf_r+0x130>
 8004624:	9105      	str	r1, [sp, #20]
 8004626:	e7c3      	b.n	80045b0 <_svfiprintf_r+0x130>
 8004628:	4604      	mov	r4, r0
 800462a:	2301      	movs	r3, #1
 800462c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004630:	e7f0      	b.n	8004614 <_svfiprintf_r+0x194>
 8004632:	ab03      	add	r3, sp, #12
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	462a      	mov	r2, r5
 8004638:	4638      	mov	r0, r7
 800463a:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <_svfiprintf_r+0x1f8>)
 800463c:	a904      	add	r1, sp, #16
 800463e:	f3af 8000 	nop.w
 8004642:	1c42      	adds	r2, r0, #1
 8004644:	4606      	mov	r6, r0
 8004646:	d1d6      	bne.n	80045f6 <_svfiprintf_r+0x176>
 8004648:	89ab      	ldrh	r3, [r5, #12]
 800464a:	065b      	lsls	r3, r3, #25
 800464c:	f53f af2c 	bmi.w	80044a8 <_svfiprintf_r+0x28>
 8004650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004652:	b01d      	add	sp, #116	; 0x74
 8004654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004658:	ab03      	add	r3, sp, #12
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	462a      	mov	r2, r5
 800465e:	4638      	mov	r0, r7
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <_svfiprintf_r+0x1f8>)
 8004662:	a904      	add	r1, sp, #16
 8004664:	f000 f87c 	bl	8004760 <_printf_i>
 8004668:	e7eb      	b.n	8004642 <_svfiprintf_r+0x1c2>
 800466a:	bf00      	nop
 800466c:	08004c54 	.word	0x08004c54
 8004670:	08004c5e 	.word	0x08004c5e
 8004674:	00000000 	.word	0x00000000
 8004678:	080043c9 	.word	0x080043c9
 800467c:	08004c5a 	.word	0x08004c5a

08004680 <_printf_common>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	4616      	mov	r6, r2
 8004686:	4699      	mov	r9, r3
 8004688:	688a      	ldr	r2, [r1, #8]
 800468a:	690b      	ldr	r3, [r1, #16]
 800468c:	4607      	mov	r7, r0
 800468e:	4293      	cmp	r3, r2
 8004690:	bfb8      	it	lt
 8004692:	4613      	movlt	r3, r2
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800469a:	460c      	mov	r4, r1
 800469c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046a0:	b10a      	cbz	r2, 80046a6 <_printf_common+0x26>
 80046a2:	3301      	adds	r3, #1
 80046a4:	6033      	str	r3, [r6, #0]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	0699      	lsls	r1, r3, #26
 80046aa:	bf42      	ittt	mi
 80046ac:	6833      	ldrmi	r3, [r6, #0]
 80046ae:	3302      	addmi	r3, #2
 80046b0:	6033      	strmi	r3, [r6, #0]
 80046b2:	6825      	ldr	r5, [r4, #0]
 80046b4:	f015 0506 	ands.w	r5, r5, #6
 80046b8:	d106      	bne.n	80046c8 <_printf_common+0x48>
 80046ba:	f104 0a19 	add.w	sl, r4, #25
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	6832      	ldr	r2, [r6, #0]
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	dc28      	bgt.n	800471a <_printf_common+0x9a>
 80046c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046cc:	1e13      	subs	r3, r2, #0
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	bf18      	it	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	0692      	lsls	r2, r2, #26
 80046d6:	d42d      	bmi.n	8004734 <_printf_common+0xb4>
 80046d8:	4649      	mov	r1, r9
 80046da:	4638      	mov	r0, r7
 80046dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046e0:	47c0      	blx	r8
 80046e2:	3001      	adds	r0, #1
 80046e4:	d020      	beq.n	8004728 <_printf_common+0xa8>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	68e5      	ldr	r5, [r4, #12]
 80046ea:	f003 0306 	and.w	r3, r3, #6
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	bf18      	it	ne
 80046f2:	2500      	movne	r5, #0
 80046f4:	6832      	ldr	r2, [r6, #0]
 80046f6:	f04f 0600 	mov.w	r6, #0
 80046fa:	68a3      	ldr	r3, [r4, #8]
 80046fc:	bf08      	it	eq
 80046fe:	1aad      	subeq	r5, r5, r2
 8004700:	6922      	ldr	r2, [r4, #16]
 8004702:	bf08      	it	eq
 8004704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004708:	4293      	cmp	r3, r2
 800470a:	bfc4      	itt	gt
 800470c:	1a9b      	subgt	r3, r3, r2
 800470e:	18ed      	addgt	r5, r5, r3
 8004710:	341a      	adds	r4, #26
 8004712:	42b5      	cmp	r5, r6
 8004714:	d11a      	bne.n	800474c <_printf_common+0xcc>
 8004716:	2000      	movs	r0, #0
 8004718:	e008      	b.n	800472c <_printf_common+0xac>
 800471a:	2301      	movs	r3, #1
 800471c:	4652      	mov	r2, sl
 800471e:	4649      	mov	r1, r9
 8004720:	4638      	mov	r0, r7
 8004722:	47c0      	blx	r8
 8004724:	3001      	adds	r0, #1
 8004726:	d103      	bne.n	8004730 <_printf_common+0xb0>
 8004728:	f04f 30ff 	mov.w	r0, #4294967295
 800472c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004730:	3501      	adds	r5, #1
 8004732:	e7c4      	b.n	80046be <_printf_common+0x3e>
 8004734:	2030      	movs	r0, #48	; 0x30
 8004736:	18e1      	adds	r1, r4, r3
 8004738:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004742:	4422      	add	r2, r4
 8004744:	3302      	adds	r3, #2
 8004746:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800474a:	e7c5      	b.n	80046d8 <_printf_common+0x58>
 800474c:	2301      	movs	r3, #1
 800474e:	4622      	mov	r2, r4
 8004750:	4649      	mov	r1, r9
 8004752:	4638      	mov	r0, r7
 8004754:	47c0      	blx	r8
 8004756:	3001      	adds	r0, #1
 8004758:	d0e6      	beq.n	8004728 <_printf_common+0xa8>
 800475a:	3601      	adds	r6, #1
 800475c:	e7d9      	b.n	8004712 <_printf_common+0x92>
	...

08004760 <_printf_i>:
 8004760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004764:	460c      	mov	r4, r1
 8004766:	7e27      	ldrb	r7, [r4, #24]
 8004768:	4691      	mov	r9, r2
 800476a:	2f78      	cmp	r7, #120	; 0x78
 800476c:	4680      	mov	r8, r0
 800476e:	469a      	mov	sl, r3
 8004770:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004776:	d807      	bhi.n	8004788 <_printf_i+0x28>
 8004778:	2f62      	cmp	r7, #98	; 0x62
 800477a:	d80a      	bhi.n	8004792 <_printf_i+0x32>
 800477c:	2f00      	cmp	r7, #0
 800477e:	f000 80d9 	beq.w	8004934 <_printf_i+0x1d4>
 8004782:	2f58      	cmp	r7, #88	; 0x58
 8004784:	f000 80a4 	beq.w	80048d0 <_printf_i+0x170>
 8004788:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800478c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004790:	e03a      	b.n	8004808 <_printf_i+0xa8>
 8004792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004796:	2b15      	cmp	r3, #21
 8004798:	d8f6      	bhi.n	8004788 <_printf_i+0x28>
 800479a:	a001      	add	r0, pc, #4	; (adr r0, 80047a0 <_printf_i+0x40>)
 800479c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	0800480d 	.word	0x0800480d
 80047a8:	08004789 	.word	0x08004789
 80047ac:	08004789 	.word	0x08004789
 80047b0:	08004789 	.word	0x08004789
 80047b4:	08004789 	.word	0x08004789
 80047b8:	0800480d 	.word	0x0800480d
 80047bc:	08004789 	.word	0x08004789
 80047c0:	08004789 	.word	0x08004789
 80047c4:	08004789 	.word	0x08004789
 80047c8:	08004789 	.word	0x08004789
 80047cc:	0800491b 	.word	0x0800491b
 80047d0:	0800483d 	.word	0x0800483d
 80047d4:	080048fd 	.word	0x080048fd
 80047d8:	08004789 	.word	0x08004789
 80047dc:	08004789 	.word	0x08004789
 80047e0:	0800493d 	.word	0x0800493d
 80047e4:	08004789 	.word	0x08004789
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	08004789 	.word	0x08004789
 80047f0:	08004789 	.word	0x08004789
 80047f4:	08004905 	.word	0x08004905
 80047f8:	680b      	ldr	r3, [r1, #0]
 80047fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047fe:	1d1a      	adds	r2, r3, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	600a      	str	r2, [r1, #0]
 8004804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004808:	2301      	movs	r3, #1
 800480a:	e0a4      	b.n	8004956 <_printf_i+0x1f6>
 800480c:	6825      	ldr	r5, [r4, #0]
 800480e:	6808      	ldr	r0, [r1, #0]
 8004810:	062e      	lsls	r6, r5, #24
 8004812:	f100 0304 	add.w	r3, r0, #4
 8004816:	d50a      	bpl.n	800482e <_printf_i+0xce>
 8004818:	6805      	ldr	r5, [r0, #0]
 800481a:	600b      	str	r3, [r1, #0]
 800481c:	2d00      	cmp	r5, #0
 800481e:	da03      	bge.n	8004828 <_printf_i+0xc8>
 8004820:	232d      	movs	r3, #45	; 0x2d
 8004822:	426d      	negs	r5, r5
 8004824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004828:	230a      	movs	r3, #10
 800482a:	485e      	ldr	r0, [pc, #376]	; (80049a4 <_printf_i+0x244>)
 800482c:	e019      	b.n	8004862 <_printf_i+0x102>
 800482e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004832:	6805      	ldr	r5, [r0, #0]
 8004834:	600b      	str	r3, [r1, #0]
 8004836:	bf18      	it	ne
 8004838:	b22d      	sxthne	r5, r5
 800483a:	e7ef      	b.n	800481c <_printf_i+0xbc>
 800483c:	680b      	ldr	r3, [r1, #0]
 800483e:	6825      	ldr	r5, [r4, #0]
 8004840:	1d18      	adds	r0, r3, #4
 8004842:	6008      	str	r0, [r1, #0]
 8004844:	0628      	lsls	r0, r5, #24
 8004846:	d501      	bpl.n	800484c <_printf_i+0xec>
 8004848:	681d      	ldr	r5, [r3, #0]
 800484a:	e002      	b.n	8004852 <_printf_i+0xf2>
 800484c:	0669      	lsls	r1, r5, #25
 800484e:	d5fb      	bpl.n	8004848 <_printf_i+0xe8>
 8004850:	881d      	ldrh	r5, [r3, #0]
 8004852:	2f6f      	cmp	r7, #111	; 0x6f
 8004854:	bf0c      	ite	eq
 8004856:	2308      	moveq	r3, #8
 8004858:	230a      	movne	r3, #10
 800485a:	4852      	ldr	r0, [pc, #328]	; (80049a4 <_printf_i+0x244>)
 800485c:	2100      	movs	r1, #0
 800485e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004862:	6866      	ldr	r6, [r4, #4]
 8004864:	2e00      	cmp	r6, #0
 8004866:	bfa8      	it	ge
 8004868:	6821      	ldrge	r1, [r4, #0]
 800486a:	60a6      	str	r6, [r4, #8]
 800486c:	bfa4      	itt	ge
 800486e:	f021 0104 	bicge.w	r1, r1, #4
 8004872:	6021      	strge	r1, [r4, #0]
 8004874:	b90d      	cbnz	r5, 800487a <_printf_i+0x11a>
 8004876:	2e00      	cmp	r6, #0
 8004878:	d04d      	beq.n	8004916 <_printf_i+0x1b6>
 800487a:	4616      	mov	r6, r2
 800487c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004880:	fb03 5711 	mls	r7, r3, r1, r5
 8004884:	5dc7      	ldrb	r7, [r0, r7]
 8004886:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800488a:	462f      	mov	r7, r5
 800488c:	42bb      	cmp	r3, r7
 800488e:	460d      	mov	r5, r1
 8004890:	d9f4      	bls.n	800487c <_printf_i+0x11c>
 8004892:	2b08      	cmp	r3, #8
 8004894:	d10b      	bne.n	80048ae <_printf_i+0x14e>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	07df      	lsls	r7, r3, #31
 800489a:	d508      	bpl.n	80048ae <_printf_i+0x14e>
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	6861      	ldr	r1, [r4, #4]
 80048a0:	4299      	cmp	r1, r3
 80048a2:	bfde      	ittt	le
 80048a4:	2330      	movle	r3, #48	; 0x30
 80048a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048ae:	1b92      	subs	r2, r2, r6
 80048b0:	6122      	str	r2, [r4, #16]
 80048b2:	464b      	mov	r3, r9
 80048b4:	4621      	mov	r1, r4
 80048b6:	4640      	mov	r0, r8
 80048b8:	f8cd a000 	str.w	sl, [sp]
 80048bc:	aa03      	add	r2, sp, #12
 80048be:	f7ff fedf 	bl	8004680 <_printf_common>
 80048c2:	3001      	adds	r0, #1
 80048c4:	d14c      	bne.n	8004960 <_printf_i+0x200>
 80048c6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ca:	b004      	add	sp, #16
 80048cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d0:	4834      	ldr	r0, [pc, #208]	; (80049a4 <_printf_i+0x244>)
 80048d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048d6:	680e      	ldr	r6, [r1, #0]
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f856 5b04 	ldr.w	r5, [r6], #4
 80048de:	061f      	lsls	r7, r3, #24
 80048e0:	600e      	str	r6, [r1, #0]
 80048e2:	d514      	bpl.n	800490e <_printf_i+0x1ae>
 80048e4:	07d9      	lsls	r1, r3, #31
 80048e6:	bf44      	itt	mi
 80048e8:	f043 0320 	orrmi.w	r3, r3, #32
 80048ec:	6023      	strmi	r3, [r4, #0]
 80048ee:	b91d      	cbnz	r5, 80048f8 <_printf_i+0x198>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	f023 0320 	bic.w	r3, r3, #32
 80048f6:	6023      	str	r3, [r4, #0]
 80048f8:	2310      	movs	r3, #16
 80048fa:	e7af      	b.n	800485c <_printf_i+0xfc>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	f043 0320 	orr.w	r3, r3, #32
 8004902:	6023      	str	r3, [r4, #0]
 8004904:	2378      	movs	r3, #120	; 0x78
 8004906:	4828      	ldr	r0, [pc, #160]	; (80049a8 <_printf_i+0x248>)
 8004908:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800490c:	e7e3      	b.n	80048d6 <_printf_i+0x176>
 800490e:	065e      	lsls	r6, r3, #25
 8004910:	bf48      	it	mi
 8004912:	b2ad      	uxthmi	r5, r5
 8004914:	e7e6      	b.n	80048e4 <_printf_i+0x184>
 8004916:	4616      	mov	r6, r2
 8004918:	e7bb      	b.n	8004892 <_printf_i+0x132>
 800491a:	680b      	ldr	r3, [r1, #0]
 800491c:	6826      	ldr	r6, [r4, #0]
 800491e:	1d1d      	adds	r5, r3, #4
 8004920:	6960      	ldr	r0, [r4, #20]
 8004922:	600d      	str	r5, [r1, #0]
 8004924:	0635      	lsls	r5, r6, #24
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	d501      	bpl.n	800492e <_printf_i+0x1ce>
 800492a:	6018      	str	r0, [r3, #0]
 800492c:	e002      	b.n	8004934 <_printf_i+0x1d4>
 800492e:	0671      	lsls	r1, r6, #25
 8004930:	d5fb      	bpl.n	800492a <_printf_i+0x1ca>
 8004932:	8018      	strh	r0, [r3, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	4616      	mov	r6, r2
 8004938:	6123      	str	r3, [r4, #16]
 800493a:	e7ba      	b.n	80048b2 <_printf_i+0x152>
 800493c:	680b      	ldr	r3, [r1, #0]
 800493e:	1d1a      	adds	r2, r3, #4
 8004940:	600a      	str	r2, [r1, #0]
 8004942:	681e      	ldr	r6, [r3, #0]
 8004944:	2100      	movs	r1, #0
 8004946:	4630      	mov	r0, r6
 8004948:	6862      	ldr	r2, [r4, #4]
 800494a:	f000 f82f 	bl	80049ac <memchr>
 800494e:	b108      	cbz	r0, 8004954 <_printf_i+0x1f4>
 8004950:	1b80      	subs	r0, r0, r6
 8004952:	6060      	str	r0, [r4, #4]
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	6123      	str	r3, [r4, #16]
 8004958:	2300      	movs	r3, #0
 800495a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495e:	e7a8      	b.n	80048b2 <_printf_i+0x152>
 8004960:	4632      	mov	r2, r6
 8004962:	4649      	mov	r1, r9
 8004964:	4640      	mov	r0, r8
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	47d0      	blx	sl
 800496a:	3001      	adds	r0, #1
 800496c:	d0ab      	beq.n	80048c6 <_printf_i+0x166>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	079b      	lsls	r3, r3, #30
 8004972:	d413      	bmi.n	800499c <_printf_i+0x23c>
 8004974:	68e0      	ldr	r0, [r4, #12]
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	4298      	cmp	r0, r3
 800497a:	bfb8      	it	lt
 800497c:	4618      	movlt	r0, r3
 800497e:	e7a4      	b.n	80048ca <_printf_i+0x16a>
 8004980:	2301      	movs	r3, #1
 8004982:	4632      	mov	r2, r6
 8004984:	4649      	mov	r1, r9
 8004986:	4640      	mov	r0, r8
 8004988:	47d0      	blx	sl
 800498a:	3001      	adds	r0, #1
 800498c:	d09b      	beq.n	80048c6 <_printf_i+0x166>
 800498e:	3501      	adds	r5, #1
 8004990:	68e3      	ldr	r3, [r4, #12]
 8004992:	9903      	ldr	r1, [sp, #12]
 8004994:	1a5b      	subs	r3, r3, r1
 8004996:	42ab      	cmp	r3, r5
 8004998:	dcf2      	bgt.n	8004980 <_printf_i+0x220>
 800499a:	e7eb      	b.n	8004974 <_printf_i+0x214>
 800499c:	2500      	movs	r5, #0
 800499e:	f104 0619 	add.w	r6, r4, #25
 80049a2:	e7f5      	b.n	8004990 <_printf_i+0x230>
 80049a4:	08004c65 	.word	0x08004c65
 80049a8:	08004c76 	.word	0x08004c76

080049ac <memchr>:
 80049ac:	4603      	mov	r3, r0
 80049ae:	b510      	push	{r4, lr}
 80049b0:	b2c9      	uxtb	r1, r1
 80049b2:	4402      	add	r2, r0
 80049b4:	4293      	cmp	r3, r2
 80049b6:	4618      	mov	r0, r3
 80049b8:	d101      	bne.n	80049be <memchr+0x12>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e003      	b.n	80049c6 <memchr+0x1a>
 80049be:	7804      	ldrb	r4, [r0, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	428c      	cmp	r4, r1
 80049c4:	d1f6      	bne.n	80049b4 <memchr+0x8>
 80049c6:	bd10      	pop	{r4, pc}

080049c8 <memcpy>:
 80049c8:	440a      	add	r2, r1
 80049ca:	4291      	cmp	r1, r2
 80049cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80049d0:	d100      	bne.n	80049d4 <memcpy+0xc>
 80049d2:	4770      	bx	lr
 80049d4:	b510      	push	{r4, lr}
 80049d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049da:	4291      	cmp	r1, r2
 80049dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049e0:	d1f9      	bne.n	80049d6 <memcpy+0xe>
 80049e2:	bd10      	pop	{r4, pc}

080049e4 <memmove>:
 80049e4:	4288      	cmp	r0, r1
 80049e6:	b510      	push	{r4, lr}
 80049e8:	eb01 0402 	add.w	r4, r1, r2
 80049ec:	d902      	bls.n	80049f4 <memmove+0x10>
 80049ee:	4284      	cmp	r4, r0
 80049f0:	4623      	mov	r3, r4
 80049f2:	d807      	bhi.n	8004a04 <memmove+0x20>
 80049f4:	1e43      	subs	r3, r0, #1
 80049f6:	42a1      	cmp	r1, r4
 80049f8:	d008      	beq.n	8004a0c <memmove+0x28>
 80049fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a02:	e7f8      	b.n	80049f6 <memmove+0x12>
 8004a04:	4601      	mov	r1, r0
 8004a06:	4402      	add	r2, r0
 8004a08:	428a      	cmp	r2, r1
 8004a0a:	d100      	bne.n	8004a0e <memmove+0x2a>
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a16:	e7f7      	b.n	8004a08 <memmove+0x24>

08004a18 <_free_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	2900      	cmp	r1, #0
 8004a1e:	d043      	beq.n	8004aa8 <_free_r+0x90>
 8004a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a24:	1f0c      	subs	r4, r1, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bfb8      	it	lt
 8004a2a:	18e4      	addlt	r4, r4, r3
 8004a2c:	f000 f8d0 	bl	8004bd0 <__malloc_lock>
 8004a30:	4a1e      	ldr	r2, [pc, #120]	; (8004aac <_free_r+0x94>)
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	4610      	mov	r0, r2
 8004a36:	b933      	cbnz	r3, 8004a46 <_free_r+0x2e>
 8004a38:	6063      	str	r3, [r4, #4]
 8004a3a:	6014      	str	r4, [r2, #0]
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a42:	f000 b8cb 	b.w	8004bdc <__malloc_unlock>
 8004a46:	42a3      	cmp	r3, r4
 8004a48:	d90a      	bls.n	8004a60 <_free_r+0x48>
 8004a4a:	6821      	ldr	r1, [r4, #0]
 8004a4c:	1862      	adds	r2, r4, r1
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	bf01      	itttt	eq
 8004a52:	681a      	ldreq	r2, [r3, #0]
 8004a54:	685b      	ldreq	r3, [r3, #4]
 8004a56:	1852      	addeq	r2, r2, r1
 8004a58:	6022      	streq	r2, [r4, #0]
 8004a5a:	6063      	str	r3, [r4, #4]
 8004a5c:	6004      	str	r4, [r0, #0]
 8004a5e:	e7ed      	b.n	8004a3c <_free_r+0x24>
 8004a60:	461a      	mov	r2, r3
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	b10b      	cbz	r3, 8004a6a <_free_r+0x52>
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	d9fa      	bls.n	8004a60 <_free_r+0x48>
 8004a6a:	6811      	ldr	r1, [r2, #0]
 8004a6c:	1850      	adds	r0, r2, r1
 8004a6e:	42a0      	cmp	r0, r4
 8004a70:	d10b      	bne.n	8004a8a <_free_r+0x72>
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	4401      	add	r1, r0
 8004a76:	1850      	adds	r0, r2, r1
 8004a78:	4283      	cmp	r3, r0
 8004a7a:	6011      	str	r1, [r2, #0]
 8004a7c:	d1de      	bne.n	8004a3c <_free_r+0x24>
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4401      	add	r1, r0
 8004a84:	6011      	str	r1, [r2, #0]
 8004a86:	6053      	str	r3, [r2, #4]
 8004a88:	e7d8      	b.n	8004a3c <_free_r+0x24>
 8004a8a:	d902      	bls.n	8004a92 <_free_r+0x7a>
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	602b      	str	r3, [r5, #0]
 8004a90:	e7d4      	b.n	8004a3c <_free_r+0x24>
 8004a92:	6820      	ldr	r0, [r4, #0]
 8004a94:	1821      	adds	r1, r4, r0
 8004a96:	428b      	cmp	r3, r1
 8004a98:	bf01      	itttt	eq
 8004a9a:	6819      	ldreq	r1, [r3, #0]
 8004a9c:	685b      	ldreq	r3, [r3, #4]
 8004a9e:	1809      	addeq	r1, r1, r0
 8004aa0:	6021      	streq	r1, [r4, #0]
 8004aa2:	6063      	str	r3, [r4, #4]
 8004aa4:	6054      	str	r4, [r2, #4]
 8004aa6:	e7c9      	b.n	8004a3c <_free_r+0x24>
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000010c 	.word	0x2000010c

08004ab0 <_malloc_r>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	1ccd      	adds	r5, r1, #3
 8004ab4:	f025 0503 	bic.w	r5, r5, #3
 8004ab8:	3508      	adds	r5, #8
 8004aba:	2d0c      	cmp	r5, #12
 8004abc:	bf38      	it	cc
 8004abe:	250c      	movcc	r5, #12
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	db01      	blt.n	8004aca <_malloc_r+0x1a>
 8004ac6:	42a9      	cmp	r1, r5
 8004ac8:	d903      	bls.n	8004ad2 <_malloc_r+0x22>
 8004aca:	230c      	movs	r3, #12
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	2000      	movs	r0, #0
 8004ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad2:	f000 f87d 	bl	8004bd0 <__malloc_lock>
 8004ad6:	4921      	ldr	r1, [pc, #132]	; (8004b5c <_malloc_r+0xac>)
 8004ad8:	680a      	ldr	r2, [r1, #0]
 8004ada:	4614      	mov	r4, r2
 8004adc:	b99c      	cbnz	r4, 8004b06 <_malloc_r+0x56>
 8004ade:	4f20      	ldr	r7, [pc, #128]	; (8004b60 <_malloc_r+0xb0>)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	b923      	cbnz	r3, 8004aee <_malloc_r+0x3e>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f000 f862 	bl	8004bb0 <_sbrk_r>
 8004aec:	6038      	str	r0, [r7, #0]
 8004aee:	4629      	mov	r1, r5
 8004af0:	4630      	mov	r0, r6
 8004af2:	f000 f85d 	bl	8004bb0 <_sbrk_r>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	d123      	bne.n	8004b42 <_malloc_r+0x92>
 8004afa:	230c      	movs	r3, #12
 8004afc:	4630      	mov	r0, r6
 8004afe:	6033      	str	r3, [r6, #0]
 8004b00:	f000 f86c 	bl	8004bdc <__malloc_unlock>
 8004b04:	e7e3      	b.n	8004ace <_malloc_r+0x1e>
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	1b5b      	subs	r3, r3, r5
 8004b0a:	d417      	bmi.n	8004b3c <_malloc_r+0x8c>
 8004b0c:	2b0b      	cmp	r3, #11
 8004b0e:	d903      	bls.n	8004b18 <_malloc_r+0x68>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	441c      	add	r4, r3
 8004b14:	6025      	str	r5, [r4, #0]
 8004b16:	e004      	b.n	8004b22 <_malloc_r+0x72>
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	42a2      	cmp	r2, r4
 8004b1c:	bf0c      	ite	eq
 8004b1e:	600b      	streq	r3, [r1, #0]
 8004b20:	6053      	strne	r3, [r2, #4]
 8004b22:	4630      	mov	r0, r6
 8004b24:	f000 f85a 	bl	8004bdc <__malloc_unlock>
 8004b28:	f104 000b 	add.w	r0, r4, #11
 8004b2c:	1d23      	adds	r3, r4, #4
 8004b2e:	f020 0007 	bic.w	r0, r0, #7
 8004b32:	1ac2      	subs	r2, r0, r3
 8004b34:	d0cc      	beq.n	8004ad0 <_malloc_r+0x20>
 8004b36:	1a1b      	subs	r3, r3, r0
 8004b38:	50a3      	str	r3, [r4, r2]
 8004b3a:	e7c9      	b.n	8004ad0 <_malloc_r+0x20>
 8004b3c:	4622      	mov	r2, r4
 8004b3e:	6864      	ldr	r4, [r4, #4]
 8004b40:	e7cc      	b.n	8004adc <_malloc_r+0x2c>
 8004b42:	1cc4      	adds	r4, r0, #3
 8004b44:	f024 0403 	bic.w	r4, r4, #3
 8004b48:	42a0      	cmp	r0, r4
 8004b4a:	d0e3      	beq.n	8004b14 <_malloc_r+0x64>
 8004b4c:	1a21      	subs	r1, r4, r0
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f000 f82e 	bl	8004bb0 <_sbrk_r>
 8004b54:	3001      	adds	r0, #1
 8004b56:	d1dd      	bne.n	8004b14 <_malloc_r+0x64>
 8004b58:	e7cf      	b.n	8004afa <_malloc_r+0x4a>
 8004b5a:	bf00      	nop
 8004b5c:	2000010c 	.word	0x2000010c
 8004b60:	20000110 	.word	0x20000110

08004b64 <_realloc_r>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	4607      	mov	r7, r0
 8004b68:	4614      	mov	r4, r2
 8004b6a:	460e      	mov	r6, r1
 8004b6c:	b921      	cbnz	r1, 8004b78 <_realloc_r+0x14>
 8004b6e:	4611      	mov	r1, r2
 8004b70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b74:	f7ff bf9c 	b.w	8004ab0 <_malloc_r>
 8004b78:	b922      	cbnz	r2, 8004b84 <_realloc_r+0x20>
 8004b7a:	f7ff ff4d 	bl	8004a18 <_free_r>
 8004b7e:	4625      	mov	r5, r4
 8004b80:	4628      	mov	r0, r5
 8004b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b84:	f000 f830 	bl	8004be8 <_malloc_usable_size_r>
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d20f      	bcs.n	8004bac <_realloc_r+0x48>
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f7ff ff8e 	bl	8004ab0 <_malloc_r>
 8004b94:	4605      	mov	r5, r0
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d0f2      	beq.n	8004b80 <_realloc_r+0x1c>
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	f7ff ff13 	bl	80049c8 <memcpy>
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4638      	mov	r0, r7
 8004ba6:	f7ff ff37 	bl	8004a18 <_free_r>
 8004baa:	e7e9      	b.n	8004b80 <_realloc_r+0x1c>
 8004bac:	4635      	mov	r5, r6
 8004bae:	e7e7      	b.n	8004b80 <_realloc_r+0x1c>

08004bb0 <_sbrk_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	4d05      	ldr	r5, [pc, #20]	; (8004bcc <_sbrk_r+0x1c>)
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	4608      	mov	r0, r1
 8004bba:	602b      	str	r3, [r5, #0]
 8004bbc:	f7fc fe20 	bl	8001800 <_sbrk>
 8004bc0:	1c43      	adds	r3, r0, #1
 8004bc2:	d102      	bne.n	8004bca <_sbrk_r+0x1a>
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	b103      	cbz	r3, 8004bca <_sbrk_r+0x1a>
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
 8004bcc:	200002f0 	.word	0x200002f0

08004bd0 <__malloc_lock>:
 8004bd0:	4801      	ldr	r0, [pc, #4]	; (8004bd8 <__malloc_lock+0x8>)
 8004bd2:	f000 b811 	b.w	8004bf8 <__retarget_lock_acquire_recursive>
 8004bd6:	bf00      	nop
 8004bd8:	200002f8 	.word	0x200002f8

08004bdc <__malloc_unlock>:
 8004bdc:	4801      	ldr	r0, [pc, #4]	; (8004be4 <__malloc_unlock+0x8>)
 8004bde:	f000 b80c 	b.w	8004bfa <__retarget_lock_release_recursive>
 8004be2:	bf00      	nop
 8004be4:	200002f8 	.word	0x200002f8

08004be8 <_malloc_usable_size_r>:
 8004be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bec:	1f18      	subs	r0, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bfbc      	itt	lt
 8004bf2:	580b      	ldrlt	r3, [r1, r0]
 8004bf4:	18c0      	addlt	r0, r0, r3
 8004bf6:	4770      	bx	lr

08004bf8 <__retarget_lock_acquire_recursive>:
 8004bf8:	4770      	bx	lr

08004bfa <__retarget_lock_release_recursive>:
 8004bfa:	4770      	bx	lr

08004bfc <_init>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr

08004c08 <_fini>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr
